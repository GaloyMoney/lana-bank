type ApprovalProcess {
	id: ID!
	approvalProcessId: UUID!
	approvalProcessType: ApprovalProcessType!
	status: ApprovalProcessStatus!
	createdAt: Timestamp!
	rules: ApprovalRules!
	policy: Policy!
	canVote: Boolean!
	voters: [ApprovalProcessVoter!]!
}

input ApprovalProcessApproveInput {
	processId: UUID!
}

type ApprovalProcessApprovePayload {
	approvalProcess: ApprovalProcess!
}

type ApprovalProcessConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ApprovalProcessEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [ApprovalProcess!]!
}

input ApprovalProcessDenyInput {
	processId: UUID!
}

type ApprovalProcessDenyPayload {
	approvalProcess: ApprovalProcess!
}

"""
An edge in a connection.
"""
type ApprovalProcessEdge {
	"""
	The item at the end of the edge
	"""
	node: ApprovalProcess!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

enum ApprovalProcessStatus {
	APPROVED
	DENIED
	IN_PROGRESS
}

enum ApprovalProcessType {
	WITHDRAW_APPROVAL
	CREDIT_FACILITY_APPROVAL
}

type ApprovalProcessVoter {
	stillEligible: Boolean!
	didVote: Boolean!
	didApprove: Boolean!
	didDeny: Boolean!
	votedAt: Timestamp
	user: User!
}

union ApprovalRules = SystemApproval | CommitteeThreshold

type AuditEntry {
	id: ID!
	object: String!
	action: String!
	authorized: Boolean!
	recordedAt: Timestamp!
	subject: Subject!
}

type AuditEntryConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [AuditEntryEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [AuditEntry!]!
}

"""
An edge in a connection.
"""
type AuditEntryEdge {
	"""
	The item at the end of the edge
	"""
	node: AuditEntry!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type AuthenticatedSubject {
	user: User!
	visibleNavigationItems: VisibleNavigationItems!
	canCreateCustomer: Boolean!
	canCreateUser: Boolean!
	canCreateTermsTemplate: Boolean!
	canUpdateTermsTemplate: Boolean!
	canAssignRoleToUser: Boolean!
	canRevokeRoleFromUser: Boolean!
}


type Committee {
	id: ID!
	committeeId: UUID!
	createdAt: Timestamp!
	name: String!
	currentMembers: [User!]!
}

input CommitteeAddUserInput {
	committeeId: UUID!
	userId: UUID!
}

type CommitteeAddUserPayload {
	committee: Committee!
}

type CommitteeConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CommitteeEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Committee!]!
}

input CommitteeCreateInput {
	name: String!
}

type CommitteeCreatePayload {
	committee: Committee!
}

"""
An edge in a connection.
"""
type CommitteeEdge {
	"""
	The item at the end of the edge
	"""
	node: Committee!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input CommitteeRemoveUserInput {
	committeeId: UUID!
	userId: UUID!
}

type CommitteeRemoveUserPayload {
	committee: Committee!
}

type CommitteeThreshold {
	threshold: Int!
	committee: Committee!
}

type Document {
	id: ID!
	documentId: UUID!
	customerId: UUID!
	status: DocumentStatus!
	filename: String!
}

input DocumentArchiveInput {
	documentId: UUID!
}

type DocumentArchivePayload {
	document: Document!
}

input DocumentDeleteInput {
	documentId: UUID!
}

type DocumentDeletePayload {
	deletedDocumentId: UUID!
}

input DocumentDownloadLinksGenerateInput {
	documentId: UUID!
}

type DocumentDownloadLinksGeneratePayload {
	documentId: UUID!
	link: String!
}

enum DocumentStatus {
	ACTIVE
	ARCHIVED
}




type Mutation {
	userCreate(input: UserCreateInput!): UserCreatePayload!
	userAssignRole(input: UserAssignRoleInput!): UserAssignRolePayload!
	userRevokeRole(input: UserRevokeRoleInput!): UserRevokeRolePayload!
	committeeCreate(input: CommitteeCreateInput!): CommitteeCreatePayload!
	committeeAddUser(input: CommitteeAddUserInput!): CommitteeAddUserPayload!
	committeeRemoveUser(input: CommitteeRemoveUserInput!): CommitteeRemoveUserPayload!
	policyAssignCommittee(input: PolicyAssignCommitteeInput!): PolicyAssignCommitteePayload!
	approvalProcessApprove(input: ApprovalProcessApproveInput!): ApprovalProcessApprovePayload!
	approvalProcessDeny(input: ApprovalProcessDenyInput!): ApprovalProcessDenyPayload!
	documentDownloadLinkGenerate(input: DocumentDownloadLinksGenerateInput!): DocumentDownloadLinksGeneratePayload!
	documentDelete(input: DocumentDeleteInput!): DocumentDeletePayload!
	documentArchive(input: DocumentArchiveInput!): DocumentArchivePayload!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type Policy {
	id: ID!
	policyId: UUID!
	approvalProcessType: ApprovalProcessType!
	rules: ApprovalRules!
}

input PolicyAssignCommitteeInput {
	policyId: UUID!
	committeeId: UUID!
	threshold: Int!
}

type PolicyAssignCommitteePayload {
	policy: Policy!
}

type PolicyConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [PolicyEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Policy!]!
}

"""
An edge in a connection.
"""
type PolicyEdge {
	"""
	The item at the end of the edge
	"""
	node: Policy!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type Query {
	me: AuthenticatedSubject!
	user(id: UUID!): User
	users: [User!]!
	committee(id: UUID!): Committee
	committees(first: Int!, after: String): CommitteeConnection!
	policy(id: UUID!): Policy
	policies(first: Int!, after: String): PolicyConnection!
	approvalProcess(id: UUID!): ApprovalProcess
	approvalProcesses(first: Int!, after: String): ApprovalProcessConnection!
	document(id: UUID!): Document
	audit(first: Int!, after: String): AuditEntryConnection!
}

enum Role {
	SUPERUSER
	ADMIN
	BANK_MANAGER
	ACCOUNTANT
}


union Subject = User | System

type System {
	name: String!
}

type SystemApproval {
	autoApprove: Boolean!
}

scalar Timestamp

scalar UUID

type User {
	userId: UUID!
	roles: [Role!]!
	email: String!
}

input UserAssignRoleInput {
	id: UUID!
	role: Role!
}

type UserAssignRolePayload {
	user: User!
}

input UserCreateInput {
	email: String!
}

type UserCreatePayload {
	user: User!
}

input UserRevokeRoleInput {
	id: UUID!
	role: Role!
}

type UserRevokeRolePayload {
	user: User!
}

type VisibleNavigationItems {
	loan: Boolean!
	term: Boolean!
	user: Boolean!
	customer: Boolean!
	deposit: Boolean!
	withdraw: Boolean!
	audit: Boolean!
	financials: Boolean!
	creditFacilities: Boolean!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
