enum AccountStatus {
	ACTIVE
	INACTIVE
}

scalar AnnualRatePct

type ApprovalProcess {
	id: ID!
	approvalProcessId: UUID!
	approvalProcessType: ApprovalProcessType!
	status: ApprovalProcessStatus!
	createdAt: Timestamp!
	rules: ApprovalRules!
	policy: Policy!
	canVote: Boolean!
	voters: [ApprovalProcessVoter!]!
}

input ApprovalProcessApproveInput {
	processId: UUID!
}

type ApprovalProcessApprovePayload {
	approvalProcess: ApprovalProcess!
}

type ApprovalProcessConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ApprovalProcessEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [ApprovalProcess!]!
}

input ApprovalProcessDenyInput {
	processId: UUID!
}

type ApprovalProcessDenyPayload {
	approvalProcess: ApprovalProcess!
}

"""
An edge in a connection.
"""
type ApprovalProcessEdge {
	"""
	The item at the end of the edge
	"""
	node: ApprovalProcess!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

enum ApprovalProcessStatus {
	APPROVED
	DENIED
	IN_PROGRESS
}

enum ApprovalProcessType {
	WITHDRAW_APPROVAL
	CREDIT_FACILITY_APPROVAL
}

type ApprovalProcessVoter {
	stillEligible: Boolean!
	didVote: Boolean!
	didApprove: Boolean!
	didDeny: Boolean!
	votedAt: Timestamp
	user: User!
}

union ApprovalRules = SystemApproval | CommitteeThreshold

type AuditEntry {
	id: ID!
	object: String!
	action: String!
	authorized: Boolean!
	recordedAt: Timestamp!
	subject: Subject!
}

type AuditEntryConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [AuditEntryEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [AuditEntry!]!
}

"""
An edge in a connection.
"""
type AuditEntryEdge {
	"""
	The item at the end of the edge
	"""
	node: AuditEntry!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type AuthenticatedSubject {
	user: User!
	visibleNavigationItems: VisibleNavigationItems!
	canCreateCustomer: Boolean!
	canCreateUser: Boolean!
	canCreateTermsTemplate: Boolean!
	canUpdateTermsTemplate: Boolean!
	canAssignRoleToUser: Boolean!
	canRevokeRoleFromUser: Boolean!
}


scalar CVLPct

enum CollateralizationState {
	FULLY_COLLATERALIZED
	UNDER_MARGIN_CALL_THRESHOLD
	UNDER_LIQUIDATION_THRESHOLD
	NO_COLLATERAL
}

type Committee {
	id: ID!
	committeeId: UUID!
	createdAt: Timestamp!
	name: String!
	currentMembers: [User!]!
}

input CommitteeAddUserInput {
	committeeId: UUID!
	userId: UUID!
}

type CommitteeAddUserPayload {
	committee: Committee!
}

type CommitteeConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CommitteeEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Committee!]!
}

input CommitteeCreateInput {
	name: String!
}

type CommitteeCreatePayload {
	committee: Committee!
}

"""
An edge in a connection.
"""
type CommitteeEdge {
	"""
	The item at the end of the edge
	"""
	node: Committee!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input CommitteeRemoveUserInput {
	committeeId: UUID!
	userId: UUID!
}

type CommitteeRemoveUserPayload {
	committee: Committee!
}

type CommitteeThreshold {
	threshold: Int!
	committee: Committee!
}

type CreditFacility {
	id: ID!
	creditFacilityId: UUID!
	approvalProcessId: UUID!
	activatedAt: Timestamp
	expiresAt: Timestamp
	createdAt: Timestamp!
	status: CreditFacilityStatus!
	collateralizationState: CollateralizationState!
	facilityAmount: UsdCents!
	collateral: Satoshis!
	creditFacilityTerms: TermValues!
	approvalProcess: ApprovalProcess!
	customer: Customer!
}

input CreditFacilityCollateralUpdateInput {
	creditFacilityId: UUID!
	collateral: Satoshis!
}

type CreditFacilityCollateralUpdatePayload {
	creditFacility: CreditFacility!
}

type CreditFacilityConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CreditFacilityEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [CreditFacility!]!
}

input CreditFacilityCreateInput {
	customerId: UUID!
	facility: UsdCents!
	terms: TermsInput!
}

type CreditFacilityCreatePayload {
	creditFacility: CreditFacility!
}

"""
An edge in a connection.
"""
type CreditFacilityEdge {
	"""
	The item at the end of the edge
	"""
	node: CreditFacility!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input CreditFacilityPartialPaymentInput {
	creditFacilityId: UUID!
	amount: UsdCents!
}

type CreditFacilityPartialPaymentPayload {
	creditFacility: CreditFacility!
}

enum CreditFacilityStatus {
	PENDING_COLLATERALIZATION
	PENDING_APPROVAL
	ACTIVE
	EXPIRED
	CLOSED
}

type Customer {
	id: ID!
	customerId: UUID!
	status: AccountStatus!
	level: KycLevel!
	email: String!
	telegramId: String!
	applicantId: String
	withdrawals: [Withdrawal!]!
	userCanInitiateWithdrawal: Boolean!
	documents: [Document!]!
}

type CustomerConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CustomerEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Customer!]!
}

input CustomerCreateInput {
	email: String!
	telegramId: String!
}

type CustomerCreatePayload {
	customer: Customer!
}

"""
An edge in a connection.
"""
type CustomerEdge {
	"""
	The item at the end of the edge
	"""
	node: Customer!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input CustomerUpdateInput {
	customerId: UUID!
	telegramId: String!
}

type CustomerUpdatePayload {
	customer: Customer!
}

type Deposit {
	id: ID!
	depositId: UUID!
	customerId: UUID!
	amount: UsdCents!
	createdAt: Timestamp!
	reference: String!
	customer: Customer!
}

type DepositConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [DepositEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Deposit!]!
}

"""
An edge in a connection.
"""
type DepositEdge {
	"""
	The item at the end of the edge
	"""
	node: Deposit!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input DepositRecordInput {
	customerId: UUID!
	amount: UsdCents!
	reference: String
}

type DepositRecordPayload {
	deposit: Deposit!
}

type Document {
	id: ID!
	documentId: UUID!
	customerId: UUID!
	status: DocumentStatus!
	filename: String!
}

input DocumentArchiveInput {
	documentId: UUID!
}

type DocumentArchivePayload {
	document: Document!
}

input DocumentCreateInput {
	file: Upload!
	customerId: UUID!
}

type DocumentCreatePayload {
	document: Document!
}

input DocumentDeleteInput {
	documentId: UUID!
}

type DocumentDeletePayload {
	deletedDocumentId: UUID!
}

input DocumentDownloadLinksGenerateInput {
	documentId: UUID!
}

type DocumentDownloadLinksGeneratePayload {
	documentId: UUID!
	link: String!
}

enum DocumentStatus {
	ACTIVE
	ARCHIVED
}

type Duration {
	period: Period!
	units: Int!
}

input DurationInput {
	period: Period!
	units: Int!
}




enum InterestInterval {
	END_OF_MONTH
	END_OF_DAY
}

enum KycLevel {
	NOT_KYCED
	BASIC
	ADVANCED
}

type Mutation {
	customerDocumentAttach(input: DocumentCreateInput!): DocumentCreatePayload!
	sumsubPermalinkCreate(input: SumsubPermalinkCreateInput!): SumsubPermalinkCreatePayload!
	userCreate(input: UserCreateInput!): UserCreatePayload!
	userAssignRole(input: UserAssignRoleInput!): UserAssignRolePayload!
	userRevokeRole(input: UserRevokeRoleInput!): UserRevokeRolePayload!
	customerCreate(input: CustomerCreateInput!): CustomerCreatePayload!
	customerUpdate(input: CustomerUpdateInput!): CustomerUpdatePayload!
	depositRecord(input: DepositRecordInput!): DepositRecordPayload!
	withdrawalInitiate(input: WithdrawalInitiateInput!): WithdrawalInitiatePayload!
	withdrawalConfirm(input: WithdrawalConfirmInput!): WithdrawalConfirmPayload!
	withdrawalCancel(input: WithdrawalCancelInput!): WithdrawalCancelPayload!
	termsTemplateCreate(input: TermsTemplateCreateInput!): TermsTemplateCreatePayload!
	termsTemplateUpdate(input: TermsTemplateUpdateInput!): TermsTemplateUpdatePayload!
	creditFacilityCreate(input: CreditFacilityCreateInput!): CreditFacilityCreatePayload!
	creditFacilityCollateralUpdate(input: CreditFacilityCollateralUpdateInput!): CreditFacilityCollateralUpdatePayload!
	creditFacilityPartialPayment(input: CreditFacilityPartialPaymentInput!): CreditFacilityPartialPaymentPayload!
	committeeCreate(input: CommitteeCreateInput!): CommitteeCreatePayload!
	committeeAddUser(input: CommitteeAddUserInput!): CommitteeAddUserPayload!
	committeeRemoveUser(input: CommitteeRemoveUserInput!): CommitteeRemoveUserPayload!
	policyAssignCommittee(input: PolicyAssignCommitteeInput!): PolicyAssignCommitteePayload!
	approvalProcessApprove(input: ApprovalProcessApproveInput!): ApprovalProcessApprovePayload!
	approvalProcessDeny(input: ApprovalProcessDenyInput!): ApprovalProcessDenyPayload!
	documentDownloadLinkGenerate(input: DocumentDownloadLinksGenerateInput!): DocumentDownloadLinksGeneratePayload!
	documentDelete(input: DocumentDeleteInput!): DocumentDeletePayload!
	documentArchive(input: DocumentArchiveInput!): DocumentArchivePayload!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

enum Period {
	MONTHS
}

type Policy {
	id: ID!
	policyId: UUID!
	approvalProcessType: ApprovalProcessType!
	rules: ApprovalRules!
}

input PolicyAssignCommitteeInput {
	policyId: UUID!
	committeeId: UUID!
	threshold: Int!
}

type PolicyAssignCommitteePayload {
	policy: Policy!
}

type PolicyConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [PolicyEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Policy!]!
}

"""
An edge in a connection.
"""
type PolicyEdge {
	"""
	The item at the end of the edge
	"""
	node: Policy!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type Query {
	me: AuthenticatedSubject!
	user(id: UUID!): User
	users: [User!]!
	customer(id: UUID!): Customer
	customerByEmail(email: String!): Customer
	customers(first: Int!, after: String): CustomerConnection!
	withdrawal(id: UUID!): Withdrawal
	withdrawals(first: Int!, after: String): WithdrawalConnection!
	deposit(id: UUID!): Deposit
	deposits(first: Int!, after: String): DepositConnection!
	termsTemplate(id: UUID!): TermsTemplate
	termsTemplates: [TermsTemplate!]!
	creditFacility(id: UUID!): CreditFacility
	creditFacilities(first: Int!, after: String): CreditFacilityConnection!
	committee(id: UUID!): Committee
	committees(first: Int!, after: String): CommitteeConnection!
	policy(id: UUID!): Policy
	policies(first: Int!, after: String): PolicyConnection!
	approvalProcess(id: UUID!): ApprovalProcess
	approvalProcesses(first: Int!, after: String): ApprovalProcessConnection!
	document(id: UUID!): Document
	audit(first: Int!, after: String): AuditEntryConnection!
}

enum Role {
	SUPERUSER
	ADMIN
	BANK_MANAGER
	ACCOUNTANT
}

scalar Satoshis


union Subject = User | System

input SumsubPermalinkCreateInput {
	customerId: UUID!
}

type SumsubPermalinkCreatePayload {
	url: String!
}

type System {
	name: String!
}

type SystemApproval {
	autoApprove: Boolean!
}

type TermValues {
	annualRate: AnnualRatePct!
	accrualInterval: InterestInterval!
	incurrenceInterval: InterestInterval!
	duration: Duration!
	liquidationCvl: CVLPct!
	marginCallCvl: CVLPct!
	initialCvl: CVLPct!
}

input TermsInput {
	annualRate: AnnualRatePct!
	accrualInterval: InterestInterval!
	incurrenceInterval: InterestInterval!
	liquidationCvl: CVLPct!
	duration: DurationInput!
	marginCallCvl: CVLPct!
	initialCvl: CVLPct!
}

type TermsTemplate {
	id: ID!
	termsId: UUID!
	values: TermValues!
	createdAt: Timestamp!
	name: String!
}

input TermsTemplateCreateInput {
	name: String!
	annualRate: AnnualRatePct!
	accrualInterval: InterestInterval!
	incurrenceInterval: InterestInterval!
	duration: DurationInput!
	liquidationCvl: CVLPct!
	marginCallCvl: CVLPct!
	initialCvl: CVLPct!
}

type TermsTemplateCreatePayload {
	termsTemplate: TermsTemplate!
}

input TermsTemplateUpdateInput {
	id: UUID!
	annualRate: AnnualRatePct!
	accrualInterval: InterestInterval!
	incurrenceInterval: InterestInterval!
	liquidationCvl: CVLPct!
	duration: DurationInput!
	marginCallCvl: CVLPct!
	initialCvl: CVLPct!
}

type TermsTemplateUpdatePayload {
	termsTemplate: TermsTemplate!
}

scalar Timestamp

scalar UUID

scalar Upload

scalar UsdCents

type User {
	userId: UUID!
	roles: [Role!]!
	email: String!
}

input UserAssignRoleInput {
	id: UUID!
	role: Role!
}

type UserAssignRolePayload {
	user: User!
}

input UserCreateInput {
	email: String!
}

type UserCreatePayload {
	user: User!
}

input UserRevokeRoleInput {
	id: UUID!
	role: Role!
}

type UserRevokeRolePayload {
	user: User!
}

type VisibleNavigationItems {
	loan: Boolean!
	term: Boolean!
	user: Boolean!
	customer: Boolean!
	deposit: Boolean!
	withdraw: Boolean!
	audit: Boolean!
	financials: Boolean!
	creditFacilities: Boolean!
}

type Withdrawal {
	id: ID!
	withdrawalId: UUID!
	customerId: UUID!
	approvalProcessId: UUID!
	amount: UsdCents!
	status: WithdrawalStatus!
	createdAt: Timestamp!
	reference: String!
	customer: Customer!
	approvalProcess: ApprovalProcess!
	userCanConfirm: Boolean!
	userCanCancel: Boolean!
}

input WithdrawalCancelInput {
	withdrawalId: UUID!
}

type WithdrawalCancelPayload {
	withdrawal: Withdrawal!
}

input WithdrawalConfirmInput {
	withdrawalId: UUID!
}

type WithdrawalConfirmPayload {
	withdrawal: Withdrawal!
}

type WithdrawalConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [WithdrawalEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Withdrawal!]!
}

"""
An edge in a connection.
"""
type WithdrawalEdge {
	"""
	The item at the end of the edge
	"""
	node: Withdrawal!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input WithdrawalInitiateInput {
	customerId: UUID!
	amount: UsdCents!
	reference: String
}

type WithdrawalInitiatePayload {
	withdrawal: Withdrawal!
}

enum WithdrawalStatus {
	PENDING_APPROVAL
	PENDING_CONFIRMATION
	CONFIRMED
	DENIED
	CANCELLED
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @specifiedBy(url: String!) on SCALAR
schema {
	query: Query
	mutation: Mutation
}
