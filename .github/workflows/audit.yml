name: Audit

on:
  pull_request:
    branches:
      - main
      - "feature/**"

jobs:
  rust_audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  pnpm_audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - run: pnpm install
      - run: pnpm audit --audit-level=high

  pip_audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install pip-audit + TOML parser
        run: |
          python -m pip install --no-cache-dir pip-audit tomli

      - name: Convert every poetry.lock and audit
        run: |
          set -euo pipefail

          # 1) find all lockfiles
          mapfile -t LOCKFILES < <(find . -type f -name 'poetry.lock' | sort)
          if [ "${#LOCKFILES[@]}" -eq 0 ]; then
            echo "⚠️  No poetry.lock files found – skipping pip-audit."
            exit 0
          fi

          # 2) turn each lock into a requirements.txt and audit it
          for lock in "${LOCKFILES[@]}"; do
            dir=$(dirname "$lock")
            echo ""
            echo "🔍 pip-audit → $dir"

            tmp_req=$(mktemp)

            python - <<'PY' "$lock" "$tmp_req"
import sys, tomli, pathlib, textwrap
lock_path, out_path = map(pathlib.Path, sys.argv[1:3])
data = tomli.loads(lock_path.read_text())
pkgs = data.get("package", [])
with out_path.open("w") as f:
    for p in pkgs:
        if p.get("category", "main") == "main":
            f.write(f"{p['name']}=={p['version']}\n")
PY

            pip-audit -r "$tmp_req"
          done