name: Audit

on:
  pull_request:
    branches:
      - main
      - "feature/**"

jobs:
  rust_audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  pnpm_audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
      - run: pnpm install
      - run: pnpm audit --audit-level=high

  safety_gate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }

      - name: Install Safety CLI (with Poetry lock support)
        run: python -m pip install --no-cache-dir "safety>=3.0.0" "tomli>=2"

      - name: Scan all poetry.lock files — fail on HIGH/CRITICAL
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t LOCKS < <(find . -type f -name 'poetry.lock' | sort)
          if [[ ${#LOCKS[@]} -eq 0 ]]; then
            echo "⚠️  No poetry.lock files found — skipping Safety."
            exit 0
          fi
          for lock in "${LOCKS[@]}"; do
            echo "🔒 safety scan → $lock"
            safety scan --file "$lock" --fail-on=high
          done