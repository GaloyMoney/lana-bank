#@ load("@ytt:data", "data")

#@ def nix_flake_cachix_image_config():
type: registry-image
source:
  repository: ghcr.io/nix-community/docker-nixpkgs/cachix-flakes
  tag: latest-x86_64-linux
#@ end

#@ def next_version_task(resource_name="repo"):
task: next-version
config:
  platform: linux
  image_resource: #@ nix_flake_cachix_image_config()
  inputs:
  - name: #@ resource_name
    path: repo
  outputs:
  - name: version
  params:
    CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
    CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
  run:
    path: sh
    args:
      - -exc
      - |
        set -euo pipefail
        cd repo
        nix run .#cocogitto bump -- --auto --dry-run | tr -d '\n' > ../version/version
#@ end

#@ def build_release(resource_name="repo"):
task: build-release
config:
  platform: linux
  image_resource: #@ nix_flake_cachix_image_config()
  inputs:
  - name: #@ resource_name
    path: repo
  - name: version
  params:
    CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
    CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
  run:
    path: sh
    args:
      - -exc
      - |
        set -euo pipefail
        export RELEASE_BUILD_VERSION=$(cat version/version)
        cd repo
        cachix use $CACHIX_CACHE_NAME
        cachix watch-exec ${CACHIX_CACHE_NAME} -- \
          nix build --impure .#lana-cli-release
#@ end

#@ def set_pr_status(description, context = "status", status = "pending"):
put: prs
params:
  path: prs
  status: #@ status
  base_context: nix-cache
  context: #@ context
  description: #@ description
#@ end

#@ def nix_build_and_cache(pkg, resource_name="prs"):
task: #@ "cache-" + pkg
config:
  platform: linux
  image_resource: #@ nix_flake_cachix_image_config()
  inputs:
  - name: #@ resource_name
    path: repo
  params:
    CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
    CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
    BUILD_PKG_NAME: #@ pkg
  run:
    path: sh
    args:
      - -exc
      - |
        set -euo pipefail
        cd repo
        cachix use $CACHIX_CACHE_NAME
        cachix watch-exec ${CACHIX_CACHE_NAME} -- nix build .#${BUILD_PKG_NAME}
#@ end

#@ def check_latest_commit(pkg):
task: check-latest-commit
config:
  platform: linux
  image_resource: #@ nix_flake_cachix_image_config()
  inputs:
  - name: prs
    path: repo
  params:
    GITHUB_TOKEN: #@ data.values.github_token
    GITHUB_ORG: #@ data.values.gh_org
    GITHUB_REPO: #@ data.values.gh_repository
    CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
    CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
  run:
    path: sh
    args:
      - -exc
      - |
        set -euo pipefail
        cd repo
        cachix use $CACHIX_CACHE_NAME
        cachix watch-exec ${CACHIX_CACHE_NAME} -- nix run ./ci#check_latest_commit
#@ if pkg == "":
on_failure: #@ set_pr_status("Aborted - old commit", status = "success")
#@ else:
on_failure:
  do:
  - #@ set_pr_status("Aborted - old commit", status = "success")
  - #@ set_pr_status("Aborted - old commit", context = pkg, status = "success")
#@ end
#@ end
