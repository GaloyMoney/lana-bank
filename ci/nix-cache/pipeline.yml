#@ load("@ytt:data", "data")

#@ load("fragments.lib.yml",
#@   "nix_flake_cachix_image_config",
#@   "next_version_task",
#@   "build_release",
#@   "check_latest_commit",
#@   "nix_build_and_cache",
#@   "exec_phase",
#@   "set_pr_status"
#@ )

groups:
  - name: all
    jobs:
      - build-release-main
      - cache-dev-profile
      - populate-nix-cache-pr
      - rebuild-nix-cache
  - name: main
    jobs:
      - build-release-main
  - name: pr
    jobs:
      - cache-dev-profile
      - populate-nix-cache-pr
      - rebuild-nix-cache

jobs:
  - name: build-release-main
    plan:
    - in_parallel:
      - get: repo
        trigger: true
      - get: version
        trigger: true
    - #@ next_version_task()
    - #@ build_release()

  - name: cache-dev-profile
    max_in_flight: 3
    plan:
    - get: prs
      trigger: true
      version: every
      params:
        integration_tool: rebase
    - in_parallel:
      - #@ set_pr_status("Awaiting build slot")
      - task: cache-dev-profile
        config:
          platform: linux
          image_resource: #@ nix_flake_cachix_image_config()
          inputs:
          - name: prs
            path: repo
          params:
            CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
            CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
          run:
            path: sh
            args:
              - -exc
              - |
                set -euo pipefail
                cd repo
                cachix use $CACHIX_CACHE_NAME
                cachix watch-exec ${CACHIX_CACHE_NAME} -- nix develop --profile /tmp/dev-profile --command true
      - task: cache-ci-scripts
        config:
          platform: linux
          image_resource: #@ nix_flake_cachix_image_config()
          inputs:
          - name: prs
            path: repo
          params:
            CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
            CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
          run:
            path: sh
            args:
              - -exc
              - |
                set -euo pipefail
                cd repo
                cachix use $CACHIX_CACHE_NAME
                cachix watch-exec ${CACHIX_CACHE_NAME} -- nix build ./ci#check-latest-commit
                cachix watch-exec ${CACHIX_CACHE_NAME} -- nix build ./ci#next-version
                cachix watch-exec ${CACHIX_CACHE_NAME} -- nix build ./ci#wait-cachix-paths
                cachix watch-exec ${CACHIX_CACHE_NAME} -- nix build ./ci#rebuild-nix-cache

  - name: rebuild-nix-cache
    plan:
    - in_parallel:
      - get: repo
        trigger: true
      - get: version
        trigger: true
    - task: rebuild-nix-cache
      config:
        platform: linux
        image_resource: #@ nix_flake_cachix_image_config()
        inputs:
          - name: repo
        params:
          GITHUB_TOKEN: #@ data.values.github_token
          CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
          CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
          CONCOURSE_USERNAME: #@ data.values.concourse_username
          CONCOURSE_PASSWORD: #@ data.values.concourse_password
        run:
          path: sh
          args:
            - -exc
            - |
              set -euo pipefail
              cd repo
              cachix use $CACHIX_CACHE_NAME
              nix run ./ci#rebuild-nix-cache

  - name: populate-nix-cache-pr
    max_in_flight: 3
    plan:
    - in_parallel:
      - get: prs
        trigger: true
        version: every
        params:
          fetch_tags: true
      - get: repo
        trigger: true
      - get: version
        trigger: true
    - #@ exec_phase(["lana-deps"])
    - in_parallel:
      - #@ exec_phase(["nextest"])
      - #@ exec_phase(["simulation"])
      - #@ exec_phase(["lana-cli-debug", "bats"])
    - in_parallel:
      - do:
        - #@ check_latest_commit()
        - task: nix-flake-check
          config:
            platform: linux
            image_resource: #@ nix_flake_cachix_image_config()
            inputs:
            - name: prs
              path: repo
            params:
              CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
              CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
            run:
              path: sh
              args:
                - -exc
                - |
                  set -euo pipefail
                  cd repo
                  cachix use $CACHIX_CACHE_NAME
                  cachix watch-exec ${CACHIX_CACHE_NAME} -- nix flake check
      - do:
        - #@ check_latest_commit()
        - in_parallel:
          - #@ set_pr_status("Executing phase lana-cli-release")
          - #@ set_pr_status("Running", context = "lana-cli-release")
          - do:
            - #@ next_version_task(resource_name = "prs")
            - #@ build_release(resource_name = "prs")
          on_failure:
            in_parallel:
            - #@ set_pr_status("Failure (lana-cli-release)", status = "failure")
            - #@ set_pr_status("Failed", context = "lana-cli-release", status = "failure")
          on_abort: #@ set_pr_status("Aborted", context = "lana-cli-release", status = "failure")
          on_error: #@ set_pr_status("Errored", context = "lana-cli-release", status = "error")
    - in_parallel:
      - #@ set_pr_status("Complete", context = "lana-cli-release", status = "success")
      - #@ set_pr_status("Complete", status = "success")
    on_abort: #@ set_pr_status("Aborted", status = "failure")
    on_error: #@ set_pr_status("Errored", status = "error")


resources:
  - name: repo
    type: git
    source:
      fetch_tags: true
      uri: #@ data.values.git_uri
      branch: #@ data.values.git_branch
      private_key: #@ data.values.github_private_key
    webhook_token: ((webhook.secret))

  - name: prs
    type: pull-request
    check_every: 24h
    webhook_token: ((webhook.secret))
    source:
      base_branch: #@ data.values.git_branch
      repository: #@ data.values.gh_org + "/" + data.values.gh_repository
      access_token: #@ data.values.github_token

  - name: prs-out
    type: pull-request
    check_every: 24h
    webhook_token: ((webhook.secret))
    source:
      base_branch: #@ data.values.git_branch
      repository: #@ data.values.gh_org + "/" + data.values.gh_repository
      access_token: #@ data.values.github_token

  - name: version
    type: semver
    source:
      initial_version: 0.0.0
      driver: git
      file: version
      uri: #@ data.values.git_uri
      branch: #@ data.values.git_version_branch
      private_key: #@ data.values.github_private_key

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: cfcommunity/github-pr-resource
