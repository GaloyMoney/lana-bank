#@ load("@ytt:data", "data")

#@ load("fragments.lib.yml",
#@   "build_edge_image",
#@   "public_gar_registry",
#@   "nodejs_task_image_config",
#@   "edge_image_resource",
#@   "version_resource",
#@   "gh_release_resource",
#@   "pipeline_tasks_resource",
#@   "release_task_image_config",
#@   "rust_task_image_config",
#@   "charts_repo_resource",
#@   "charts_repo_bot_branch",
#@   "private_gar_registry",
#@   "nix_task_image_config"
#@ )

#@ load("app-template.lib.yml",
#@   "app_src_resource",
#@   "app_src_resource_name",
#@   "build_app_edge_image_name",
#@   "app_edge_image_resource_name",
#@   "app_latest_image_resource_name",
#@   "app_latest_image",
#@   "build_app_edge_image",
#@   "app_edge_image",
#@   "nix_flake_cachix_image_config"
#@ )

groups:
  - name: lana-bank
    jobs:
      - set-next-version
      - bump-version
      - test-bats
      - test-integration
      - release
      - flake-check
      - build-edge-image
      - release-docker
      #! - set-dev-version
      - bump-image-in-chart
      -  #@ build_app_edge_image_name("admin-panel")
      -  #@ build_app_edge_image_name("customer-portal")
      - build-meltano-edge-image
      - await-release-binary

jobs:
  - name: set-next-version
    serial: true
    plan:
      - get: repo
        trigger: true
      - get: version
      - task: next-version
        config:
          platform: linux
          image_resource: #@ nix_flake_cachix_image_config()
          inputs:
          - name: repo
          outputs:
          - name: version
          params:
            CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
            CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
          run:
            path: sh
            args:
            - -exc
            - |
              set -euo pipefail
              cachix use $CACHIX_CACHE_NAME
              cd repo
              nix run ./ci#next-version > ../version/version
      - put: version
        params:
          file: version/version
  - name: bump-version
    serial: true
    plan:
      - get: repo
        trigger: true
        passed: [ release ]
      - get: version
        passed: [ release ]
      - task: next-version
        config:
          platform: linux
          image_resource: #@ nix_flake_cachix_image_config()
          inputs:
          - name: repo
          outputs:
          - name: version
          params:
            CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
            CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
          run:
            path: sh
            args:
            - -exc
            - |
              set -euo pipefail
              cachix use $CACHIX_CACHE_NAME
              cd repo
              nix run ./ci#next-version > ../version/version
      - put: version
        params:
          file: version/version

  -  #@ build_edge_image()

  - name: test-integration
    serial: true
    plan:
      - in_parallel:
          - get: repo
            trigger: true
            passed: [ set-next-version ]
          - { get: pipeline-tasks }
      - task: run-nextest
        privileged: true
        config:
          platform: linux
          image_resource: #@ nix_flake_cachix_image_config()
          inputs:
          - name: repo
          params:
            CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
            CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
          run:
            path: sh
            args:
              - -exc
              - |
                set -euo pipefail
                cd repo
                cachix use $CACHIX_CACHE_NAME
                nix run .#nextest

  - name: test-bats
    serial: true
    plan:
      - in_parallel:
          - get: repo
            trigger: true
            passed: [ set-next-version ]
          - { get: pipeline-tasks }
      - task: run-bats
        privileged: true
        config:
          platform: linux
          image_resource: #@ nix_flake_cachix_image_config()
          inputs:
          - name: repo
          params:
            CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
            CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
          run:
            path: sh
            args:
              - -exc
              - |
                set -euo pipefail
                cd repo
                cachix use $CACHIX_CACHE_NAME
                nix run .#bats

  - name: flake-check
    serial: true
    plan:
    - get: repo
      trigger: true
      passed: [ set-next-version ]

    - task: nix-flake-check
      config:
        platform: linux
        image_resource: #@ nix_flake_cachix_image_config()
        inputs:
        - name: repo
        params:
          CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
          CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
        run:
          path: sh
          args:
            - -exc
            - |
              set -euo pipefail
              cd repo
              cachix use $CACHIX_CACHE_NAME
              
              nix flake check

  - name: await-release-binary
    serial: true
    plan:
    - in_parallel:
      - get: repo
        trigger: true
        passed: [ set-next-version ]
      - get: version
        passed: [ set-next-version ]
    - task: await-release-binary
      config:
        platform: linux
        image_resource: #@ nix_flake_cachix_image_config()
        inputs:
        - name: repo
        - name: version
        params:
          CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
          CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
        run:
          path: sh
          args:
          - -exc
          - |
            set -euo pipefail
            cd repo

            cachix use $CACHIX_CACHE_NAME
            export RELEASE_BUILD_VERSION=$(cat ../version/version)
            
            nix build --impure .#lana-cli-release --dry-run --json | \
              nix run nixpkgs#jq -- -r '.[].outputs.out' \
              > nix-checks-paths.txt
            echo "Checks to wait for:"
            cat nix-checks-paths.txt

            nix run ./ci#wait-cachix-paths -- \
              -p ./nix-checks-paths.txt \
              -c galoymoney \
              -a 300 \
              -d 10

  - name: release
    serial: true
    plan:
      - in_parallel:
          - get: repo
            passed: 
              - flake-check
              - test-bats
              - test-integration
              - await-release-binary
              - build-meltano-edge-image
            trigger: true
          - get: pipeline-tasks
          - get: version
            passed: [ await-release-binary ]
          - get: #@ app_src_resource_name("admin-panel")
            passed:
              -  #@ build_app_edge_image_name("admin-panel")
          - get: #@ app_src_resource_name("customer-portal")
            passed:
              -  #@ build_app_edge_image_name("customer-portal")
          - get: meltano-edge-image
            params: { skip_download: true }
            passed:
              - build-meltano-edge-image
      - in_parallel:
        - do:
          - task: prep-release
            config:
              platform: linux
              image_resource: #@ release_task_image_config()
              inputs:
                - name: pipeline-tasks
                - name: repo
                - name: version
              outputs:
                - name: artifacts
              run:
                path: pipeline-tasks/ci/vendor/tasks/prep-release-src.sh
          - task: prep-release-apps
            config:
              platform: linux
              image_resource: #@ release_task_image_config()
              inputs:
                - name: pipeline-tasks
                - name: version
                - name: #@ app_src_resource_name("admin-panel")
                  path: admin-panel-src
                - name: #@ app_src_resource_name("customer-portal")
                  path: customer-portal-src
              outputs:
                - name: #@ app_src_resource_name("admin-panel")
                  path: admin-panel-src
                - name: #@ app_src_resource_name("customer-portal")
                  path: customer-portal-src
              run:
                path: pipeline-tasks/ci/tasks/prep-release-apps.sh
        - task: nix-build-release
          attempts: 2
          config:
            platform: linux
            image_resource: #@ nix_flake_cachix_image_config()
            inputs:
            - name: repo
            - name: version
            outputs:
            - name: binaries
            params:
              CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
              CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
            run:
              path: sh
              args:
              - -exc
              - |
                set -euo pipefail
                cachix use $CACHIX_CACHE_NAME
                cd repo
                export RELEASE_BUILD_VERSION=$(cat ../version/version)
                nix build --impure .#lana-cli-release
                mkdir -p ../bin
                cp result/bin/lana-cli ../binaries/
      - in_parallel:
        - do:
          - task: build-admin-panel-release
            attempts: 2
            privileged: true
            config:
              platform: linux
              image_resource:
                type: registry-image
                source:
                  repository: concourse/oci-build-task
              inputs:
                - name: admin-panel-src
              outputs:
                - name: admin-panel-image
                  path: image
              params:
                CONTEXT: admin-panel-src
                DOCKERFILE: admin-panel-src/apps/admin-panel/Dockerfile
              run:
                path: build
          - put: #@ app_latest_image_resource_name("admin-panel")
            params:
              image: admin-panel-image/image.tar
              additional_tags: version/version
        - do:
          - task: build-customer-portal-release
            attempts: 2
            privileged: true
            config:
              platform: linux
              image_resource:
                type: registry-image
                source:
                  repository: concourse/oci-build-task
              inputs:
                - name: customer-portal-src
              outputs:
                - name: customer-portal-image
                  path: image
              params:
                CONTEXT: customer-portal-src
                DOCKERFILE: customer-portal-src/apps/customer-portal/Dockerfile
              run:
                path: build
          - put: #@ app_latest_image_resource_name("customer-portal")
            params:
              image: customer-portal-image/image.tar
              additional_tags: version/version
      - put: repo
        params:
          tag: artifacts/gh-release-tag
          only_tag: true
          repository: repo
      - task: github-release
        config:
          image_resource: #@ rust_task_image_config()
          platform: linux
          inputs:
            - name: binaries
            - name: version
            - name: pipeline-tasks
            - name: artifacts
          outputs:
            - name: artifacts
          params:
            BRANCH: #@ data.values.git_branch
          run:
            path: pipeline-tasks/ci/tasks/github-release.sh
      - put: gh-release
        params:
          name: artifacts/gh-release-name
          tag: artifacts/gh-release-tag
          body: artifacts/gh-release-notes.md
          globs: [artifacts/binaries/*]
  - name: release-docker
    serial: true
    plan:
      - in_parallel:
          - get: repo
            passed:
              - release
          - get: version
            passed:
              - release
            trigger: true
          - get: pipeline-tasks
          - get: meltano-edge-image
            passed:
              - release
            params:
              format: oci
      - task: prepare-docker-build
        config:
          platform: linux
          image_resource: #@ rust_task_image_config()
          inputs:
            - name: pipeline-tasks
            - name: version
            - name: repo
          outputs:
            - name: repo
          params:
            GH_APP_ID: #@ data.values.github_app_id
            GH_APP_PRIVATE_KEY: #@ data.values.github_app_private_key
          run:
            path: pipeline-tasks/ci/tasks/prep-docker-build-env.sh
      - task: build
        privileged: true
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: concourse/oci-build-task
          inputs:
            - name: repo
          outputs:
            - name: image
          params:
            CONTEXT: repo
            BUILD_ARGS_FILE: repo/.env
            DOCKERFILE: "repo/Dockerfile.release"
          run:
            path: build
      - in_parallel:
          - put: latest-image
            params:
              image: image/image.tar
              additional_tags: version/version
          - put: meltano-latest-image
            params:
              image: meltano-edge-image/image.tar
              additional_tags: version/version
  - name: bump-image-in-chart
    plan:
      - in_parallel:
          - get: latest-image
            passed: [release-docker]
            params: { skip_download: true }
          - get: #@ app_latest_image_resource_name("admin-panel")
          - get: #@ app_latest_image_resource_name("customer-portal")
          - get: meltano-latest-image
            passed: [release-docker]
            params: { skip_download: true }
          - get: repo
            trigger: true
            passed: [release-docker]
          - get: version
            trigger: true
            passed: [release-docker]
          - get: charts-repo
            params: { skip_download: true }
          - get: pipeline-tasks
      - task: bump-image-digest-in-values
        config:
          platform: linux
          image_resource: #@ rust_task_image_config()
          inputs:
            - name: repo
            - name: latest-image
            - name: #@ app_latest_image_resource_name("admin-panel")
            - name: #@ app_latest_image_resource_name("customer-portal")
            - name: meltano-latest-image
            - name: pipeline-tasks
            - name: charts-repo
            - name: version
          outputs:
            - name: charts-repo
          params:
            BRANCH: #@ data.values.git_charts_branch
            CHARTS_SUBDIR: lana-bank
          run:
            path: pipeline-tasks/ci/tasks/bump-image-digest.sh
      - put: charts-repo-bot-branch
        params:
          repository: charts-repo
          force: true
      - task: open-charts-pr
        config:
          platform: linux
          image_resource: #@ rust_task_image_config()
          inputs:
            - name: pipeline-tasks
            - name: latest-image
            - name: charts-repo
            - name: repo
          params:
            GH_APP_ID: #@ data.values.github_app_id
            GH_APP_PRIVATE_KEY: #@ data.values.github_app_private_key
            BRANCH: #@ data.values.git_charts_branch
            BOT_BRANCH: #@ data.values.git_charts_bot_branch
            CHARTS_SUBDIR: lana-bank
          run:
            path: pipeline-tasks/ci/tasks/chart-open-charts-pr.sh

  -  #@ build_app_edge_image("admin-panel")
  -  #@ build_app_edge_image("customer-portal")

  - name: build-meltano-edge-image
    serial: true
    plan:
      - get: repo
        trigger: true
        passed: [ set-next-version ]
      - task: build
        config:
          platform: linux
          image_resource: #@ nix_flake_cachix_image_config()
          inputs:
          - name: repo
          outputs:
          - name: image
          params:
            CACHIX_AUTH_TOKEN: #@ data.values.cachix_auth_token
            CACHIX_CACHE_NAME: #@ data.values.cachix_cache_name
          run:
            path: bash
            args:
              - -c
              - |
                set -eux
                pushd repo

                cachix use $CACHIX_CACHE_NAME

                nix build --no-sandbox .#meltano-image
                cp $(nix eval --raw .#meltano-image.outPath) ../image/image.tar
      - put: meltano-edge-image
        params:
          image: image/image.tar

resources:
  - name: repo
    type: git
    source:
      ignore_paths:
        - "ci/*[^md]"
        - apps/**/*
      fetch_tags: true
      uri: #@ data.values.git_uri
      branch: #@ data.values.git_branch
      private_key: #@ data.values.github_private_key
    webhook_token: ((webhook.secret))
  - name: latest-image
    type: registry-image
    source:
      tag: latest
      username: #@ data.values.gar_registry_user
      password: #@ data.values.gar_registry_password
      repository: #@ private_gar_registry() + "/" + data.values.folder_registry_image

  - name: meltano-edge-image
    type: registry-image
    source:
      tag: edge
      username: #@ data.values.gar_registry_user
      password: #@ data.values.gar_registry_password
      repository: #@ public_gar_registry() + "/meltano"

  - name: meltano-latest-image
    type: registry-image
    source:
      tag: latest
      username: #@ data.values.gar_registry_user
      password: #@ data.values.gar_registry_password
      repository: #@ public_gar_registry() + "/meltano"

  -  #@ pipeline_tasks_resource()
  -  #@ edge_image_resource(publicRepo=False)
  -  #@ version_resource()
  -  #@ gh_release_resource()
  -  #@ charts_repo_bot_branch()
  -  #@ charts_repo_resource()
  -  #@ app_src_resource("admin-panel", "main")
  -  #@ app_edge_image("admin-panel")
  -  #@ app_latest_image("admin-panel")
  -  #@ app_src_resource("customer-portal", "main")
  -  #@ app_edge_image("customer-portal")
  -  #@ app_latest_image("customer-portal")

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource
