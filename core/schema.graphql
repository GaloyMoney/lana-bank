type FixedTermLoan {
	loanId: UUID!
}

input FixedTermLoanCreateInput {
	bitfinexUserName: String!
}

type FixedTermLoanCreatePayload {
	loan: FixedTermLoan!
}




type Mutation {
	userCreate(input: UserCreateInput!): UserCreatePayload!
	fixedTermLoanCreate(input: FixedTermLoanCreateInput!): FixedTermLoanCreatePayload!
	userTopupCollateral(input: UserTopupCollateralInput!): UserTopupCollateralPayload!
}

type Query {
	loan(id: UUID!): FixedTermLoan
}

scalar Satoshis


scalar UUID

type UnallocatedCollateral {
	btcBalance: Satoshis!
}

type User {
	userId: UUID!
	bitfinexUsername: String!
	unallocatedCollateral: UnallocatedCollateral!
}

input UserCreateInput {
	bitfinexUsername: String!
}

type UserCreatePayload {
	user: User!
}

input UserTopupCollateralInput {
	userId: UUID!
	amount: Satoshis!
}

type UserTopupCollateralPayload {
	user: User!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
