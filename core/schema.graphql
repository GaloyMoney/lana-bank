type FixedTermLoan {
	loanId: UUID!
	state: FixedTermLoanState!
}

input FixedTermLoanCreateInput {
	bitfinexUserName: String!
}

type FixedTermLoanCreatePayload {
	loan: FixedTermLoan!
}

input FixedTermLoanDeclareCollateralizedInput {
	loanId: UUID!
}

type FixedTermLoanDeclareCollateralizedPayload {
	loan: FixedTermLoan!
}

enum FixedTermLoanState {
	INITIALIZING
	PENDING_COLLATERALIZATION
	COLLATERALIZED
}




type Mutation {
	fixedTermLoanCreate(input: FixedTermLoanCreateInput!): FixedTermLoanCreatePayload!
	fixedTermLoanDeclareCollateralized(input: FixedTermLoanDeclareCollateralizedInput!): FixedTermLoanDeclareCollateralizedPayload!
}

type Query {
	loan(id: UUID!): FixedTermLoan
}


scalar UUID

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
