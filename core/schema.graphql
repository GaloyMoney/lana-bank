type Checking {
	usdBalance: UsdCents!
}

type Collateral {
	btcBalance: Satoshis!
}

type FixedTermLoan {
	loanId: UUID!
	userId: UUID!
	balance: FixedTermLoanBalance!
}

input FixedTermLoanApproveInput {
	loanId: UUID!
	collateral: Satoshis!
	principal: UsdCents!
}

type FixedTermLoanApprovePayload {
	loan: FixedTermLoan!
}

type FixedTermLoanBalance {
	collateral: Collateral!
	outstanding: LoanOutstanding!
	interestIncurred: InterestIncome!
}

input FixedTermLoanCreateInput {
	userId: UUID!
}

type FixedTermLoanCreatePayload {
	loan: FixedTermLoan!
}




type InterestIncome {
	usdBalance: UsdCents!
}

type LoanOutstanding {
	usdBalance: UsdCents!
}

type Mutation {
	userCreate(input: UserCreateInput!): UserCreatePayload!
	userTopupCollateral(input: UserTopupCollateralInput!): UserTopupCollateralPayload!
	fixedTermLoanCreate(input: FixedTermLoanCreateInput!): FixedTermLoanCreatePayload!
	fixedTermLoanApprove(input: FixedTermLoanApproveInput!): FixedTermLoanApprovePayload!
}

type Query {
	loan(id: UUID!): FixedTermLoan
}

scalar Satoshis


scalar UUID

type UnallocatedCollateral {
	btcBalance: Satoshis!
}

scalar UsdCents

type User {
	userId: UUID!
	bitfinexUsername: String!
	balance: UserBalance!
}

type UserBalance {
	unallocatedCollateral: UnallocatedCollateral!
	checking: Checking!
}

input UserCreateInput {
	bitfinexUsername: String!
}

type UserCreatePayload {
	user: User!
}

input UserTopupCollateralInput {
	userId: UUID!
	amount: Satoshis!
	reference: String!
}

type UserTopupCollateralPayload {
	user: User!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
