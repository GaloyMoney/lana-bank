type BtcBalance {
	btcBalance: Satoshis!
}

type Checking {
	settled: UsdBalance!
	pending: UsdBalance!
}

type Collateral {
	btcBalance: Satoshis!
}

type FixedTermLoan {
	loanId: UUID!
	userId: UUID!
	balance: FixedTermLoanBalance!
}

input FixedTermLoanApproveInput {
	loanId: UUID!
	collateral: Satoshis!
	principal: UsdCents!
}

type FixedTermLoanApprovePayload {
	loan: FixedTermLoan!
}

type FixedTermLoanBalance {
	collateral: Collateral!
	outstanding: LoanOutstanding!
	interestIncurred: InterestIncome!
}

input FixedTermLoanCreateInput {
	userId: UUID!
}

type FixedTermLoanCreatePayload {
	loan: FixedTermLoan!
}

input FixedTermLoanRecordPaymentInput {
	loanId: UUID!
	amount: UsdCents!
}

type FixedTermLoanRecordPaymentPayload {
	loan: FixedTermLoan!
}




type InterestIncome {
	usdBalance: UsdCents!
}

type LoanOutstanding {
	usdBalance: UsdCents!
}

type Mutation {
	userCreate(input: UserCreateInput!): UserCreatePayload!

	# admin (could have declare intent from user in additional)
	userTopupCollateral(input: UserTopupCollateralInput!): UserTopupCollateralPayload!
	
	# user query?
	withdrawInitiate(input: WithdrawInitiateInput!): WithdrawInitiatePayload!

	# admin
	withdrawSettle(input: WithdrawSettleInput!): WithdrawSettlePayload!

	# user initiated
	fixedTermLoanCreate(input: FixedTermLoanCreateInput!): FixedTermLoanCreatePayload!

	# unclear. could be user initiated
	fixedTermLoanApprove(input: FixedTermLoanApproveInput!): FixedTermLoanApprovePayload!

	# user
	# TODO: rename mutation
	fixedTermLoanRepay(input: FixedTermLoanRecordPaymentInput!): FixedTermLoanRecordPaymentPayload!

	# TODO:
	depositTopup()
}

type Query {
	loan(id: UUID!): FixedTermLoan
	user(id: UUID!): User
}

scalar Satoshis


scalar UUID

type UnallocatedCollateral {
	settled: BtcBalance!
}

type UsdBalance {
	usdBalance: UsdCents!
}

scalar UsdCents

type User {
	userId: UUID!
	bitfinexUsername: String!
	balance: UserBalance!
}

type UserBalance {
	unallocatedCollateral: UnallocatedCollateral!
	checking: Checking!
}

input UserCreateInput {
	bitfinexUsername: String!
}

type UserCreatePayload {
	user: User!
}

input UserTopupCollateralInput {
	userId: UUID!
	amount: Satoshis!
	reference: String!
}

type UserTopupCollateralPayload {
	user: User!
}

# TODO: rename to Withdrawal
type Withdraw {
	id: UUID!
	userId: UUID!
}

input WithdrawInitiateInput {
	userId: UUID!
	amount: UsdCents!
	destination: String!
	reference: String!
}

type WithdrawInitiatePayload {
	withdraw: Withdraw!
}

input WithdrawSettleInput {
	withdrawalId: UUID!
	reference: String!
}

type WithdrawSettlePayload {
	withdraw: Withdraw!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
