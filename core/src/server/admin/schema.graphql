type AccountBalancesByCurrency {
	btc: LayeredBtcAccountBalances!
	usd: LayeredUsdAccountBalances!
	usdt: LayeredUsdAccountBalances!
}

type AccountDetails {
	id: UUID!
	name: String!
}

type AccountSetAndSubAccounts {
	id: UUID!
	name: String!
	subAccounts(first: Int!, after: String): AccountSetSubAccountConnection!
}

type AccountSetAndSubAccountsWithBalance {
	id: UUID!
	name: String!
	balance: AccountBalancesByCurrency!
	subAccounts(first: Int!, after: String): AccountSetSubAccountWithBalanceConnection!
}

type AccountSetDetails {
	id: UUID!
	name: String!
	hasSubAccounts: Boolean!
}

union AccountSetSubAccount = AccountDetails | AccountSetDetails

type AccountSetSubAccountConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [AccountSetSubAccountEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [AccountSetSubAccount!]!
}

"""
An edge in a connection.
"""
type AccountSetSubAccountEdge {
	"""
	The item at the end of the edge
	"""
	node: AccountSetSubAccount!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

union AccountSetSubAccountWithBalance = AccountWithBalance | AccountSetWithBalance

type AccountSetSubAccountWithBalanceConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [AccountSetSubAccountWithBalanceEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [AccountSetSubAccountWithBalance!]!
}

"""
An edge in a connection.
"""
type AccountSetSubAccountWithBalanceEdge {
	"""
	The item at the end of the edge
	"""
	node: AccountSetSubAccountWithBalance!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type AccountSetWithBalance {
	id: UUID!
	name: String!
	balance: AccountBalancesByCurrency!
	hasSubAccounts: Boolean!
}

enum AccountStatus {
	ACTIVE
	INACTIVE
}

type AccountWithBalance {
	id: UUID!
	name: String!
	balance: AccountBalancesByCurrency!
}

scalar AnnualRate

type BalanceSheet {
	name: String!
	balance: AccountBalancesByCurrency!
	categories: [StatementCategory!]!
}


type BtcAccountBalance {
	debit: Satoshis!
	credit: Satoshis!
	netDebit: SignedSatoshis!
}

type BtcBalance {
	btcBalance: Satoshis!
}

scalar CVLPct

type ChartOfAccounts {
	name: String!
	categories: [ChartOfAccountsCategory!]!
}

type ChartOfAccountsCategory {
	name: String!
	accounts: [AccountSetSubAccount!]!
}

type Checking {
	settled: UsdBalance!
	pending: UsdBalance!
}

type Collateral {
	btcBalance: Satoshis!
}

type Customer {
	customerId: UUID!
	email: String!
	btcDepositAddress: String!
	ustDepositAddress: String!
	status: AccountStatus!
	level: KycLevel!
	applicantId: String
	balance: UserBalance!
	loans: [Loan!]!
}

type CustomerConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CustomerEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Customer!]!
}

"""
An edge in a connection.
"""
type CustomerEdge {
	"""
	The item at the end of the edge
	"""
	node: Customer!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input DefaultTermsUpdateInput {
	annualRate: AnnualRate!
	interval: InterestInterval!
	liquidationCvl: CVLPct!
	duration: DurationInput!
	marginCallCvl: CVLPct!
	initialCvl: CVLPct!
}

type DefaultTermsUpdatePayload {
	terms: Terms!
}

type Duration {
	period: Period!
	units: Int!
}

input DurationInput {
	period: Period!
	units: Int!
}




type InterestIncome {
	usdBalance: UsdCents!
}

enum InterestInterval {
	END_OF_MONTH
}

enum KycLevel {
	ZERO
	ONE
	TWO
}

type LayeredBtcAccountBalances {
	all: BtcAccountBalance!
	settled: BtcAccountBalance!
	pending: BtcAccountBalance!
	encumbrance: BtcAccountBalance!
}

type LayeredUsdAccountBalances {
	all: UsdAccountBalance!
	settled: UsdAccountBalance!
	pending: UsdAccountBalance!
	encumbrance: UsdAccountBalance!
}

type Loan {
	id: ID!
	loanId: UUID!
	startDate: Timestamp!
	loanTerms: TermValues!
	status: LoanStatus!
	balance: LoanBalance!
	customer: Customer!
}

input LoanApproveInput {
	loanId: UUID!
	collateral: Satoshis!
}

type LoanApprovePayload {
	loan: Loan!
}

type LoanBalance {
	collateral: Collateral!
	outstanding: LoanOutstanding!
	interestIncurred: InterestIncome!
}

input LoanCreateInput {
	customerId: UUID!
	desiredPrincipal: UsdCents!
	loanTerms: TermsInput!
}

type LoanCreatePayload {
	loan: Loan!
}

type LoanOutstanding {
	usdBalance: UsdCents!
}

input LoanPartialPaymentInput {
	loanId: UUID!
	amount: UsdCents!
}

type LoanPartialPaymentPayload {
	loan: Loan!
}

enum LoanStatus {
	NEW
	ACTIVE
	CLOSED
}

type Mutation {
	shareholderEquityAdd(input: ShareholderEquityAddInput!): SuccessPayload!
	sumsubPermalinkCreate(input: SumsubPermalinkCreateInput!): SumsubPermalinkCreatePayload!
	defaultTermsUpdate(input: DefaultTermsUpdateInput!): DefaultTermsUpdatePayload!
	loanCreate(input: LoanCreateInput!): LoanCreatePayload!
	loanApprove(input: LoanApproveInput!): LoanApprovePayload!
	loanPartialPayment(input: LoanPartialPaymentInput!): LoanPartialPaymentPayload!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

enum Period {
	MONTHS
}

type ProfitAndLossStatement {
	name: String!
	balance: AccountBalancesByCurrency!
	categories: [StatementCategory!]!
}

type Query {
	loan(id: UUID!): Loan
	customer(id: UUID!): Customer
	customers(first: Int!, after: String): CustomerConnection!
	defaultTerms: Terms
	trialBalance: TrialBalance
	offBalanceSheetTrialBalance: TrialBalance
	chartOfAccounts: ChartOfAccounts
	offBalanceSheetChartOfAccounts: ChartOfAccounts
	balanceSheet: BalanceSheet
	profitAndLossStatement: ProfitAndLossStatement
	accountSet(accountSetId: UUID!): AccountSetAndSubAccounts
	accountSetWithBalance(accountSetId: UUID!): AccountSetAndSubAccountsWithBalance
}

scalar Satoshis

input ShareholderEquityAddInput {
	amount: UsdCents!
	reference: String!
}

scalar SignedSatoshis

scalar SignedUsdCents

type StatementCategory {
	name: String!
	balance: AccountBalancesByCurrency!
	accounts: [AccountSetSubAccountWithBalance!]!
}


type SuccessPayload {
	success: Boolean!
}

input SumsubPermalinkCreateInput {
	customerId: String!
}

type SumsubPermalinkCreatePayload {
	url: String!
}

type TermValues {
	annualRate: AnnualRate!
	interval: InterestInterval!
	duration: Duration!
	liquidationCvl: CVLPct!
	marginCallCvl: CVLPct!
	initialCvl: CVLPct!
}

type Terms {
	id: ID!
	termsId: UUID!
	values: TermValues!
}

input TermsInput {
	annualRate: AnnualRate!
	interval: InterestInterval!
	liquidationCvl: CVLPct!
	duration: DurationInput!
	marginCallCvl: CVLPct!
	initialCvl: CVLPct!
}

scalar Timestamp

type TrialBalance {
	name: String!
	balance: AccountBalancesByCurrency!
	subAccounts: [AccountSetSubAccountWithBalance!]!
}

scalar UUID

type UnallocatedCollateral {
	settled: BtcBalance!
}

type UsdAccountBalance {
	debit: UsdCents!
	credit: UsdCents!
	netDebit: SignedUsdCents!
}

type UsdBalance {
	usdBalance: UsdCents!
}

scalar UsdCents

type UserBalance {
	unallocatedCollateral: UnallocatedCollateral!
	checking: Checking!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
