type BtcBalance {
	btcBalance: Satoshis!
}

type Checking {
	settled: UsdBalance!
	pending: UsdBalance!
}

type Collateral {
	btcBalance: Satoshis!
}

type FixedTermLoan {
	loanId: UUID!
	balance: FixedTermLoanBalance!
}

type FixedTermLoanBalance {
	collateral: Collateral!
	outstanding: LoanOutstanding!
	interestIncurred: InterestIncome!
}




type InterestIncome {
	usdBalance: UsdCents!
}

type LoanOutstanding {
	usdBalance: UsdCents!
}

type Mutation {
	dummy: Boolean!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type Query {
	loan(id: UUID!): FixedTermLoan
	user(id: UUID!): User
	users(first: Int!, after: String): UserConnection!
}

scalar Satoshis


scalar UUID

type UnallocatedCollateral {
	settled: BtcBalance!
}

type UsdBalance {
	usdBalance: UsdCents!
}

scalar UsdCents

type User {
	userId: UUID!
	btcDepositAddress: String!
	ustDepositAddress: String!
	email: String!
	balance: UserBalance!
}

type UserBalance {
	unallocatedCollateral: UnallocatedCollateral!
	checking: Checking!
}

type UserConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [UserEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [User!]!
}

"""
An edge in a connection.
"""
type UserEdge {
	"""
	The item at the end of the edge
	"""
	node: User!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
