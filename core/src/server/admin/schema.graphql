type AccountBalancesByCurrency {
	btc: LayeredBtcAccountBalances!
	usd: LayeredUsdAccountBalances!
	usdt: LayeredUsdAccountBalances!
}

type AccountLedgerLineItem {
	cursor: String!
	name: String!
	totalBalance: AccountBalancesByCurrency!
}

type AccountLedgerLineItemConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [AccountLedgerLineItemEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [AccountLedgerLineItem!]!
}

"""
An edge in a connection.
"""
type AccountLedgerLineItemEdge {
	"""
	The item at the end of the edge
	"""
	node: AccountLedgerLineItem!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type AccountLedgerSummary {
	name: String!
	totalBalance: AccountBalancesByCurrency!
	lineItemBalances: AccountLedgerLineItemConnection!
}


type BtcAccountBalance {
	debit: Satoshis!
	credit: Satoshis!
	net: Satoshis!
}

type BtcBalance {
	btcBalance: Satoshis!
}

type Checking {
	settled: UsdBalance!
	pending: UsdBalance!
}

type Collateral {
	btcBalance: Satoshis!
}

type FixedTermLoan {
	loanId: UUID!
	balance: FixedTermLoanBalance!
	user: User!
}

type FixedTermLoanBalance {
	collateral: Collateral!
	outstanding: LoanOutstanding!
	interestIncurred: InterestIncome!
}




type InterestIncome {
	usdBalance: UsdCents!
}

type LayeredBtcAccountBalances {
	settled: BtcAccountBalance!
	pending: BtcAccountBalance!
	encumbrance: BtcAccountBalance!
}

type LayeredUsdAccountBalances {
	settled: UsdAccountBalance!
	pending: UsdAccountBalance!
	encumbrance: UsdAccountBalance!
}

type LoanOutstanding {
	usdBalance: UsdCents!
}

type Mutation {
	shareholderEquityAdd(input: ShareholderEquityAddInput!): SuccessPayload!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type Query {
	loan(id: UUID!): FixedTermLoan
	user(id: UUID!): User
	users(first: Int!, after: String): UserConnection!
	trialBalance(first: Int!, after: String): AccountLedgerSummary
}

scalar Satoshis

input ShareholderEquityAddInput {
	amount: UsdCents!
	reference: String!
}


type SuccessPayload {
	success: Boolean!
}

scalar UUID

type UnallocatedCollateral {
	settled: BtcBalance!
}

type UsdAccountBalance {
	debit: UsdCents!
	credit: UsdCents!
	net: UsdCents!
}

type UsdBalance {
	usdBalance: UsdCents!
}

scalar UsdCents

type User {
	userId: UUID!
	btcDepositAddress: String!
	ustDepositAddress: String!
	email: String!
	balance: UserBalance!
	loans: [FixedTermLoan!]!
}

type UserBalance {
	unallocatedCollateral: UnallocatedCollateral!
	checking: Checking!
}

type UserConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [UserEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [User!]!
}

"""
An edge in a connection.
"""
type UserEdge {
	"""
	The item at the end of the edge
	"""
	node: User!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
