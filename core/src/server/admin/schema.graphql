type BtcBalance {
	btcBalance: Satoshis!
}

type Checking {
	settled: UsdBalance!
	pending: UsdBalance!
}

type Collateral {
	btcBalance: Satoshis!
}

type FixedTermLoan {
	loanId: UUID!
	userId: UUID!
	balance: FixedTermLoanBalance!
}

type FixedTermLoanBalance {
	collateral: Collateral!
	outstanding: LoanOutstanding!
	interestIncurred: InterestIncome!
}




type InterestIncome {
	usdBalance: UsdCents!
}

type LoanOutstanding {
	usdBalance: UsdCents!
}

type Mutation {
	userPledgeCollateral(input: UserPledgeCollateralInput!): UserPledgeCollateralPayload!
	withdrawalSettle(input: WithdrawalSettleInput!): WithdrawalSettlePayload!
}

type Query {
	loan(id: UUID!): FixedTermLoan
	user(id: UUID!): User
	loansForUser(userId: UUID!): [FixedTermLoan!]
}

scalar Satoshis


scalar UUID

type UnallocatedCollateral {
	settled: BtcBalance!
}

type UsdBalance {
	usdBalance: UsdCents!
}

scalar UsdCents

type User {
	userId: UUID!
	bitfinexUsername: String!
	balance: UserBalance!
}

type UserBalance {
	unallocatedCollateral: UnallocatedCollateral!
	checking: Checking!
}

input UserPledgeCollateralInput {
	userId: UUID!
	amount: Satoshis!
	reference: String!
}

type UserPledgeCollateralPayload {
	user: User!
}

type Withdrawal {
	withdrawalId: UUID!
	userId: UUID!
	amount: UsdCents!
}

input WithdrawalSettleInput {
	withdrawalId: UUID!
	reference: String!
}

type WithdrawalSettlePayload {
	withdrawal: Withdrawal!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
