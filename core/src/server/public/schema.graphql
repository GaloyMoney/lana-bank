enum AccountStatus {
	ACTIVE
	INACTIVE
}


type BtcBalance {
	btcBalance: Satoshis!
}

type Checking {
	settled: UsdBalance!
	pending: UsdBalance!
}

type Collateral {
	btcBalance: Satoshis!
}

type FixedTermLoan {
	loanId: UUID!
	balance: FixedTermLoanBalance!
	user: User!
}

input FixedTermLoanApproveInput {
	loanId: UUID!
	collateral: Satoshis!
	principal: UsdCents!
}

type FixedTermLoanApprovePayload {
	loan: FixedTermLoan!
}

type FixedTermLoanBalance {
	collateral: Collateral!
	outstanding: LoanOutstanding!
	interestIncurred: InterestIncome!
}

type FixedTermLoanCreatePayload {
	loan: FixedTermLoan!
}

input FixedTermLoanRecordPaymentInput {
	loanId: UUID!
	amount: UsdCents!
}

type FixedTermLoanRecordPaymentPayload {
	loan: FixedTermLoan!
}




type InterestIncome {
	usdBalance: UsdCents!
}

enum KycLevel {
	ZERO
	ONE
	TWO
}

type LoanOutstanding {
	usdBalance: UsdCents!
}

type Mutation {
	withdrawalInitiate(input: WithdrawalInitiateInput!): WithdrawalInitiatePayload!
	fixedTermLoanCreate: FixedTermLoanCreatePayload!
	fixedTermLoanApprove(input: FixedTermLoanApproveInput!): FixedTermLoanApprovePayload!
	fixedTermLoanRecordPayment(input: FixedTermLoanRecordPaymentInput!): FixedTermLoanRecordPaymentPayload!
	sumsubTokenCreate: SumsubTokenCreatePayload!
}

type Query {
	loan(id: UUID!): FixedTermLoan
	user(id: UUID!): User
	me: User
}

scalar Satoshis


type SumsubTokenCreatePayload {
	token: String!
}

scalar UUID

type UnallocatedCollateral {
	settled: BtcBalance!
}

type UsdBalance {
	usdBalance: UsdCents!
}

scalar UsdCents

type User {
	userId: UUID!
	email: String!
	btcDepositAddress: String!
	ustDepositAddress: String!
	status: AccountStatus!
	level: KycLevel!
	applicantId: String
	balance: UserBalance!
	loans: [FixedTermLoan!]!
}

type UserBalance {
	unallocatedCollateral: UnallocatedCollateral!
	checking: Checking!
}

type Withdrawal {
	userId: UUID!
	withdrawalId: UUID!
	amount: UsdCents!
}

input WithdrawalInitiateInput {
	amount: UsdCents!
	destination: String!
	reference: String
}

type WithdrawalInitiatePayload {
	withdrawal: Withdrawal!
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
