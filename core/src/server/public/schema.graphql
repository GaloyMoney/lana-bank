enum AccountStatus {
	ACTIVE
	INACTIVE
}

scalar AnnualRatePct

type AuditEntry {
	id: ID!
	object: String!
	action: String!
	authorized: Boolean!
	recordedAt: Timestamp!
	subject: Subject!
}


scalar CVLPct

type Checking {
	settled: UsdCents!
	pending: UsdCents!
}

type Collateral {
	btcBalance: Satoshis!
}

enum CollateralAction {
	ADD
	REMOVE
}

type CollateralUpdated {
	satoshis: Satoshis!
	recordedAt: Timestamp!
	action: CollateralAction!
	txId: UUID!
}

type CollateralizationUpdated {
	state: LoanCollaterizationState!
	collateral: Satoshis!
	outstandingInterest: UsdCents!
	outstandingPrincipal: UsdCents!
	price: UsdCents!
	recordedAt: Timestamp!
}

type Customer {
	customerId: UUID!
	email: String!
	telegramId: String!
	status: AccountStatus!
	level: KycLevel!
	applicantId: String
	balance: CustomerBalance!
	loans: [Loan!]!
	deposits: [Deposit!]!
	withdrawals: [Withdrawal!]!
	audit: [AuditEntry!]!
}

type CustomerBalance {
	checking: Checking!
}

type Deposit {
	customerId: UUID!
	depositId: UUID!
	amount: UsdCents!
	reference: String!
	createdAt: Timestamp!
	customer: Customer
}

type Duration {
	period: Period!
	units: Int!
}



type IncrementalPayment {
	cents: UsdCents!
	recordedAt: Timestamp!
	txId: UUID!
}


type InterestAccrued {
	cents: UsdCents!
	recordedAt: Timestamp!
	txId: UUID!
}

type InterestIncome {
	usdBalance: UsdCents!
}

enum InterestInterval {
	END_OF_MONTH
}

enum KycLevel {
	ZERO
	ONE
	TWO
}

type Loan {
	id: ID!
	loanId: UUID!
	createdAt: Timestamp!
	approvedAt: Timestamp
	expiresAt: Timestamp
	loanTerms: TermValues!
	status: LoanStatus!
	collateral: Satoshis!
	principal: UsdCents!
	transactions: [LoanHistoryEntry!]!
	approvals: [LoanApproval!]!
	repaymentPlan: [LoanRepaymentInPlan!]!
	collateralizationState: LoanCollaterizationState!
	balance: LoanBalance!
	customer: Customer!
}

type LoanApproval {
	userId: UUID!
	approvedAt: Timestamp!
	user: User!
}

type LoanBalance {
	collateral: Collateral!
	outstanding: Outstanding!
	interestIncurred: InterestIncome!
}

enum LoanCollaterizationState {
	FULLY_COLLATERALIZED
	UNDER_MARGIN_CALL_THRESHOLD
	UNDER_LIQUIDATION_THRESHOLD
	NO_COLLATERAL
}

union LoanHistoryEntry = IncrementalPayment | InterestAccrued | CollateralUpdated | LoanOrigination | CollateralizationUpdated

type LoanOrigination {
	cents: UsdCents!
	recordedAt: Timestamp!
	txId: UUID!
}

type LoanRepaymentInPlan {
	repaymentType: LoanRepaymentType!
	status: LoanRepaymentStatus!
	initial: UsdCents!
	outstanding: UsdCents!
	accrualAt: Timestamp!
	dueAt: Timestamp!
}

enum LoanRepaymentStatus {
	UPCOMING
	DUE
	OVERDUE
	PAID
}

enum LoanRepaymentType {
	PRINCIPAL
	INTEREST
}

enum LoanStatus {
	NEW
	ACTIVE
	CLOSED
}

type Mutation {
	sumsubTokenCreate: SumsubTokenCreatePayload!
}

type Outstanding {
	usdBalance: UsdCents!
}

enum Period {
	MONTHS
}

type Query {
	loan(id: UUID!): Loan
	me: Customer
}

enum Role {
	SUPERUSER
	ADMIN
	BANK_MANAGER
	ACCOUNTANT
}

scalar Satoshis


union Subject = User | Customer | System

type SumsubTokenCreatePayload {
	token: String!
}

type System {
	name: String!
}

type TermValues {
	annualRate: AnnualRatePct!
	interval: InterestInterval!
	duration: Duration!
	liquidationCvl: CVLPct!
	marginCallCvl: CVLPct!
	initialCvl: CVLPct!
}

scalar Timestamp

scalar UUID

scalar UsdCents

type User {
	userId: UUID!
	email: String!
	roles: [Role!]!
	visibleNavigationItems: VisibleNavigationItems!
}

type VisibleNavigationItems {
	loan: Boolean!
	term: Boolean!
	user: Boolean!
	customer: Boolean!
	deposit: Boolean!
	withdraw: Boolean!
	audit: Boolean!
	financials: Boolean!
}

type Withdrawal {
	customerId: UUID!
	withdrawalId: UUID!
	amount: UsdCents!
	status: WithdrawalStatus!
	reference: String!
	createdAt: Timestamp!
	customer: Customer
}

enum WithdrawalStatus {
	INITIATED
	CANCELLED
	CONFIRMED
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
