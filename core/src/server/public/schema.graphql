enum AccountStatus {
	ACTIVE
	INACTIVE
}

scalar AnnualRatePct


scalar CVLPct

type Checking {
	settled: UsdBalance!
	pending: UsdBalance!
}

type Collateral {
	btcBalance: Satoshis!
}

type Customer {
	customerId: UUID!
	email: String!
	status: AccountStatus!
	level: KycLevel!
	applicantId: String
	balance: CustomerBalance!
	loans: [Loan!]!
}

type CustomerBalance {
	checking: Checking!
}

type Duration {
	period: Period!
	units: Int!
}




type InterestIncome {
	usdBalance: UsdCents!
}

enum InterestInterval {
	END_OF_MONTH
}

enum KycLevel {
	ZERO
	ONE
	TWO
}

type Loan {
	id: ID!
	loanId: UUID!
	startDate: Timestamp!
	loanTerms: TermValues!
	status: LoanStatus!
	balance: LoanBalance!
	customer: Customer!
}

type LoanBalance {
	collateral: Collateral!
	outstanding: LoanOutstanding!
	interestIncurred: InterestIncome!
}

type LoanOutstanding {
	usdBalance: UsdCents!
}

enum LoanStatus {
	NEW
	ACTIVE
	CLOSED
}

type Mutation {
	sumsubTokenCreate: SumsubTokenCreatePayload!
	sumsubPermalinkCreate: SumsubPermalinkCreatePayload!
}

enum Period {
	MONTHS
}

type Query {
	loan(id: UUID!): Loan
	me: Customer
}

scalar Satoshis


type SumsubPermalinkCreatePayload {
	url: String!
}

type SumsubTokenCreatePayload {
	token: String!
}

type TermValues {
	annualRate: AnnualRatePct!
	interval: InterestInterval!
	duration: Duration!
	liquidationCvl: CVLPct!
	marginCallCvl: CVLPct!
	initialCvl: CVLPct!
}

scalar Timestamp

scalar UUID

type UsdBalance {
	usdBalance: UsdCents!
}

scalar UsdCents

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
}
