type Account {
	id: UUID!
	name: String!
	amounts: AccountAmountsByCurrency!
}

type AccountAmountsByCurrency {
	btc: BtcAccountAmountsInPeriod!
	usd: UsdAccountAmountsInPeriod!
}

type AccountSet {
	id: UUID!
	name: String!
	amounts: AccountAmountsByCurrency!
}

type AccountSetAndSubAccounts {
	id: UUID!
	name: String!
	amounts: AccountAmountsByCurrency!
	subAccounts(first: Int!, after: String): AccountSetSubAccountConnection!
}

union AccountSetSubAccount = Account | AccountSet

type AccountSetSubAccountConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [AccountSetSubAccountEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [AccountSetSubAccount!]!
}

"""
An edge in a connection.
"""
type AccountSetSubAccountEdge {
	"""
	The item at the end of the edge
	"""
	node: AccountSetSubAccount!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

enum AccountStatus {
	INACTIVE
	ACTIVE
}

scalar AnnualRatePct

type ApprovalProcess {
	id: ID!
	approvalProcessId: UUID!
	approvalProcessType: ApprovalProcessType!
	status: ApprovalProcessStatus!
	createdAt: Timestamp!
	rules: ApprovalRules!
	deniedReason: String
	policy: Policy!
	subjectCanSubmitDecision: Boolean!
	voters: [ApprovalProcessVoter!]!
	target: ApprovalProcessTarget!
}

input ApprovalProcessApproveInput {
	processId: UUID!
}

type ApprovalProcessApprovePayload {
	approvalProcess: ApprovalProcess!
}

type ApprovalProcessConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [ApprovalProcessEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [ApprovalProcess!]!
}

input ApprovalProcessDenyInput {
	processId: UUID!
}

type ApprovalProcessDenyPayload {
	approvalProcess: ApprovalProcess!
}

"""
An edge in a connection.
"""
type ApprovalProcessEdge {
	"""
	The item at the end of the edge
	"""
	node: ApprovalProcess!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

enum ApprovalProcessStatus {
	APPROVED
	DENIED
	IN_PROGRESS
}

union ApprovalProcessTarget = Withdrawal | CreditFacility | CreditFacilityDisbursal

enum ApprovalProcessType {
	WITHDRAWAL_APPROVAL
	CREDIT_FACILITY_APPROVAL
	DISBURSAL_APPROVAL
}

type ApprovalProcessVoter {
	stillEligible: Boolean!
	didVote: Boolean!
	didApprove: Boolean!
	didDeny: Boolean!
	votedAt: Timestamp
	user: User!
}

union ApprovalRules = SystemApproval | CommitteeThreshold

type AuditEntry {
	id: ID!
	object: String!
	action: String!
	authorized: Boolean!
	recordedAt: Timestamp!
	subject: AuditSubject!
}

type AuditEntryConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [AuditEntryEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [AuditEntry!]!
}

"""
An edge in a connection.
"""
type AuditEntryEdge {
	"""
	The item at the end of the edge
	"""
	node: AuditEntry!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

union AuditSubject = User | System

type BalanceSheet {
	name: String!
	balance: AccountAmountsByCurrency!
	categories: [StatementCategory!]!
}


type BtcAccountAmounts {
	debit: Satoshis!
	credit: Satoshis!
	netDebit: SignedSatoshis!
	netCredit: SignedSatoshis!
}

type BtcAccountAmountsInPeriod {
	openingBalance: LayeredBtcAccountAmounts!
	closingBalance: LayeredBtcAccountAmounts!
	amount: LayeredBtcAccountAmounts!
}

scalar CVLPct

type CancelledWithdrawalEntry {
	recordedAt: Timestamp!
	withdrawal: Withdrawal!
}

type CashFlowStatement {
	name: String!
	total: AccountAmountsByCurrency!
	categories: [StatementCategory!]!
}

type ChartCategories {
	assets: ChartCategory!
	liabilities: ChartCategory!
	equity: ChartCategory!
	revenues: ChartCategory!
	expenses: ChartCategory!
}

type ChartCategory {
	name: String!
	accountCode: String!
	controlAccounts: [ChartControlAccount!]!
}

type ChartControlAccount {
	name: String!
	accountCode: String!
	controlSubAccounts: [ChartControlSubAccount!]!
}

type ChartControlSubAccount {
	name: String!
	accountCode: String!
}

type ChartNode {
	name: String!
	accountCode: String!
	children: [ChartNode!]!
}

type ChartOfAccounts {
	id: ID!
	name: String!
	categories: ChartCategories!
}

input ChartOfAccountsCreateInput {
	name: String!
	reference: String!
}

type ChartOfAccountsCreatePayload {
	chartOfAccounts: NewChartOfAccounts!
}

input ChartOfAccountsCsvImportInput {
	chartId: UUID!
	file: Upload!
}

type ChartOfAccountsCsvImportPayload {
	success: Boolean!
}

type Collateral {
	btcBalance: Satoshis!
}

enum CollateralAction {
	ADD
	REMOVE
}

enum CollateralizationState {
	FULLY_COLLATERALIZED
	UNDER_MARGIN_CALL_THRESHOLD
	UNDER_LIQUIDATION_THRESHOLD
	NO_COLLATERAL
}

type Committee {
	id: ID!
	committeeId: UUID!
	createdAt: Timestamp!
	name: String!
	currentMembers: [User!]!
}

input CommitteeAddUserInput {
	committeeId: UUID!
	userId: UUID!
}

type CommitteeAddUserPayload {
	committee: Committee!
}

type CommitteeConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CommitteeEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Committee!]!
}

input CommitteeCreateInput {
	name: String!
}

type CommitteeCreatePayload {
	committee: Committee!
}

"""
An edge in a connection.
"""
type CommitteeEdge {
	"""
	The item at the end of the edge
	"""
	node: Committee!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input CommitteeRemoveUserInput {
	committeeId: UUID!
	userId: UUID!
}

type CommitteeRemoveUserPayload {
	committee: Committee!
}

type CommitteeThreshold {
	threshold: Int!
	committee: Committee!
}

input CreditFacilitiesFilter {
	field: CreditFacilitiesFilterBy!
	status: CreditFacilityStatus
	collateralizationState: CollateralizationState
}

enum CreditFacilitiesFilterBy {
	STATUS
	COLLATERALIZATION_STATE
}

input CreditFacilitiesSort {
	by: CreditFacilitiesSortBy! = CREATED_AT
	direction: SortDirection! = ASC
}

enum CreditFacilitiesSortBy {
	CREATED_AT
	CVL
}

type CreditFacility {
	id: ID!
	creditFacilityId: UUID!
	approvalProcessId: UUID!
	activatedAt: Timestamp
	maturesAt: Timestamp
	createdAt: Timestamp!
	collateralizationState: CollateralizationState!
	facilityAmount: UsdCents!
	collateral: Satoshis!
	canBeCompleted: Boolean!
	creditFacilityTerms: TermValues!
	status: CreditFacilityStatus!
	currentCvl: FacilityCVL!
	transactions: [CreditFacilityHistoryEntry!]!
	repaymentPlan: [CreditFacilityRepaymentInPlan!]!
	disbursals: [CreditFacilityDisbursal!]!
	approvalProcess: ApprovalProcess!
	subjectCanUpdateCollateral: Boolean!
	subjectCanInitiateDisbursal: Boolean!
	subjectCanRecordPayment: Boolean!
	subjectCanComplete: Boolean!
	customer: Customer!
	balance: CreditFacilityBalance!
}

type CreditFacilityBalance {
	facilityRemaining: FacilityRemaining!
	disbursed: Disbursed!
	interest: Interest!
	outstanding: Outstanding!
	dueOutstanding: Outstanding!
	collateral: Collateral!
}

input CreditFacilityCollateralUpdateInput {
	creditFacilityId: UUID!
	collateral: Satoshis!
}

type CreditFacilityCollateralUpdatePayload {
	creditFacility: CreditFacility!
}

type CreditFacilityCollateralUpdated {
	satoshis: Satoshis!
	recordedAt: Timestamp!
	action: CollateralAction!
	txId: UUID!
}

type CreditFacilityCollateralizationUpdated {
	state: CollateralizationState!
	collateral: Satoshis!
	outstandingInterest: UsdCents!
	outstandingDisbursal: UsdCents!
	recordedAt: Timestamp!
	price: UsdCents!
}

input CreditFacilityCompleteInput {
	creditFacilityId: UUID!
}

type CreditFacilityCompletePayload {
	creditFacility: CreditFacility!
}

type CreditFacilityConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CreditFacilityEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [CreditFacility!]!
}

input CreditFacilityCreateInput {
	customerId: UUID!
	disbursalCreditAccountId: UUID!
	facility: UsdCents!
	terms: TermsInput!
}

type CreditFacilityCreatePayload {
	creditFacility: CreditFacility!
}

type CreditFacilityDisbursal {
	id: ID!
	disbursalId: UUID!
	index: DisbursalIdx!
	amount: UsdCents!
	createdAt: Timestamp!
	creditFacility: CreditFacility!
	status: DisbursalStatus!
	approvalProcess: ApprovalProcess!
}

type CreditFacilityDisbursalConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CreditFacilityDisbursalEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [CreditFacilityDisbursal!]!
}

"""
An edge in a connection.
"""
type CreditFacilityDisbursalEdge {
	"""
	The item at the end of the edge
	"""
	node: CreditFacilityDisbursal!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type CreditFacilityDisbursalExecuted {
	cents: UsdCents!
	recordedAt: Timestamp!
	txId: UUID!
}

input CreditFacilityDisbursalInitiateInput {
	creditFacilityId: UUID!
	amount: UsdCents!
}

type CreditFacilityDisbursalInitiatePayload {
	disbursal: CreditFacilityDisbursal!
}

"""
An edge in a connection.
"""
type CreditFacilityEdge {
	"""
	The item at the end of the edge
	"""
	node: CreditFacility!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

union CreditFacilityHistoryEntry = CreditFacilityIncrementalPayment | CreditFacilityCollateralUpdated | CreditFacilityOrigination | CreditFacilityCollateralizationUpdated | CreditFacilityDisbursalExecuted | CreditFacilityInterestAccrued

type CreditFacilityIncrementalPayment {
	cents: UsdCents!
	recordedAt: Timestamp!
	txId: UUID!
}

type CreditFacilityInterestAccrued {
	cents: UsdCents!
	recordedAt: Timestamp!
	txId: UUID!
	days: Int!
}

type CreditFacilityOrigination {
	cents: UsdCents!
	recordedAt: Timestamp!
	txId: UUID!
}

input CreditFacilityPartialPaymentInput {
	creditFacilityId: UUID!
	amount: UsdCents!
}

type CreditFacilityPartialPaymentPayload {
	creditFacility: CreditFacility!
}

type CreditFacilityPayment {
	id: ID!
	paymentId: UUID!
	interestAmount: UsdCents!
	disbursalAmount: UsdCents!
	createdAt: Timestamp!
	creditFacility: CreditFacility!
}

type CreditFacilityRepaymentInPlan {
	repaymentType: CreditFacilityRepaymentType!
	status: CreditFacilityRepaymentStatus!
	initial: UsdCents!
	outstanding: UsdCents!
	accrualAt: Timestamp!
	dueAt: Timestamp!
}

enum CreditFacilityRepaymentStatus {
	UPCOMING
	DUE
	OVERDUE
	PAID
}

enum CreditFacilityRepaymentType {
	DISBURSAL
	INTEREST
}

enum CreditFacilityStatus {
	PENDING_COLLATERALIZATION
	PENDING_APPROVAL
	ACTIVE
	MATURED
	CLOSED
}

type Customer {
	id: ID!
	customerId: UUID!
	status: AccountStatus!
	level: KycLevel!
	createdAt: Timestamp!
	email: String!
	telegramId: String!
	applicantId: String
	depositAccount: DepositAccount
	creditFacilities: [CreditFacility!]!
	documents: [Document!]!
	subjectCanCreateCreditFacility: Boolean!
}

type CustomerConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CustomerEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Customer!]!
}

input CustomerCreateInput {
	email: String!
	telegramId: String!
}

type CustomerCreatePayload {
	customer: Customer!
}

"""
An edge in a connection.
"""
type CustomerEdge {
	"""
	The item at the end of the edge
	"""
	node: Customer!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

input CustomerUpdateInput {
	customerId: UUID!
	telegramId: String!
}

type CustomerUpdatePayload {
	customer: Customer!
}

input CustomersFilter {
	field: CustomersFilterBy!
	status: AccountStatus
}

enum CustomersFilterBy {
	ACCOUNT_STATUS
}

input CustomersSort {
	by: CustomersSortBy! = EMAIL
	direction: SortDirection! = ASC
}

enum CustomersSortBy {
	CREATED_AT
	EMAIL
	TELEGRAM_ID
}

type Dashboard {
	activeFacilities: Int!
	pendingFacilities: Int!
	totalDisbursed: UsdCents!
	totalCollateral: Satoshis!
}

type Deposit {
	id: ID!
	depositId: UUID!
	accountId: UUID!
	amount: UsdCents!
	createdAt: Timestamp!
	reference: String!
	account: DepositAccount!
}

type DepositAccount {
	id: ID!
	depositAccountId: UUID!
	customerId: UUID!
	createdAt: Timestamp!
	deposits: [Deposit!]!
	withdrawals: [Withdrawal!]!
	history(first: Int!, after: String): DepositAccountHistoryEntryConnection!
	balance: DepositAccountBalance!
	customer: Customer!
}

type DepositAccountBalance {
	settled: UsdCents!
	pending: UsdCents!
}

union DepositAccountHistoryEntry = DepositEntry | WithdrawalEntry | CancelledWithdrawalEntry | DisbursalEntry | PaymentEntry | UnknownEntry

type DepositAccountHistoryEntryConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [DepositAccountHistoryEntryEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [DepositAccountHistoryEntry!]!
}

"""
An edge in a connection.
"""
type DepositAccountHistoryEntryEdge {
	"""
	The item at the end of the edge
	"""
	node: DepositAccountHistoryEntry!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type DepositConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [DepositEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Deposit!]!
}

"""
An edge in a connection.
"""
type DepositEdge {
	"""
	The item at the end of the edge
	"""
	node: Deposit!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type DepositEntry {
	recordedAt: Timestamp!
	deposit: Deposit!
}

input DepositRecordInput {
	depositAccountId: UUID!
	amount: UsdCents!
	reference: String
}

type DepositRecordPayload {
	deposit: Deposit!
}

type DisbursalEntry {
	recordedAt: Timestamp!
	disbursal: CreditFacilityDisbursal!
}

scalar DisbursalIdx

enum DisbursalStatus {
	NEW
	APPROVED
	DENIED
	CONFIRMED
}

type Disbursed {
	total: Total!
	outstanding: Outstanding!
	dueOutstanding: Outstanding!
}

type Document {
	id: ID!
	documentId: UUID!
	customerId: UUID!
	status: DocumentStatus!
	filename: String!
}

input DocumentArchiveInput {
	documentId: UUID!
}

type DocumentArchivePayload {
	document: Document!
}

input DocumentCreateInput {
	file: Upload!
	customerId: UUID!
}

type DocumentCreatePayload {
	document: Document!
}

input DocumentDeleteInput {
	documentId: UUID!
}

type DocumentDeletePayload {
	deletedDocumentId: UUID!
}

input DocumentDownloadLinksGenerateInput {
	documentId: UUID!
}

type DocumentDownloadLinksGeneratePayload {
	documentId: UUID!
	link: String!
}

enum DocumentStatus {
	ACTIVE
	ARCHIVED
}

type Duration {
	period: Period!
	units: Int!
}

input DurationInput {
	period: Period!
	units: Int!
}

type FacilityCVL {
	total: CVLPct!
	disbursed: CVLPct!
}

type FacilityRemaining {
	usdBalance: UsdCents!
}


type GovernanceNavigationItems {
	committee: Boolean!
	policy: Boolean!
	approvalProcess: Boolean!
}



type Interest {
	total: Total!
	outstanding: Outstanding!
	dueOutstanding: Outstanding!
}

enum InterestInterval {
	END_OF_MONTH
	END_OF_DAY
}

enum KycLevel {
	NOT_KYCED
	BASIC
	ADVANCED
}

type LayeredBtcAccountAmounts {
	all: BtcAccountAmounts!
	settled: BtcAccountAmounts!
	pending: BtcAccountAmounts!
	encumbrance: BtcAccountAmounts!
}

type LayeredUsdAccountAmounts {
	all: UsdAccountAmounts!
	settled: UsdAccountAmounts!
	pending: UsdAccountAmounts!
	encumbrance: UsdAccountAmounts!
}

type Mutation {
	customerDocumentAttach(input: DocumentCreateInput!): DocumentCreatePayload!
	sumsubPermalinkCreate(input: SumsubPermalinkCreateInput!): SumsubPermalinkCreatePayload!
	userCreate(input: UserCreateInput!): UserCreatePayload!
	userAssignRole(input: UserAssignRoleInput!): UserAssignRolePayload!
	userRevokeRole(input: UserRevokeRoleInput!): UserRevokeRolePayload!
	customerCreate(input: CustomerCreateInput!): CustomerCreatePayload!
	customerUpdate(input: CustomerUpdateInput!): CustomerUpdatePayload!
	depositRecord(input: DepositRecordInput!): DepositRecordPayload!
	withdrawalInitiate(input: WithdrawalInitiateInput!): WithdrawalInitiatePayload!
	withdrawalConfirm(input: WithdrawalConfirmInput!): WithdrawalConfirmPayload!
	withdrawalCancel(input: WithdrawalCancelInput!): WithdrawalCancelPayload!
	termsTemplateCreate(input: TermsTemplateCreateInput!): TermsTemplateCreatePayload!
	termsTemplateUpdate(input: TermsTemplateUpdateInput!): TermsTemplateUpdatePayload!
	creditFacilityCreate(input: CreditFacilityCreateInput!): CreditFacilityCreatePayload!
	creditFacilityCollateralUpdate(input: CreditFacilityCollateralUpdateInput!): CreditFacilityCollateralUpdatePayload!
	creditFacilityPartialPayment(input: CreditFacilityPartialPaymentInput!): CreditFacilityPartialPaymentPayload!
	creditFacilityDisbursalInitiate(input: CreditFacilityDisbursalInitiateInput!): CreditFacilityDisbursalInitiatePayload!
	creditFacilityComplete(input: CreditFacilityCompleteInput!): CreditFacilityCompletePayload!
	committeeCreate(input: CommitteeCreateInput!): CommitteeCreatePayload!
	committeeAddUser(input: CommitteeAddUserInput!): CommitteeAddUserPayload!
	committeeRemoveUser(input: CommitteeRemoveUserInput!): CommitteeRemoveUserPayload!
	policyAssignCommittee(input: PolicyAssignCommitteeInput!): PolicyAssignCommitteePayload!
	approvalProcessApprove(input: ApprovalProcessApproveInput!): ApprovalProcessApprovePayload!
	approvalProcessDeny(input: ApprovalProcessDenyInput!, reason: String!): ApprovalProcessDenyPayload!
	documentDownloadLinkGenerate(input: DocumentDownloadLinksGenerateInput!): DocumentDownloadLinksGeneratePayload!
	documentDelete(input: DocumentDeleteInput!): DocumentDeletePayload!
	documentArchive(input: DocumentArchiveInput!): DocumentArchivePayload!
	reportCreate: ReportCreatePayload!
	reportDownloadLinksGenerate(input: ReportDownloadLinksGenerateInput!): ReportDownloadLinksGeneratePayload!
	chartOfAccountsCreate(input: ChartOfAccountsCreateInput!): ChartOfAccountsCreatePayload!
	chartOfAccountsCsvImport(input: ChartOfAccountsCsvImportInput!): ChartOfAccountsCsvImportPayload!
	shareholderEquityAdd(input: ShareholderEquityAddInput!): SuccessPayload!
}

type NewChartOfAccounts {
	id: ID!
	chartId: UUID!
	name: String!
	children: [ChartNode!]!
}

scalar OneTimeFeeRatePct

type Outstanding {
	usdBalance: UsdCents!
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type PaymentEntry {
	recordedAt: Timestamp!
	payment: CreditFacilityPayment!
}

enum Period {
	MONTHS
}

type Policy {
	id: ID!
	policyId: UUID!
	approvalProcessType: ApprovalProcessType!
	rules: ApprovalRules!
}

input PolicyAssignCommitteeInput {
	policyId: UUID!
	committeeId: UUID!
	threshold: Int!
}

type PolicyAssignCommitteePayload {
	policy: Policy!
}

type PolicyConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [PolicyEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Policy!]!
}

"""
An edge in a connection.
"""
type PolicyEdge {
	"""
	The item at the end of the edge
	"""
	node: Policy!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type ProfitAndLossStatement {
	name: String!
	net: AccountAmountsByCurrency!
	categories: [StatementCategory!]!
}

type Query {
	me: Subject!
	dashboard: Dashboard!
	user(id: UUID!): User
	users: [User!]!
	customer(id: UUID!): Customer
	customerByEmail(email: String!): Customer
	customers(first: Int!, after: String, sort: CustomersSort = {by: EMAIL, direction: ASC}, filter: CustomersFilter): CustomerConnection!
	withdrawal(id: UUID!): Withdrawal
	withdrawals(first: Int!, after: String): WithdrawalConnection!
	deposit(id: UUID!): Deposit
	deposits(first: Int!, after: String): DepositConnection!
	termsTemplate(id: UUID!): TermsTemplate
	termsTemplates: [TermsTemplate!]!
	creditFacility(id: UUID!): CreditFacility
	creditFacilities(first: Int!, after: String, sort: CreditFacilitiesSort = {by: CREATED_AT, direction: ASC}, filter: CreditFacilitiesFilter): CreditFacilityConnection!
	disbursal(id: UUID!): CreditFacilityDisbursal
	disbursals(first: Int!, after: String): CreditFacilityDisbursalConnection!
	committee(id: UUID!): Committee
	committees(first: Int!, after: String): CommitteeConnection!
	policy(id: UUID!): Policy
	policies(first: Int!, after: String): PolicyConnection!
	approvalProcess(id: UUID!): ApprovalProcess
	approvalProcesses(first: Int!, after: String): ApprovalProcessConnection!
	document(id: UUID!): Document
	trialBalance(from: Timestamp!, until: Timestamp): TrialBalance!
	offBalanceSheetTrialBalance(from: Timestamp!, until: Timestamp): TrialBalance!
	chartOfAccounts: ChartOfAccounts!
	newChartOfAccounts(reference: String!): NewChartOfAccounts!
	offBalanceSheetChartOfAccounts: ChartOfAccounts!
	balanceSheet(from: Timestamp!, until: Timestamp): BalanceSheet!
	profitAndLossStatement(from: Timestamp!, until: Timestamp): ProfitAndLossStatement!
	cashFlowStatement(from: Timestamp!, until: Timestamp): CashFlowStatement!
	accountSet(accountSetId: UUID!, from: Timestamp!, until: Timestamp): AccountSetAndSubAccounts
	realtimePrice: RealtimePrice!
	report(id: UUID!): Report
	reports: [Report!]!
	audit(first: Int!, after: String): AuditEntryConnection!
}

type RealtimePrice {
	usdCentsPerBtc: UsdCents!
}

type Report {
	reportId: UUID!
	createdAt: Timestamp!
	lastError: String
	progress: ReportProgress!
}

type ReportCreatePayload {
	report: Report!
}

type ReportDownloadLink {
	reportName: String!
	url: String!
}

input ReportDownloadLinksGenerateInput {
	reportId: UUID!
}

type ReportDownloadLinksGeneratePayload {
	reportId: UUID!
	links: [ReportDownloadLink!]!
}

enum ReportProgress {
	RUNNING
	COMPLETE
}

enum Role {
	SUPERUSER
	ADMIN
	BANK_MANAGER
	ACCOUNTANT
}

scalar Satoshis

input ShareholderEquityAddInput {
	amount: UsdCents!
	reference: String!
}

scalar SignedSatoshis

scalar SignedUsdCents

enum SortDirection {
	ASC
	DESC
}

type StatementCategory {
	name: String!
	amounts: AccountAmountsByCurrency!
	accounts: [AccountSetSubAccount!]!
}


type Subject {
	user: User!
	visibleNavigationItems: VisibleNavigationItems!
	subjectCanCreateCustomer: Boolean!
	subjectCanCreateUser: Boolean!
	subjectCanCreateTermsTemplate: Boolean!
}

type SuccessPayload {
	success: Boolean!
}

input SumsubPermalinkCreateInput {
	customerId: UUID!
}

type SumsubPermalinkCreatePayload {
	url: String!
}

type System {
	name: String!
}

type SystemApproval {
	autoApprove: Boolean!
}

type TermValues {
	annualRate: AnnualRatePct!
	accrualInterval: InterestInterval!
	incurrenceInterval: InterestInterval!
	oneTimeFeeRate: OneTimeFeeRatePct!
	duration: Duration!
	liquidationCvl: CVLPct!
	marginCallCvl: CVLPct!
	initialCvl: CVLPct!
}

input TermsInput {
	annualRate: AnnualRatePct!
	accrualInterval: InterestInterval!
	incurrenceInterval: InterestInterval!
	liquidationCvl: CVLPct!
	oneTimeFeeRate: OneTimeFeeRatePct!
	duration: DurationInput!
	marginCallCvl: CVLPct!
	initialCvl: CVLPct!
}

type TermsTemplate {
	id: ID!
	termsId: UUID!
	values: TermValues!
	createdAt: Timestamp!
	name: String!
	subjectCanUpdateTermsTemplate: Boolean!
}

input TermsTemplateCreateInput {
	name: String!
	annualRate: AnnualRatePct!
	accrualInterval: InterestInterval!
	incurrenceInterval: InterestInterval!
	oneTimeFeeRate: OneTimeFeeRatePct!
	duration: DurationInput!
	liquidationCvl: CVLPct!
	marginCallCvl: CVLPct!
	initialCvl: CVLPct!
}

type TermsTemplateCreatePayload {
	termsTemplate: TermsTemplate!
}

input TermsTemplateUpdateInput {
	id: UUID!
	annualRate: AnnualRatePct!
	accrualInterval: InterestInterval!
	incurrenceInterval: InterestInterval!
	oneTimeFeeRate: OneTimeFeeRatePct!
	liquidationCvl: CVLPct!
	duration: DurationInput!
	marginCallCvl: CVLPct!
	initialCvl: CVLPct!
}

type TermsTemplateUpdatePayload {
	termsTemplate: TermsTemplate!
}

scalar Timestamp

type Total {
	usdBalance: UsdCents!
}

type TrialBalance {
	name: String!
	total: AccountAmountsByCurrency!
	subAccounts: [AccountSetSubAccount!]!
}

scalar UUID

type UnknownEntry {
	txId: UUID!
	recordedAt: Timestamp!
}

scalar Upload

type UsdAccountAmounts {
	debit: UsdCents!
	credit: UsdCents!
	netDebit: SignedUsdCents!
	netCredit: SignedUsdCents!
}

type UsdAccountAmountsInPeriod {
	openingBalance: LayeredUsdAccountAmounts!
	closingBalance: LayeredUsdAccountAmounts!
	amount: LayeredUsdAccountAmounts!
}

scalar UsdCents

type User {
	id: ID!
	userId: UUID!
	createdAt: Timestamp!
	roles: [Role!]!
	email: String!
	subjectCanAssignRoleToUser: Boolean!
	subjectCanRevokeRoleFromUser: Boolean!
}

input UserAssignRoleInput {
	id: UUID!
	role: Role!
}

type UserAssignRolePayload {
	user: User!
}

input UserCreateInput {
	email: String!
}

type UserCreatePayload {
	user: User!
}

input UserRevokeRoleInput {
	id: UUID!
	role: Role!
}

type UserRevokeRolePayload {
	user: User!
}

type VisibleNavigationItems {
	term: Boolean!
	user: Boolean!
	customer: Boolean!
	deposit: Boolean!
	withdraw: Boolean!
	audit: Boolean!
	financials: Boolean!
	governance: GovernanceNavigationItems!
	creditFacilities: Boolean!
}

type Withdrawal {
	id: ID!
	withdrawalId: UUID!
	accountId: UUID!
	approvalProcessId: UUID!
	amount: UsdCents!
	createdAt: Timestamp!
	reference: String!
	status: WithdrawalStatus!
	approvalProcess: ApprovalProcess!
	account: DepositAccount!
}

input WithdrawalCancelInput {
	withdrawalId: UUID!
}

type WithdrawalCancelPayload {
	withdrawal: Withdrawal!
}

input WithdrawalConfirmInput {
	withdrawalId: UUID!
}

type WithdrawalConfirmPayload {
	withdrawal: Withdrawal!
}

type WithdrawalConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [WithdrawalEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Withdrawal!]!
}

"""
An edge in a connection.
"""
type WithdrawalEdge {
	"""
	The item at the end of the edge
	"""
	node: Withdrawal!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}

type WithdrawalEntry {
	recordedAt: Timestamp!
	withdrawal: Withdrawal!
}

input WithdrawalInitiateInput {
	depositAccountId: UUID!
	amount: UsdCents!
	reference: String
}

type WithdrawalInitiatePayload {
	withdrawal: Withdrawal!
}

enum WithdrawalStatus {
	PENDING_APPROVAL
	PENDING_CONFIRMATION
	CONFIRMED
	DENIED
	CANCELLED
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @specifiedBy(url: String!) on SCALAR
schema {
	query: Query
	mutation: Mutation
}
