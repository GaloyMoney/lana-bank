-- Auto-generated trigger function for {{entity_name}}
CREATE OR REPLACE FUNCTION {{rollup_table_name}}_trigger()
RETURNS TRIGGER AS $$
DECLARE
  event_type TEXT;
  current_row {{rollup_table_name}}%ROWTYPE;
BEGIN
  event_type := NEW.event_type;

  -- Load the current rollup state
  SELECT * INTO current_row
  FROM {{rollup_table_name}}
  WHERE id = NEW.id;

  -- Early return if event is older than current state
  IF current_row.id IS NOT NULL AND NEW.sequence <= current_row.last_sequence THEN
    RETURN NEW;
  END IF;

  -- Validate event type is known
  IF event_type NOT IN ({{#each event_types}}'{{this.name}}'{{#unless @last}}, {{/unless}}{{/each}}) THEN
    RAISE EXCEPTION 'Unknown event type: %', event_type;
  END IF;

  INSERT INTO {{rollup_table_name}} (
    id,
    last_sequence,
    created_at,
    modified_at{{#each fields}},
    {{this.name}}{{/each}}
  )
  VALUES (
    NEW.id,
    NEW.sequence,
    NEW.recorded_at,
    NEW.recorded_at{{#each fields}},
    {{>field-init}}{{/each}}
  )
  ON CONFLICT (id) DO UPDATE SET
    last_sequence = NEW.sequence,
    modified_at = NEW.recorded_at,
    ({{#each fields}}{{this.name}}{{#unless @last}}, {{/unless}}{{/each}}) =
    CASE event_type{{#each event_updates}}
      WHEN '{{this.name}}' THEN
        (
          {{#each this.field_updates}}{{>field-update}}{{#unless @last}},{{/unless}}
          {{/each}}
        ){{/each}}
    END;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;