config {
	type: "operations",
	hasOutput: true,
}

CREATE OR REPLACE TABLE FUNCTION ${self()} (asof TIMESTAMP) AS (

WITH approved AS (

	SELECT DISTINCT id AS loan_id

	FROM ${ref({
		name: "loan_events",
		schema: envs.currentImportSchema
	})}

	WHERE recorded_at < asof
		AND event_type = "approved"

), initial AS (

	SELECT DISTINCT id AS loan_id
		, CAST(JSON_VALUE(event, "$.principal") AS NUMERIC) AS principal
		, recorded_at AS start_timestamp
		, CASE
			WHEN JSON_VALUE(event, "$.terms.duration.type") = "months"
			THEN TIMESTAMP_ADD(
				DATE(recorded_at),
				INTERVAL CAST(JSON_VALUE(event, "$.terms.duration.value") AS INTEGER) MONTH
			)
		END AS end_date
		, CAST(JSON_VALUE(event, "$.terms.annual_rate") AS NUMERIC) AS annual_rate
		, JSON_VALUE(event, "$.terms.incurrence_interval.type") AS incurrence_interval
		, JSON_VALUE(event, "$.terms.accrual_interval.type") AS accrual_interval
		, JSON_VALUE(event, "$.customer_id") AS customer_id

	FROM ${ref({
		name: "loan_events",
		schema: envs.currentImportSchema
	})}

	WHERE recorded_at < asof
		AND event_type = "initialized"

), payments AS (

	SELECT id AS loan_id
		, SUM(CAST(JSON_VALUE(event, "$.interest_amount") AS NUMERIC)) AS total_interest_paid
		, SUM(CAST(JSON_VALUE(event, "$.principal_amount") AS NUMERIC)) AS total_principal_paid
		, MAX(IF(COALESCE(CAST(JSON_VALUE(event, "$.interest_amount") AS NUMERIC), 0) > 0, recorded_at, NULL)) AS most_recent_interest_payment_timestamp
		, MAX(IF(COALESCE(CAST(JSON_VALUE(event, "$.principal_amount") AS NUMERIC), 0) > 0, recorded_at, NULL)) AS most_recent_principal_payment_timestamp

	FROM ${ref({
		name: "loan_events",
		schema: envs.currentImportSchema
	})}

	WHERE recorded_at < asof
		AND event_type = "payment_recorded"

	GROUP BY loan_id

), interest AS (

	SELECT id AS loan_id
		, SUM(CAST(JSON_VALUE(event, "$.amount") AS NUMERIC)) AS total_interest_incurred

	FROM ${ref({
		name: "loan_events",
		schema: envs.currentImportSchema
	})}

	WHERE recorded_at < asof
		AND event_type = "interest_incurred"

	GROUP BY loan_id

), collateral AS (

	SELECT id AS loan_id
		, CAST(
			JSON_VALUE(
				ANY_VALUE(event HAVING MAX recorded_at),
				"$.total_collateral"
			)
		AS NUMERIC) AS total_collateral

	FROM ${ref({
		name: "loan_events",
		schema: envs.currentImportSchema
	})}

	WHERE recorded_at < asof
		AND event_type = "collateral_updated"

	GROUP BY loan_id

), collateral_deposits AS (

	SELECT id AS loan_id
		, PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E6SZ',
			JSON_VALUE(
				ANY_VALUE(event HAVING MAX recorded_at),
				"$.recorded_at"
			),
			"UTC"
		) AS most_recent_collateral_deposit

	FROM ${ref({
		name: "loan_events",
		schema: envs.currentImportSchema
	})}

	WHERE recorded_at < asof
		AND event_type = "collateral_updated"
		AND JSON_VALUE(event, "$.action") = "Add"

	GROUP BY loan_id

)

SELECT loan_id
	, start_timestamp
	, end_date
	, incurrence_interval
	, accrual_interval
	, most_recent_interest_payment_timestamp
	, most_recent_principal_payment_timestamp
	, annual_rate
	, COALESCE(principal, 0) AS principal
	, COALESCE(total_interest_paid, 0) AS total_interest_paid
	, COALESCE(total_principal_paid, 0) AS total_principal_paid
	, COALESCE(total_interest_incurred, 0) AS total_interest_incurred
	, COALESCE(total_collateral, 0) AS total_collateral
	, customer_id
	, most_recent_collateral_deposit

FROM approved
	JOIN initial USING (loan_id)
	LEFT JOIN payments USING (loan_id)
	LEFT JOIN interest USING (loan_id)
	LEFT JOIN collateral USING (loan_id)
	LEFT JOIN collateral_deposits USING (loan_id)
);
