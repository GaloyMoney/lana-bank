config {
	type: "table",
}

WITH projected_payment_months AS (

	SELECT loan_id, principal, duration_value, completed,
		GENERATE_DATE_ARRAY(DATE(start_timestamp), DATE(end_date), INTERVAL 1 MONTH) AS months

	FROM ${ref("stg_approved_loans")}(CURRENT_TIMESTAMP())

), projected_payments AS (

	SELECT loan_id,  completed, principal,
		o+1 AS payment_number,
		LAST_DAY(projected_month) AS projected_date,
		principal / duration_value AS principal_due,

	FROM projected_payment_months,
		UNNEST(months) AS projected_month
			WITH OFFSET o

), payments AS (

	SELECT id AS loan_id
		, ROW_NUMBER() OVER (PARTITION BY id ORDER BY sequence) AS payment_number
		, recorded_at
		, CAST(JSON_VALUE(event, "$.interest_amount") AS NUMERIC) AS interest_paid
		, CAST(JSON_VALUE(event, "$.principal_amount") AS NUMERIC) AS principal_paid

	FROM ${ref({
		name: "loan_events",
		schema: envs.currentImportSchema
	})}

	WHERE event_type = "payment_recorded"

), joined AS (

	SELECT loan_id, payment_number,
		projected_date, recorded_at,
		principal_due, principal_paid,
		interest_paid,
		principal - COALESCE(SUM(principal_paid) OVER (
			PARTITION BY loan_id
			ORDER BY payment_number
			ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
		), 0) AS principal_remaining,
		payment_number - MAX(payment_number) OVER (
			PARTITION BY loan_id
		) AS payments_remaining,

	FROM projected_payments
	FULL JOIN payments USING (loan_id, payment_number)

	WHERE recorded_at IS NOT NULL
		OR NOT completed

)

SELECT loan_id, payment_number,
	projected_date, recorded_at,
	principal_due, principal_paid,
	principal_remaining / GREATEST(1, payments_remaining) AS projected_principal_amount,
	interest_paid,

FROM joined

ORDER BY loan_id, payment_number
