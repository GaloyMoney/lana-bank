config {
	type: "table",
	assertions: {
		uniqueKey: ["set_id", "member_id"],
		rowConditions: ["member_type IN ('Account', 'AccountSet')"]
	},
}

WITH RECURSIVE account_set_members AS (

	SELECT DISTINCT
		JSON_VALUE(values, "$.account_set_id") AS set_id,
		JSON_VALUE(values, "$.member.id") AS member_id,
		JSON_VALUE(values, "$.member.type") AS member_type,

	FROM ${ref({
		name: "account_set_members",
		schema: envs.currentImportSchema
	})}

), account_set_members_expanded AS (

	SELECT set_id, member_id, member_type,
		[set_id] AS set_hierarchy,
	FROM account_set_members

	UNION ALL

	SELECT l.set_id, r.member_id, r.member_type,
		ARRAY_CONCAT(l.set_hierarchy, [r.set_id]) AS set_hierarchy,
	FROM account_set_members_expanded l
		LEFT JOIN	account_set_members r
			ON l.member_id = r.set_id
	WHERE l.member_type = 'AccountSet'

)

SELECT set_id, member_id, member_type,
	ANY_VALUE(set_hierarchy HAVING MAX ARRAY_LENGTH(set_hierarchy)) AS set_hierarchy,

FROM account_set_members_expanded

WHERE member_id IS NOT NULL

GROUP BY set_id, member_id, member_type
