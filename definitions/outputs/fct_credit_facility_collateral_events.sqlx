config {
    type: "table",
    description: "Each row represents a unique 'combo-event'/fact? of the collateralization [collateral_updated -> collateralization_changed] of the credit facility.",
    assertions: {
        uniqueKey: ["event_key"],
        nonNull: [
            "recorded_at_date_key",
            "recorded_at",
            "event_type_key",
            "recorded_in_ledger_at_date_key",
            "recorded_in_ledger_at",
            "action_key",
            "collateralization_changed_event_recorded_at_date_key",
            "collateralization_changed_state_key",
            "abs_diff",
            "total_collateral",
        ],
    },
    tags: ["current-dev"]
}

WITH collateral_updated AS (

    SELECT
          event_key
        , CAST(FORMAT_DATE('%Y%m%d', recorded_at) as INT64) AS recorded_at_date_key
        , recorded_at
        , event_type_key
        , CAST(FORMAT_DATE('%Y%m%d', PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*SZ', JSON_VALUE(event, "$.recorded_in_ledger_at"), "UTC")) as INT64) AS recorded_in_ledger_at_date_key
        , PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*SZ', JSON_VALUE(event, "$.recorded_in_ledger_at"), "UTC") AS recorded_in_ledger_at
        , action_key
        , CAST(JSON_VALUE(event, "$.abs_diff") AS NUMERIC) AS abs_diff
        , CAST(JSON_VALUE(event, "$.total_collateral") AS NUMERIC) AS total_collateral
    FROM ${ref({name: "credit_facility_events", schema: envs.currentImportSchema})} AS cfe
    LEFT JOIN ${ref("dim_credit_facility_events_id")} AS t0 ON t0.event_id = cfe.id
    LEFT JOIN ${ref("dim_credit_facility_events_type")} AS t1 ON t1.event_type = cfe.event_type
    LEFT JOIN ${ref("dim_credit_facility_events_collateral_action")} AS t3 ON t3.action = JSON_VALUE(event, "$.action")
    WHERE cfe.event_type = "collateral_updated"
    AND JSON_VALUE(event, "$.tx_id") IS NOT NULL

), collateralization_changed AS (

    SELECT
          event_key
        , CAST(FORMAT_DATE('%Y%m%d', recorded_at) as INT64) AS recorded_at_date_key
        , recorded_at
        , CAST(FORMAT_DATE('%Y%m%d', PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*SZ', JSON_VALUE(event, "$.recorded_at"), "UTC")) as INT64) AS event_recorded_at_date_key
        , PARSE_TIMESTAMP('%Y-%m-%dT%H:%M:%E*SZ', JSON_VALUE(event, "$.recorded_at"), "UTC") AS event_recorded_at
        , state_key
        , CAST(JSON_VALUE(event, "$.collateral") AS NUMERIC) AS collateral
        , CAST(JSON_VALUE(event, "$.price") AS NUMERIC) AS price
        , CAST(JSON_VALUE(event, "$.outstanding.disbursed") AS NUMERIC) AS outstanding_disbursed
        , CAST(JSON_VALUE(event, "$.outstanding.interest") AS NUMERIC) AS outstanding_interest
    FROM ${ref({name: "credit_facility_events", schema: envs.currentImportSchema})} cfe
    LEFT JOIN ${ref("dim_credit_facility_events_id")} AS t0 ON t0.event_id = cfe.id
    LEFT JOIN ${ref("dim_credit_facility_events_collateral_state")} AS t3 ON t3.state = JSON_VALUE(event, "$.state")
    WHERE cfe.event_type = "collateralization_changed"

)


SELECT
      cu.* EXCEPT (abs_diff, total_collateral)

    , COALESCE(cc.event_recorded_at_date_key, 19000101) AS collateralization_changed_event_recorded_at_date_key
    , cc.event_recorded_at AS collateralization_changed_event_recorded_at
    , COALESCE(cc.state_key) AS collateralization_changed_state_key

    , cu.abs_diff
    , cu.total_collateral

    , COALESCE(cc.collateral, 0) AS collateral
    , cc.price
    , COALESCE(cc.outstanding_disbursed, 0) AS outstanding_disbursed
    , COALESCE(cc.outstanding_interest, 0) AS outstanding_interest
FROM collateral_updated AS cu
LEFT JOIN collateralization_changed cc ON cc.event_key = cu.event_key
