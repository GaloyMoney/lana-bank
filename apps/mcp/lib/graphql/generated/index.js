// this file is autogenerated by codegen
/* eslint-disable */
import { createRequire } from "module";
const require = createRequire(import.meta.url);
const apolloClient = require("@apollo/client");
export const gql = apolloClient.gql;
const Apollo = apolloClient;
const defaultOptions = {};
export var AccountStatus;
(function (AccountStatus) {
    AccountStatus["Active"] = "ACTIVE";
    AccountStatus["Inactive"] = "INACTIVE";
})(AccountStatus || (AccountStatus = {}));
export var ApprovalProcessStatus;
(function (ApprovalProcessStatus) {
    ApprovalProcessStatus["Approved"] = "APPROVED";
    ApprovalProcessStatus["Denied"] = "DENIED";
    ApprovalProcessStatus["InProgress"] = "IN_PROGRESS";
})(ApprovalProcessStatus || (ApprovalProcessStatus = {}));
export var ApprovalProcessType;
(function (ApprovalProcessType) {
    ApprovalProcessType["CreditFacilityApproval"] = "CREDIT_FACILITY_APPROVAL";
    ApprovalProcessType["DisbursalApproval"] = "DISBURSAL_APPROVAL";
    ApprovalProcessType["WithdrawalApproval"] = "WITHDRAWAL_APPROVAL";
})(ApprovalProcessType || (ApprovalProcessType = {}));
export var CollateralAction;
(function (CollateralAction) {
    CollateralAction["Add"] = "ADD";
    CollateralAction["Remove"] = "REMOVE";
})(CollateralAction || (CollateralAction = {}));
export var CollateralizationState;
(function (CollateralizationState) {
    CollateralizationState["FullyCollateralized"] = "FULLY_COLLATERALIZED";
    CollateralizationState["NoCollateral"] = "NO_COLLATERAL";
    CollateralizationState["UnderLiquidationThreshold"] = "UNDER_LIQUIDATION_THRESHOLD";
    CollateralizationState["UnderMarginCallThreshold"] = "UNDER_MARGIN_CALL_THRESHOLD";
})(CollateralizationState || (CollateralizationState = {}));
export var CreditFacilitiesFilterBy;
(function (CreditFacilitiesFilterBy) {
    CreditFacilitiesFilterBy["CollateralizationState"] = "COLLATERALIZATION_STATE";
    CreditFacilitiesFilterBy["Status"] = "STATUS";
})(CreditFacilitiesFilterBy || (CreditFacilitiesFilterBy = {}));
export var CreditFacilitiesSortBy;
(function (CreditFacilitiesSortBy) {
    CreditFacilitiesSortBy["CreatedAt"] = "CREATED_AT";
    CreditFacilitiesSortBy["Cvl"] = "CVL";
})(CreditFacilitiesSortBy || (CreditFacilitiesSortBy = {}));
export var CreditFacilityRepaymentStatus;
(function (CreditFacilityRepaymentStatus) {
    CreditFacilityRepaymentStatus["Due"] = "DUE";
    CreditFacilityRepaymentStatus["Overdue"] = "OVERDUE";
    CreditFacilityRepaymentStatus["Paid"] = "PAID";
    CreditFacilityRepaymentStatus["Upcoming"] = "UPCOMING";
})(CreditFacilityRepaymentStatus || (CreditFacilityRepaymentStatus = {}));
export var CreditFacilityRepaymentType;
(function (CreditFacilityRepaymentType) {
    CreditFacilityRepaymentType["Disbursal"] = "DISBURSAL";
    CreditFacilityRepaymentType["Interest"] = "INTEREST";
})(CreditFacilityRepaymentType || (CreditFacilityRepaymentType = {}));
export var CreditFacilityStatus;
(function (CreditFacilityStatus) {
    CreditFacilityStatus["Active"] = "ACTIVE";
    CreditFacilityStatus["Closed"] = "CLOSED";
    CreditFacilityStatus["Matured"] = "MATURED";
    CreditFacilityStatus["PendingApproval"] = "PENDING_APPROVAL";
    CreditFacilityStatus["PendingCollateralization"] = "PENDING_COLLATERALIZATION";
})(CreditFacilityStatus || (CreditFacilityStatus = {}));
export var CustomerType;
(function (CustomerType) {
    CustomerType["Company"] = "COMPANY";
    CustomerType["Individual"] = "INDIVIDUAL";
})(CustomerType || (CustomerType = {}));
export var CustomersFilterBy;
(function (CustomersFilterBy) {
    CustomersFilterBy["AccountStatus"] = "ACCOUNT_STATUS";
})(CustomersFilterBy || (CustomersFilterBy = {}));
export var CustomersSortBy;
(function (CustomersSortBy) {
    CustomersSortBy["CreatedAt"] = "CREATED_AT";
    CustomersSortBy["Email"] = "EMAIL";
    CustomersSortBy["TelegramId"] = "TELEGRAM_ID";
})(CustomersSortBy || (CustomersSortBy = {}));
export var DisbursalStatus;
(function (DisbursalStatus) {
    DisbursalStatus["Approved"] = "APPROVED";
    DisbursalStatus["Confirmed"] = "CONFIRMED";
    DisbursalStatus["Denied"] = "DENIED";
    DisbursalStatus["New"] = "NEW";
})(DisbursalStatus || (DisbursalStatus = {}));
export var DocumentStatus;
(function (DocumentStatus) {
    DocumentStatus["Active"] = "ACTIVE";
    DocumentStatus["Archived"] = "ARCHIVED";
})(DocumentStatus || (DocumentStatus = {}));
export var InterestInterval;
(function (InterestInterval) {
    InterestInterval["EndOfDay"] = "END_OF_DAY";
    InterestInterval["EndOfMonth"] = "END_OF_MONTH";
})(InterestInterval || (InterestInterval = {}));
export var KycLevel;
(function (KycLevel) {
    KycLevel["Advanced"] = "ADVANCED";
    KycLevel["Basic"] = "BASIC";
    KycLevel["NotKyced"] = "NOT_KYCED";
})(KycLevel || (KycLevel = {}));
export var Period;
(function (Period) {
    Period["Months"] = "MONTHS";
})(Period || (Period = {}));
export var ReportProgress;
(function (ReportProgress) {
    ReportProgress["Complete"] = "COMPLETE";
    ReportProgress["Running"] = "RUNNING";
})(ReportProgress || (ReportProgress = {}));
export var Role;
(function (Role) {
    Role["Accountant"] = "ACCOUNTANT";
    Role["Admin"] = "ADMIN";
    Role["BankManager"] = "BANK_MANAGER";
    Role["Superuser"] = "SUPERUSER";
})(Role || (Role = {}));
export var SortDirection;
(function (SortDirection) {
    SortDirection["Asc"] = "ASC";
    SortDirection["Desc"] = "DESC";
})(SortDirection || (SortDirection = {}));
export var WithdrawalStatus;
(function (WithdrawalStatus) {
    WithdrawalStatus["Cancelled"] = "CANCELLED";
    WithdrawalStatus["Confirmed"] = "CONFIRMED";
    WithdrawalStatus["Denied"] = "DENIED";
    WithdrawalStatus["PendingApproval"] = "PENDING_APPROVAL";
    WithdrawalStatus["PendingConfirmation"] = "PENDING_CONFIRMATION";
})(WithdrawalStatus || (WithdrawalStatus = {}));
export const ExampleQueryDocument = gql `
  query ExampleQuery {
    __typename
  }
`;
/**
 * __useExampleQueryQuery__
 *
 * To run a query within a React component, call `useExampleQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useExampleQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useExampleQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function useExampleQueryQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery(ExampleQueryDocument, options);
}
export function useExampleQueryLazyQuery(baseOptions) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery(ExampleQueryDocument, options);
}
export function useExampleQuerySuspenseQuery(baseOptions) {
    const options = baseOptions === Apollo.skipToken
        ? baseOptions
        : { ...defaultOptions, ...baseOptions };
    return Apollo.useSuspenseQuery(ExampleQueryDocument, options);
}
