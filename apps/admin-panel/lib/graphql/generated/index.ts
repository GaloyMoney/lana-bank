// this file is autogenerated by codegen
/* eslint-disable */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  AnnualRate: { input: any; output: any; }
  CVLPct: { input: any; output: any; }
  Satoshis: { input: any; output: any; }
  SignedSatoshis: { input: any; output: any; }
  SignedUsdCents: { input: any; output: any; }
  Timestamp: { input: any; output: any; }
  UUID: { input: string; output: string; }
  UsdCents: { input: any; output: any; }
};

export type AccountBalancesByCurrency = {
  __typename?: 'AccountBalancesByCurrency';
  btc: LayeredBtcAccountBalances;
  usd: LayeredUsdAccountBalances;
  usdt: LayeredUsdAccountBalances;
};

export type AccountDetails = {
  __typename?: 'AccountDetails';
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
};

export type AccountSetAndSubAccounts = {
  __typename?: 'AccountSetAndSubAccounts';
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
  subAccounts: AccountSetSubAccountConnection;
};


export type AccountSetAndSubAccountsSubAccountsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};

export type AccountSetAndSubAccountsWithBalance = {
  __typename?: 'AccountSetAndSubAccountsWithBalance';
  balance: AccountBalancesByCurrency;
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
  subAccounts: AccountSetSubAccountWithBalanceConnection;
};


export type AccountSetAndSubAccountsWithBalanceSubAccountsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};

export type AccountSetDetails = {
  __typename?: 'AccountSetDetails';
  hasSubAccounts: Scalars['Boolean']['output'];
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
};

export type AccountSetSubAccount = AccountDetails | AccountSetDetails;

export type AccountSetSubAccountConnection = {
  __typename?: 'AccountSetSubAccountConnection';
  /** A list of edges. */
  edges: Array<AccountSetSubAccountEdge>;
  /** A list of nodes. */
  nodes: Array<AccountSetSubAccount>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type AccountSetSubAccountEdge = {
  __typename?: 'AccountSetSubAccountEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: AccountSetSubAccount;
};

export type AccountSetSubAccountWithBalance = AccountSetWithBalance | AccountWithBalance;

export type AccountSetSubAccountWithBalanceConnection = {
  __typename?: 'AccountSetSubAccountWithBalanceConnection';
  /** A list of edges. */
  edges: Array<AccountSetSubAccountWithBalanceEdge>;
  /** A list of nodes. */
  nodes: Array<AccountSetSubAccountWithBalance>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type AccountSetSubAccountWithBalanceEdge = {
  __typename?: 'AccountSetSubAccountWithBalanceEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: AccountSetSubAccountWithBalance;
};

export type AccountSetWithBalance = {
  __typename?: 'AccountSetWithBalance';
  balance: AccountBalancesByCurrency;
  hasSubAccounts: Scalars['Boolean']['output'];
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
};

export enum AccountStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE'
}

export type AccountWithBalance = {
  __typename?: 'AccountWithBalance';
  balance: AccountBalancesByCurrency;
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
};

export type BalanceSheet = {
  __typename?: 'BalanceSheet';
  balance: AccountBalancesByCurrency;
  categories: Array<StatementCategory>;
  name: Scalars['String']['output'];
};

export type BtcAccountBalance = {
  __typename?: 'BtcAccountBalance';
  credit: Scalars['Satoshis']['output'];
  debit: Scalars['Satoshis']['output'];
  netCredit: Scalars['SignedSatoshis']['output'];
  netDebit: Scalars['SignedSatoshis']['output'];
};

export type BtcBalance = {
  __typename?: 'BtcBalance';
  btcBalance: Scalars['Satoshis']['output'];
};

export type ChartOfAccounts = {
  __typename?: 'ChartOfAccounts';
  categories: Array<ChartOfAccountsCategory>;
  name: Scalars['String']['output'];
};

export type ChartOfAccountsCategory = {
  __typename?: 'ChartOfAccountsCategory';
  accounts: Array<AccountSetSubAccount>;
  name: Scalars['String']['output'];
};

export type Checking = {
  __typename?: 'Checking';
  pending: UsdBalance;
  settled: UsdBalance;
};

export type Collateral = {
  __typename?: 'Collateral';
  btcBalance: Scalars['Satoshis']['output'];
};

export type Customer = {
  __typename?: 'Customer';
  applicantId?: Maybe<Scalars['String']['output']>;
  balance: UserBalance;
  btcDepositAddress: Scalars['String']['output'];
  customerId: Scalars['UUID']['output'];
  email: Scalars['String']['output'];
  level: KycLevel;
  loans: Array<Loan>;
  status: AccountStatus;
  ustDepositAddress: Scalars['String']['output'];
};

export type CustomerConnection = {
  __typename?: 'CustomerConnection';
  /** A list of edges. */
  edges: Array<CustomerEdge>;
  /** A list of nodes. */
  nodes: Array<Customer>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type CustomerEdge = {
  __typename?: 'CustomerEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Customer;
};

export type DefaultTermsUpdateInput = {
  annualRate: Scalars['AnnualRate']['input'];
  duration: DurationInput;
  initialCvl: Scalars['CVLPct']['input'];
  interval: InterestInterval;
  liquidationCvl: Scalars['CVLPct']['input'];
  marginCallCvl: Scalars['CVLPct']['input'];
};

export type DefaultTermsUpdatePayload = {
  __typename?: 'DefaultTermsUpdatePayload';
  terms: Terms;
};

export type Duration = {
  __typename?: 'Duration';
  period: Period;
  units: Scalars['Int']['output'];
};

export type DurationInput = {
  period: Period;
  units: Scalars['Int']['input'];
};

export type InterestIncome = {
  __typename?: 'InterestIncome';
  usdBalance: Scalars['UsdCents']['output'];
};

export enum InterestInterval {
  EndOfMonth = 'END_OF_MONTH'
}

export enum KycLevel {
  One = 'ONE',
  Two = 'TWO',
  Zero = 'ZERO'
}

export type LayeredBtcAccountBalances = {
  __typename?: 'LayeredBtcAccountBalances';
  all: BtcAccountBalance;
  encumbrance: BtcAccountBalance;
  pending: BtcAccountBalance;
  settled: BtcAccountBalance;
};

export type LayeredUsdAccountBalances = {
  __typename?: 'LayeredUsdAccountBalances';
  all: UsdAccountBalance;
  encumbrance: UsdAccountBalance;
  pending: UsdAccountBalance;
  settled: UsdAccountBalance;
};

export type Loan = {
  __typename?: 'Loan';
  balance: LoanBalance;
  customer: Customer;
  id: Scalars['ID']['output'];
  loanId: Scalars['UUID']['output'];
  loanTerms: TermValues;
  startDate: Scalars['Timestamp']['output'];
  status: LoanStatus;
};

export type LoanApproveInput = {
  collateral: Scalars['Satoshis']['input'];
  loanId: Scalars['UUID']['input'];
};

export type LoanApprovePayload = {
  __typename?: 'LoanApprovePayload';
  loan: Loan;
};

export type LoanBalance = {
  __typename?: 'LoanBalance';
  collateral: Collateral;
  interestIncurred: InterestIncome;
  outstanding: LoanOutstanding;
};

export type LoanCreateInput = {
  customerId: Scalars['UUID']['input'];
  desiredPrincipal: Scalars['UsdCents']['input'];
  loanTerms: TermsInput;
};

export type LoanCreatePayload = {
  __typename?: 'LoanCreatePayload';
  loan: Loan;
};

export type LoanOutstanding = {
  __typename?: 'LoanOutstanding';
  usdBalance: Scalars['UsdCents']['output'];
};

export type LoanPartialPaymentInput = {
  amount: Scalars['UsdCents']['input'];
  loanId: Scalars['UUID']['input'];
};

export type LoanPartialPaymentPayload = {
  __typename?: 'LoanPartialPaymentPayload';
  loan: Loan;
};

export enum LoanStatus {
  Active = 'ACTIVE',
  Closed = 'CLOSED',
  New = 'NEW'
}

export type Mutation = {
  __typename?: 'Mutation';
  defaultTermsUpdate: DefaultTermsUpdatePayload;
  loanApprove: LoanApprovePayload;
  loanCreate: LoanCreatePayload;
  loanPartialPayment: LoanPartialPaymentPayload;
  shareholderEquityAdd: SuccessPayload;
  sumsubPermalinkCreate: SumsubPermalinkCreatePayload;
  userAssignRole: UserAssignRolePayload;
  userCreate: UserCreatePayload;
};


export type MutationDefaultTermsUpdateArgs = {
  input: DefaultTermsUpdateInput;
};


export type MutationLoanApproveArgs = {
  input: LoanApproveInput;
};


export type MutationLoanCreateArgs = {
  input: LoanCreateInput;
};


export type MutationLoanPartialPaymentArgs = {
  input: LoanPartialPaymentInput;
};


export type MutationShareholderEquityAddArgs = {
  input: ShareholderEquityAddInput;
};


export type MutationSumsubPermalinkCreateArgs = {
  input: SumsubPermalinkCreateInput;
};


export type MutationUserAssignRoleArgs = {
  input: UserAssignRoleInput;
};


export type MutationUserCreateArgs = {
  input: UserCreateInput;
};

/** Information about pagination in a connection */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export enum Period {
  Months = 'MONTHS'
}

export type ProfitAndLossStatement = {
  __typename?: 'ProfitAndLossStatement';
  balance: AccountBalancesByCurrency;
  categories: Array<StatementCategory>;
  name: Scalars['String']['output'];
};

export type Query = {
  __typename?: 'Query';
  accountSet?: Maybe<AccountSetAndSubAccounts>;
  accountSetWithBalance?: Maybe<AccountSetAndSubAccountsWithBalance>;
  balanceSheet?: Maybe<BalanceSheet>;
  chartOfAccounts?: Maybe<ChartOfAccounts>;
  customer?: Maybe<Customer>;
  customers: CustomerConnection;
  defaultTerms?: Maybe<Terms>;
  loan?: Maybe<Loan>;
  offBalanceSheetChartOfAccounts?: Maybe<ChartOfAccounts>;
  offBalanceSheetTrialBalance?: Maybe<TrialBalance>;
  profitAndLossStatement?: Maybe<ProfitAndLossStatement>;
  trialBalance?: Maybe<TrialBalance>;
  users: Array<User>;
};


export type QueryAccountSetArgs = {
  accountSetId: Scalars['UUID']['input'];
};


export type QueryAccountSetWithBalanceArgs = {
  accountSetId: Scalars['UUID']['input'];
};


export type QueryCustomerArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryCustomersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryLoanArgs = {
  id: Scalars['UUID']['input'];
};

export enum Role {
  BankManager = 'BANK_MANAGER',
  SuperUser = 'SUPER_USER'
}

export type ShareholderEquityAddInput = {
  amount: Scalars['UsdCents']['input'];
  reference: Scalars['String']['input'];
};

export type StatementCategory = {
  __typename?: 'StatementCategory';
  accounts: Array<AccountSetSubAccountWithBalance>;
  balance: AccountBalancesByCurrency;
  name: Scalars['String']['output'];
};

export type SuccessPayload = {
  __typename?: 'SuccessPayload';
  success: Scalars['Boolean']['output'];
};

export type SumsubPermalinkCreateInput = {
  customerId: Scalars['String']['input'];
};

export type SumsubPermalinkCreatePayload = {
  __typename?: 'SumsubPermalinkCreatePayload';
  url: Scalars['String']['output'];
};

export type TermValues = {
  __typename?: 'TermValues';
  annualRate: Scalars['AnnualRate']['output'];
  duration: Duration;
  initialCvl: Scalars['CVLPct']['output'];
  interval: InterestInterval;
  liquidationCvl: Scalars['CVLPct']['output'];
  marginCallCvl: Scalars['CVLPct']['output'];
};

export type Terms = {
  __typename?: 'Terms';
  id: Scalars['ID']['output'];
  termsId: Scalars['UUID']['output'];
  values: TermValues;
};

export type TermsInput = {
  annualRate: Scalars['AnnualRate']['input'];
  duration: DurationInput;
  initialCvl: Scalars['CVLPct']['input'];
  interval: InterestInterval;
  liquidationCvl: Scalars['CVLPct']['input'];
  marginCallCvl: Scalars['CVLPct']['input'];
};

export type TrialBalance = {
  __typename?: 'TrialBalance';
  balance: AccountBalancesByCurrency;
  name: Scalars['String']['output'];
  subAccounts: Array<AccountSetSubAccountWithBalance>;
};

export type UnallocatedCollateral = {
  __typename?: 'UnallocatedCollateral';
  settled: BtcBalance;
};

export type UsdAccountBalance = {
  __typename?: 'UsdAccountBalance';
  credit: Scalars['UsdCents']['output'];
  debit: Scalars['UsdCents']['output'];
  netCredit: Scalars['SignedUsdCents']['output'];
  netDebit: Scalars['SignedUsdCents']['output'];
};

export type UsdBalance = {
  __typename?: 'UsdBalance';
  usdBalance: Scalars['UsdCents']['output'];
};

export type User = {
  __typename?: 'User';
  email: Scalars['String']['output'];
  roles: Array<Role>;
  userId: Scalars['UUID']['output'];
};

export type UserAssignRoleInput = {
  id: Scalars['UUID']['input'];
  role: Role;
};

export type UserAssignRolePayload = {
  __typename?: 'UserAssignRolePayload';
  user: User;
};

export type UserBalance = {
  __typename?: 'UserBalance';
  checking: Checking;
  unallocatedCollateral: UnallocatedCollateral;
};

export type UserCreateInput = {
  email: Scalars['String']['input'];
};

export type UserCreatePayload = {
  __typename?: 'UserCreatePayload';
  user: User;
};

export type ChartOfAccountsAccountSetQueryVariables = Exact<{
  accountSetId: Scalars['UUID']['input'];
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type ChartOfAccountsAccountSetQuery = { __typename?: 'Query', accountSet?: { __typename?: 'AccountSetAndSubAccounts', id: string, name: string, subAccounts: { __typename?: 'AccountSetSubAccountConnection', edges: Array<{ __typename?: 'AccountSetSubAccountEdge', cursor: string, node: { __typename: 'AccountDetails', id: string, name: string } | { __typename: 'AccountSetDetails', id: string, name: string, hasSubAccounts: boolean } }>, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean } } } | null };

export type GetOnBalanceSheetChartOfAccountsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetOnBalanceSheetChartOfAccountsQuery = { __typename?: 'Query', chartOfAccounts?: { __typename?: 'ChartOfAccounts', name: string, categories: Array<{ __typename?: 'ChartOfAccountsCategory', name: string, accounts: Array<{ __typename: 'AccountDetails', id: string, name: string } | { __typename: 'AccountSetDetails', id: string, name: string, hasSubAccounts: boolean }> }> } | null };

export type GetOffBalanceSheetChartOfAccountsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetOffBalanceSheetChartOfAccountsQuery = { __typename?: 'Query', offBalanceSheetChartOfAccounts?: { __typename?: 'ChartOfAccounts', name: string, categories: Array<{ __typename?: 'ChartOfAccountsCategory', name: string, accounts: Array<{ __typename: 'AccountDetails', id: string, name: string } | { __typename: 'AccountSetDetails', id: string, name: string, hasSubAccounts: boolean }> }> } | null };

export type SumsubPermalinkCreateMutationVariables = Exact<{
  input: SumsubPermalinkCreateInput;
}>;


export type SumsubPermalinkCreateMutation = { __typename?: 'Mutation', sumsubPermalinkCreate: { __typename?: 'SumsubPermalinkCreatePayload', url: string } };

export type DefaultTermsQueryVariables = Exact<{ [key: string]: never; }>;


export type DefaultTermsQuery = { __typename?: 'Query', defaultTerms?: { __typename?: 'Terms', id: string, termsId: string, values: { __typename?: 'TermValues', annualRate: any, interval: InterestInterval, liquidationCvl: any, marginCallCvl: any, initialCvl: any, duration: { __typename?: 'Duration', period: Period, units: number } } } | null };

export type GetOnBalanceSheetTrialBalanceQueryVariables = Exact<{ [key: string]: never; }>;


export type GetOnBalanceSheetTrialBalanceQuery = { __typename?: 'Query', trialBalance?: { __typename?: 'TrialBalance', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any } }, usd: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } }, usdt: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } } }, subAccounts: Array<{ __typename?: 'AccountSetWithBalance', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any } }, usd: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } }, usdt: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } } } } | { __typename?: 'AccountWithBalance', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any } }, usd: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } }, usdt: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } } } }> } | null };

export type GetOffBalanceSheetTrialBalanceQueryVariables = Exact<{ [key: string]: never; }>;


export type GetOffBalanceSheetTrialBalanceQuery = { __typename?: 'Query', offBalanceSheetTrialBalance?: { __typename?: 'TrialBalance', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any } }, usd: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } }, usdt: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } } }, subAccounts: Array<{ __typename?: 'AccountSetWithBalance', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any } }, usd: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } }, usdt: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } } } } | { __typename?: 'AccountWithBalance', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any } }, usd: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } }, usdt: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } } } }> } | null };

export type BalancesByCurrencyFragment = { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any } }, usd: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } }, usdt: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } } };

export type BtcBalancesFragment = { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'BtcAccountBalance', netDebit: any, debit: any, credit: any } };

export type UsdBalancesFragment = { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, settled: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, pending: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any }, encumbrance: { __typename?: 'UsdAccountBalance', netDebit: any, debit: any, credit: any } };

export type LoanApproveMutationVariables = Exact<{
  input: LoanApproveInput;
}>;


export type LoanApproveMutation = { __typename?: 'Mutation', loanApprove: { __typename?: 'LoanApprovePayload', loan: { __typename?: 'Loan', id: string, loanId: string, startDate: any, balance: { __typename?: 'LoanBalance', collateral: { __typename?: 'Collateral', btcBalance: any }, outstanding: { __typename?: 'LoanOutstanding', usdBalance: any }, interestIncurred: { __typename?: 'InterestIncome', usdBalance: any } } } } };

export type LoanCreateMutationVariables = Exact<{
  input: LoanCreateInput;
}>;


export type LoanCreateMutation = { __typename?: 'Mutation', loanCreate: { __typename?: 'LoanCreatePayload', loan: { __typename?: 'Loan', id: string, loanId: string, startDate: any, balance: { __typename?: 'LoanBalance', collateral: { __typename?: 'Collateral', btcBalance: any }, outstanding: { __typename?: 'LoanOutstanding', usdBalance: any }, interestIncurred: { __typename?: 'InterestIncome', usdBalance: any } }, loanTerms: { __typename?: 'TermValues', annualRate: any, interval: InterestInterval, liquidationCvl: any, marginCallCvl: any, initialCvl: any, duration: { __typename?: 'Duration', period: Period, units: number } } } } };

export type LoanPartialPaymentMutationVariables = Exact<{
  input: LoanPartialPaymentInput;
}>;


export type LoanPartialPaymentMutation = { __typename?: 'Mutation', loanPartialPayment: { __typename?: 'LoanPartialPaymentPayload', loan: { __typename?: 'Loan', id: string, loanId: string, startDate: any, balance: { __typename?: 'LoanBalance', collateral: { __typename?: 'Collateral', btcBalance: any }, outstanding: { __typename?: 'LoanOutstanding', usdBalance: any }, interestIncurred: { __typename?: 'InterestIncome', usdBalance: any } } } } };

export type DefaultTermsUpdateMutationVariables = Exact<{
  input: DefaultTermsUpdateInput;
}>;


export type DefaultTermsUpdateMutation = { __typename?: 'Mutation', defaultTermsUpdate: { __typename?: 'DefaultTermsUpdatePayload', terms: { __typename?: 'Terms', id: string, termsId: string, values: { __typename?: 'TermValues', annualRate: any, interval: InterestInterval, liquidationCvl: any, marginCallCvl: any, initialCvl: any, duration: { __typename?: 'Duration', period: Period, units: number } } } } };

export type GetLoanDetailsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetLoanDetailsQuery = { __typename?: 'Query', loan?: { __typename?: 'Loan', id: string, loanId: string, startDate: any, status: LoanStatus, customer: { __typename?: 'Customer', customerId: string }, balance: { __typename?: 'LoanBalance', collateral: { __typename?: 'Collateral', btcBalance: any }, outstanding: { __typename?: 'LoanOutstanding', usdBalance: any }, interestIncurred: { __typename?: 'InterestIncome', usdBalance: any } }, loanTerms: { __typename?: 'TermValues', annualRate: any, interval: InterestInterval, liquidationCvl: any, marginCallCvl: any, initialCvl: any, duration: { __typename?: 'Duration', period: Period, units: number } } } | null };

export type GetLoansForCustomerQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetLoansForCustomerQuery = { __typename?: 'Query', customer?: { __typename?: 'Customer', customerId: string, loans: Array<{ __typename?: 'Loan', id: string, loanId: string, startDate: any, status: LoanStatus, loanTerms: { __typename?: 'TermValues', annualRate: any, interval: InterestInterval, liquidationCvl: any, marginCallCvl: any, initialCvl: any, duration: { __typename?: 'Duration', period: Period, units: number } }, balance: { __typename?: 'LoanBalance', collateral: { __typename?: 'Collateral', btcBalance: any }, outstanding: { __typename?: 'LoanOutstanding', usdBalance: any }, interestIncurred: { __typename?: 'InterestIncome', usdBalance: any } } }> } | null };

export type GetCustomerByCustomerIdQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetCustomerByCustomerIdQuery = { __typename?: 'Query', customer?: { __typename?: 'Customer', customerId: string, email: string, status: AccountStatus, level: KycLevel, applicantId?: string | null, btcDepositAddress: string, ustDepositAddress: string, balance: { __typename?: 'UserBalance', unallocatedCollateral: { __typename?: 'UnallocatedCollateral', settled: { __typename?: 'BtcBalance', btcBalance: any } }, checking: { __typename?: 'Checking', settled: { __typename?: 'UsdBalance', usdBalance: any }, pending: { __typename?: 'UsdBalance', usdBalance: any } } } } | null };

export type CustomersQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type CustomersQuery = { __typename?: 'Query', customers: { __typename?: 'CustomerConnection', nodes: Array<{ __typename?: 'Customer', customerId: string, email: string, btcDepositAddress: string, ustDepositAddress: string, balance: { __typename?: 'UserBalance', unallocatedCollateral: { __typename?: 'UnallocatedCollateral', settled: { __typename?: 'BtcBalance', btcBalance: any } }, checking: { __typename?: 'Checking', settled: { __typename?: 'UsdBalance', usdBalance: any }, pending: { __typename?: 'UsdBalance', usdBalance: any } } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export const BtcBalancesFragmentDoc = gql`
    fragment btcBalances on LayeredBtcAccountBalances {
  all {
    netDebit
    debit
    credit
  }
  settled {
    netDebit
    debit
    credit
  }
  pending {
    netDebit
    debit
    credit
  }
  encumbrance {
    netDebit
    debit
    credit
  }
}
    `;
export const UsdBalancesFragmentDoc = gql`
    fragment usdBalances on LayeredUsdAccountBalances {
  all {
    netDebit
    debit
    credit
  }
  settled {
    netDebit
    debit
    credit
  }
  pending {
    netDebit
    debit
    credit
  }
  encumbrance {
    netDebit
    debit
    credit
  }
}
    `;
export const BalancesByCurrencyFragmentDoc = gql`
    fragment balancesByCurrency on AccountBalancesByCurrency {
  btc: btc {
    ...btcBalances
  }
  usd: usd {
    ...usdBalances
  }
  usdt: usdt {
    ...usdBalances
  }
}
    ${BtcBalancesFragmentDoc}
${UsdBalancesFragmentDoc}`;
export const ChartOfAccountsAccountSetDocument = gql`
    query ChartOfAccountsAccountSet($accountSetId: UUID!, $first: Int!, $after: String) {
  accountSet(accountSetId: $accountSetId) {
    id
    name
    subAccounts(first: $first, after: $after) {
      edges {
        cursor
        node {
          __typename
          ... on AccountDetails {
            __typename
            id
            name
          }
          ... on AccountSetDetails {
            __typename
            id
            name
            hasSubAccounts
          }
        }
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}
    `;

/**
 * __useChartOfAccountsAccountSetQuery__
 *
 * To run a query within a React component, call `useChartOfAccountsAccountSetQuery` and pass it any options that fit your needs.
 * When your component renders, `useChartOfAccountsAccountSetQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useChartOfAccountsAccountSetQuery({
 *   variables: {
 *      accountSetId: // value for 'accountSetId'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useChartOfAccountsAccountSetQuery(baseOptions: Apollo.QueryHookOptions<ChartOfAccountsAccountSetQuery, ChartOfAccountsAccountSetQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ChartOfAccountsAccountSetQuery, ChartOfAccountsAccountSetQueryVariables>(ChartOfAccountsAccountSetDocument, options);
      }
export function useChartOfAccountsAccountSetLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ChartOfAccountsAccountSetQuery, ChartOfAccountsAccountSetQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ChartOfAccountsAccountSetQuery, ChartOfAccountsAccountSetQueryVariables>(ChartOfAccountsAccountSetDocument, options);
        }
export type ChartOfAccountsAccountSetQueryHookResult = ReturnType<typeof useChartOfAccountsAccountSetQuery>;
export type ChartOfAccountsAccountSetLazyQueryHookResult = ReturnType<typeof useChartOfAccountsAccountSetLazyQuery>;
export type ChartOfAccountsAccountSetQueryResult = Apollo.QueryResult<ChartOfAccountsAccountSetQuery, ChartOfAccountsAccountSetQueryVariables>;
export const GetOnBalanceSheetChartOfAccountsDocument = gql`
    query GetOnBalanceSheetChartOfAccounts {
  chartOfAccounts {
    name
    categories {
      name
      accounts {
        __typename
        ... on AccountDetails {
          id
          name
        }
        ... on AccountSetDetails {
          id
          name
          hasSubAccounts
        }
      }
    }
  }
}
    `;

/**
 * __useGetOnBalanceSheetChartOfAccountsQuery__
 *
 * To run a query within a React component, call `useGetOnBalanceSheetChartOfAccountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOnBalanceSheetChartOfAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOnBalanceSheetChartOfAccountsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetOnBalanceSheetChartOfAccountsQuery(baseOptions?: Apollo.QueryHookOptions<GetOnBalanceSheetChartOfAccountsQuery, GetOnBalanceSheetChartOfAccountsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOnBalanceSheetChartOfAccountsQuery, GetOnBalanceSheetChartOfAccountsQueryVariables>(GetOnBalanceSheetChartOfAccountsDocument, options);
      }
export function useGetOnBalanceSheetChartOfAccountsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOnBalanceSheetChartOfAccountsQuery, GetOnBalanceSheetChartOfAccountsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOnBalanceSheetChartOfAccountsQuery, GetOnBalanceSheetChartOfAccountsQueryVariables>(GetOnBalanceSheetChartOfAccountsDocument, options);
        }
export type GetOnBalanceSheetChartOfAccountsQueryHookResult = ReturnType<typeof useGetOnBalanceSheetChartOfAccountsQuery>;
export type GetOnBalanceSheetChartOfAccountsLazyQueryHookResult = ReturnType<typeof useGetOnBalanceSheetChartOfAccountsLazyQuery>;
export type GetOnBalanceSheetChartOfAccountsQueryResult = Apollo.QueryResult<GetOnBalanceSheetChartOfAccountsQuery, GetOnBalanceSheetChartOfAccountsQueryVariables>;
export const GetOffBalanceSheetChartOfAccountsDocument = gql`
    query GetOffBalanceSheetChartOfAccounts {
  offBalanceSheetChartOfAccounts {
    name
    categories {
      name
      accounts {
        __typename
        ... on AccountDetails {
          id
          name
        }
        ... on AccountSetDetails {
          id
          name
          hasSubAccounts
        }
      }
    }
  }
}
    `;

/**
 * __useGetOffBalanceSheetChartOfAccountsQuery__
 *
 * To run a query within a React component, call `useGetOffBalanceSheetChartOfAccountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOffBalanceSheetChartOfAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOffBalanceSheetChartOfAccountsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetOffBalanceSheetChartOfAccountsQuery(baseOptions?: Apollo.QueryHookOptions<GetOffBalanceSheetChartOfAccountsQuery, GetOffBalanceSheetChartOfAccountsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOffBalanceSheetChartOfAccountsQuery, GetOffBalanceSheetChartOfAccountsQueryVariables>(GetOffBalanceSheetChartOfAccountsDocument, options);
      }
export function useGetOffBalanceSheetChartOfAccountsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOffBalanceSheetChartOfAccountsQuery, GetOffBalanceSheetChartOfAccountsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOffBalanceSheetChartOfAccountsQuery, GetOffBalanceSheetChartOfAccountsQueryVariables>(GetOffBalanceSheetChartOfAccountsDocument, options);
        }
export type GetOffBalanceSheetChartOfAccountsQueryHookResult = ReturnType<typeof useGetOffBalanceSheetChartOfAccountsQuery>;
export type GetOffBalanceSheetChartOfAccountsLazyQueryHookResult = ReturnType<typeof useGetOffBalanceSheetChartOfAccountsLazyQuery>;
export type GetOffBalanceSheetChartOfAccountsQueryResult = Apollo.QueryResult<GetOffBalanceSheetChartOfAccountsQuery, GetOffBalanceSheetChartOfAccountsQueryVariables>;
export const SumsubPermalinkCreateDocument = gql`
    mutation sumsubPermalinkCreate($input: SumsubPermalinkCreateInput!) {
  sumsubPermalinkCreate(input: $input) {
    url
  }
}
    `;
export type SumsubPermalinkCreateMutationFn = Apollo.MutationFunction<SumsubPermalinkCreateMutation, SumsubPermalinkCreateMutationVariables>;

/**
 * __useSumsubPermalinkCreateMutation__
 *
 * To run a mutation, you first call `useSumsubPermalinkCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSumsubPermalinkCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sumsubPermalinkCreateMutation, { data, loading, error }] = useSumsubPermalinkCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSumsubPermalinkCreateMutation(baseOptions?: Apollo.MutationHookOptions<SumsubPermalinkCreateMutation, SumsubPermalinkCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SumsubPermalinkCreateMutation, SumsubPermalinkCreateMutationVariables>(SumsubPermalinkCreateDocument, options);
      }
export type SumsubPermalinkCreateMutationHookResult = ReturnType<typeof useSumsubPermalinkCreateMutation>;
export type SumsubPermalinkCreateMutationResult = Apollo.MutationResult<SumsubPermalinkCreateMutation>;
export type SumsubPermalinkCreateMutationOptions = Apollo.BaseMutationOptions<SumsubPermalinkCreateMutation, SumsubPermalinkCreateMutationVariables>;
export const DefaultTermsDocument = gql`
    query defaultTerms {
  defaultTerms {
    id
    termsId
    values {
      annualRate
      interval
      liquidationCvl
      marginCallCvl
      initialCvl
      duration {
        period
        units
      }
    }
  }
}
    `;

/**
 * __useDefaultTermsQuery__
 *
 * To run a query within a React component, call `useDefaultTermsQuery` and pass it any options that fit your needs.
 * When your component renders, `useDefaultTermsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDefaultTermsQuery({
 *   variables: {
 *   },
 * });
 */
export function useDefaultTermsQuery(baseOptions?: Apollo.QueryHookOptions<DefaultTermsQuery, DefaultTermsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<DefaultTermsQuery, DefaultTermsQueryVariables>(DefaultTermsDocument, options);
      }
export function useDefaultTermsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DefaultTermsQuery, DefaultTermsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<DefaultTermsQuery, DefaultTermsQueryVariables>(DefaultTermsDocument, options);
        }
export type DefaultTermsQueryHookResult = ReturnType<typeof useDefaultTermsQuery>;
export type DefaultTermsLazyQueryHookResult = ReturnType<typeof useDefaultTermsLazyQuery>;
export type DefaultTermsQueryResult = Apollo.QueryResult<DefaultTermsQuery, DefaultTermsQueryVariables>;
export const GetOnBalanceSheetTrialBalanceDocument = gql`
    query GetOnBalanceSheetTrialBalance {
  trialBalance {
    name
    balance {
      ...balancesByCurrency
    }
    subAccounts {
      ... on AccountWithBalance {
        name
        balance {
          ...balancesByCurrency
        }
      }
      ... on AccountSetWithBalance {
        name
        balance {
          ...balancesByCurrency
        }
      }
    }
  }
}
    ${BalancesByCurrencyFragmentDoc}`;

/**
 * __useGetOnBalanceSheetTrialBalanceQuery__
 *
 * To run a query within a React component, call `useGetOnBalanceSheetTrialBalanceQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOnBalanceSheetTrialBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOnBalanceSheetTrialBalanceQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetOnBalanceSheetTrialBalanceQuery(baseOptions?: Apollo.QueryHookOptions<GetOnBalanceSheetTrialBalanceQuery, GetOnBalanceSheetTrialBalanceQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOnBalanceSheetTrialBalanceQuery, GetOnBalanceSheetTrialBalanceQueryVariables>(GetOnBalanceSheetTrialBalanceDocument, options);
      }
export function useGetOnBalanceSheetTrialBalanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOnBalanceSheetTrialBalanceQuery, GetOnBalanceSheetTrialBalanceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOnBalanceSheetTrialBalanceQuery, GetOnBalanceSheetTrialBalanceQueryVariables>(GetOnBalanceSheetTrialBalanceDocument, options);
        }
export type GetOnBalanceSheetTrialBalanceQueryHookResult = ReturnType<typeof useGetOnBalanceSheetTrialBalanceQuery>;
export type GetOnBalanceSheetTrialBalanceLazyQueryHookResult = ReturnType<typeof useGetOnBalanceSheetTrialBalanceLazyQuery>;
export type GetOnBalanceSheetTrialBalanceQueryResult = Apollo.QueryResult<GetOnBalanceSheetTrialBalanceQuery, GetOnBalanceSheetTrialBalanceQueryVariables>;
export const GetOffBalanceSheetTrialBalanceDocument = gql`
    query GetOffBalanceSheetTrialBalance {
  offBalanceSheetTrialBalance {
    name
    balance {
      ...balancesByCurrency
    }
    subAccounts {
      ... on AccountWithBalance {
        name
        balance {
          ...balancesByCurrency
        }
      }
      ... on AccountSetWithBalance {
        name
        balance {
          ...balancesByCurrency
        }
      }
    }
  }
}
    ${BalancesByCurrencyFragmentDoc}`;

/**
 * __useGetOffBalanceSheetTrialBalanceQuery__
 *
 * To run a query within a React component, call `useGetOffBalanceSheetTrialBalanceQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOffBalanceSheetTrialBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOffBalanceSheetTrialBalanceQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetOffBalanceSheetTrialBalanceQuery(baseOptions?: Apollo.QueryHookOptions<GetOffBalanceSheetTrialBalanceQuery, GetOffBalanceSheetTrialBalanceQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOffBalanceSheetTrialBalanceQuery, GetOffBalanceSheetTrialBalanceQueryVariables>(GetOffBalanceSheetTrialBalanceDocument, options);
      }
export function useGetOffBalanceSheetTrialBalanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOffBalanceSheetTrialBalanceQuery, GetOffBalanceSheetTrialBalanceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOffBalanceSheetTrialBalanceQuery, GetOffBalanceSheetTrialBalanceQueryVariables>(GetOffBalanceSheetTrialBalanceDocument, options);
        }
export type GetOffBalanceSheetTrialBalanceQueryHookResult = ReturnType<typeof useGetOffBalanceSheetTrialBalanceQuery>;
export type GetOffBalanceSheetTrialBalanceLazyQueryHookResult = ReturnType<typeof useGetOffBalanceSheetTrialBalanceLazyQuery>;
export type GetOffBalanceSheetTrialBalanceQueryResult = Apollo.QueryResult<GetOffBalanceSheetTrialBalanceQuery, GetOffBalanceSheetTrialBalanceQueryVariables>;
export const LoanApproveDocument = gql`
    mutation LoanApprove($input: LoanApproveInput!) {
  loanApprove(input: $input) {
    loan {
      id
      loanId
      startDate
      balance {
        collateral {
          btcBalance
        }
        outstanding {
          usdBalance
        }
        interestIncurred {
          usdBalance
        }
      }
    }
  }
}
    `;
export type LoanApproveMutationFn = Apollo.MutationFunction<LoanApproveMutation, LoanApproveMutationVariables>;

/**
 * __useLoanApproveMutation__
 *
 * To run a mutation, you first call `useLoanApproveMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoanApproveMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loanApproveMutation, { data, loading, error }] = useLoanApproveMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoanApproveMutation(baseOptions?: Apollo.MutationHookOptions<LoanApproveMutation, LoanApproveMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoanApproveMutation, LoanApproveMutationVariables>(LoanApproveDocument, options);
      }
export type LoanApproveMutationHookResult = ReturnType<typeof useLoanApproveMutation>;
export type LoanApproveMutationResult = Apollo.MutationResult<LoanApproveMutation>;
export type LoanApproveMutationOptions = Apollo.BaseMutationOptions<LoanApproveMutation, LoanApproveMutationVariables>;
export const LoanCreateDocument = gql`
    mutation LoanCreate($input: LoanCreateInput!) {
  loanCreate(input: $input) {
    loan {
      id
      loanId
      startDate
      balance {
        collateral {
          btcBalance
        }
        outstanding {
          usdBalance
        }
        interestIncurred {
          usdBalance
        }
      }
      loanTerms {
        annualRate
        interval
        liquidationCvl
        marginCallCvl
        initialCvl
        duration {
          period
          units
        }
      }
    }
  }
}
    `;
export type LoanCreateMutationFn = Apollo.MutationFunction<LoanCreateMutation, LoanCreateMutationVariables>;

/**
 * __useLoanCreateMutation__
 *
 * To run a mutation, you first call `useLoanCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoanCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loanCreateMutation, { data, loading, error }] = useLoanCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoanCreateMutation(baseOptions?: Apollo.MutationHookOptions<LoanCreateMutation, LoanCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoanCreateMutation, LoanCreateMutationVariables>(LoanCreateDocument, options);
      }
export type LoanCreateMutationHookResult = ReturnType<typeof useLoanCreateMutation>;
export type LoanCreateMutationResult = Apollo.MutationResult<LoanCreateMutation>;
export type LoanCreateMutationOptions = Apollo.BaseMutationOptions<LoanCreateMutation, LoanCreateMutationVariables>;
export const LoanPartialPaymentDocument = gql`
    mutation loanPartialPayment($input: LoanPartialPaymentInput!) {
  loanPartialPayment(input: $input) {
    loan {
      id
      loanId
      startDate
      balance {
        collateral {
          btcBalance
        }
        outstanding {
          usdBalance
        }
        interestIncurred {
          usdBalance
        }
      }
    }
  }
}
    `;
export type LoanPartialPaymentMutationFn = Apollo.MutationFunction<LoanPartialPaymentMutation, LoanPartialPaymentMutationVariables>;

/**
 * __useLoanPartialPaymentMutation__
 *
 * To run a mutation, you first call `useLoanPartialPaymentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoanPartialPaymentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loanPartialPaymentMutation, { data, loading, error }] = useLoanPartialPaymentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoanPartialPaymentMutation(baseOptions?: Apollo.MutationHookOptions<LoanPartialPaymentMutation, LoanPartialPaymentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoanPartialPaymentMutation, LoanPartialPaymentMutationVariables>(LoanPartialPaymentDocument, options);
      }
export type LoanPartialPaymentMutationHookResult = ReturnType<typeof useLoanPartialPaymentMutation>;
export type LoanPartialPaymentMutationResult = Apollo.MutationResult<LoanPartialPaymentMutation>;
export type LoanPartialPaymentMutationOptions = Apollo.BaseMutationOptions<LoanPartialPaymentMutation, LoanPartialPaymentMutationVariables>;
export const DefaultTermsUpdateDocument = gql`
    mutation DefaultTermsUpdate($input: DefaultTermsUpdateInput!) {
  defaultTermsUpdate(input: $input) {
    terms {
      id
      termsId
      values {
        annualRate
        interval
        liquidationCvl
        marginCallCvl
        initialCvl
        duration {
          period
          units
        }
      }
    }
  }
}
    `;
export type DefaultTermsUpdateMutationFn = Apollo.MutationFunction<DefaultTermsUpdateMutation, DefaultTermsUpdateMutationVariables>;

/**
 * __useDefaultTermsUpdateMutation__
 *
 * To run a mutation, you first call `useDefaultTermsUpdateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDefaultTermsUpdateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [defaultTermsUpdateMutation, { data, loading, error }] = useDefaultTermsUpdateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDefaultTermsUpdateMutation(baseOptions?: Apollo.MutationHookOptions<DefaultTermsUpdateMutation, DefaultTermsUpdateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DefaultTermsUpdateMutation, DefaultTermsUpdateMutationVariables>(DefaultTermsUpdateDocument, options);
      }
export type DefaultTermsUpdateMutationHookResult = ReturnType<typeof useDefaultTermsUpdateMutation>;
export type DefaultTermsUpdateMutationResult = Apollo.MutationResult<DefaultTermsUpdateMutation>;
export type DefaultTermsUpdateMutationOptions = Apollo.BaseMutationOptions<DefaultTermsUpdateMutation, DefaultTermsUpdateMutationVariables>;
export const GetLoanDetailsDocument = gql`
    query GetLoanDetails($id: UUID!) {
  loan(id: $id) {
    id
    loanId
    startDate
    status
    customer {
      customerId
    }
    balance {
      collateral {
        btcBalance
      }
      outstanding {
        usdBalance
      }
      interestIncurred {
        usdBalance
      }
    }
    loanTerms {
      annualRate
      interval
      liquidationCvl
      marginCallCvl
      initialCvl
      duration {
        period
        units
      }
    }
  }
}
    `;

/**
 * __useGetLoanDetailsQuery__
 *
 * To run a query within a React component, call `useGetLoanDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLoanDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLoanDetailsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetLoanDetailsQuery(baseOptions: Apollo.QueryHookOptions<GetLoanDetailsQuery, GetLoanDetailsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetLoanDetailsQuery, GetLoanDetailsQueryVariables>(GetLoanDetailsDocument, options);
      }
export function useGetLoanDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLoanDetailsQuery, GetLoanDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetLoanDetailsQuery, GetLoanDetailsQueryVariables>(GetLoanDetailsDocument, options);
        }
export type GetLoanDetailsQueryHookResult = ReturnType<typeof useGetLoanDetailsQuery>;
export type GetLoanDetailsLazyQueryHookResult = ReturnType<typeof useGetLoanDetailsLazyQuery>;
export type GetLoanDetailsQueryResult = Apollo.QueryResult<GetLoanDetailsQuery, GetLoanDetailsQueryVariables>;
export const GetLoansForCustomerDocument = gql`
    query GetLoansForCustomer($id: UUID!) {
  customer(id: $id) {
    customerId
    loans {
      id
      loanId
      startDate
      status
      loanTerms {
        annualRate
        interval
        liquidationCvl
        marginCallCvl
        initialCvl
        duration {
          period
          units
        }
      }
      balance {
        collateral {
          btcBalance
        }
        outstanding {
          usdBalance
        }
        interestIncurred {
          usdBalance
        }
      }
    }
  }
}
    `;

/**
 * __useGetLoansForCustomerQuery__
 *
 * To run a query within a React component, call `useGetLoansForCustomerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLoansForCustomerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLoansForCustomerQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetLoansForCustomerQuery(baseOptions: Apollo.QueryHookOptions<GetLoansForCustomerQuery, GetLoansForCustomerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetLoansForCustomerQuery, GetLoansForCustomerQueryVariables>(GetLoansForCustomerDocument, options);
      }
export function useGetLoansForCustomerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLoansForCustomerQuery, GetLoansForCustomerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetLoansForCustomerQuery, GetLoansForCustomerQueryVariables>(GetLoansForCustomerDocument, options);
        }
export type GetLoansForCustomerQueryHookResult = ReturnType<typeof useGetLoansForCustomerQuery>;
export type GetLoansForCustomerLazyQueryHookResult = ReturnType<typeof useGetLoansForCustomerLazyQuery>;
export type GetLoansForCustomerQueryResult = Apollo.QueryResult<GetLoansForCustomerQuery, GetLoansForCustomerQueryVariables>;
export const GetCustomerByCustomerIdDocument = gql`
    query getCustomerByCustomerId($id: UUID!) {
  customer(id: $id) {
    customerId
    email
    status
    level
    applicantId
    btcDepositAddress
    ustDepositAddress
    balance {
      unallocatedCollateral {
        settled {
          btcBalance
        }
      }
      checking {
        settled {
          usdBalance
        }
        pending {
          usdBalance
        }
      }
    }
  }
}
    `;

/**
 * __useGetCustomerByCustomerIdQuery__
 *
 * To run a query within a React component, call `useGetCustomerByCustomerIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerByCustomerIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerByCustomerIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCustomerByCustomerIdQuery(baseOptions: Apollo.QueryHookOptions<GetCustomerByCustomerIdQuery, GetCustomerByCustomerIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerByCustomerIdQuery, GetCustomerByCustomerIdQueryVariables>(GetCustomerByCustomerIdDocument, options);
      }
export function useGetCustomerByCustomerIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerByCustomerIdQuery, GetCustomerByCustomerIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerByCustomerIdQuery, GetCustomerByCustomerIdQueryVariables>(GetCustomerByCustomerIdDocument, options);
        }
export type GetCustomerByCustomerIdQueryHookResult = ReturnType<typeof useGetCustomerByCustomerIdQuery>;
export type GetCustomerByCustomerIdLazyQueryHookResult = ReturnType<typeof useGetCustomerByCustomerIdLazyQuery>;
export type GetCustomerByCustomerIdQueryResult = Apollo.QueryResult<GetCustomerByCustomerIdQuery, GetCustomerByCustomerIdQueryVariables>;
export const CustomersDocument = gql`
    query Customers($first: Int!, $after: String) {
  customers(first: $first, after: $after) {
    nodes {
      customerId
      email
      btcDepositAddress
      ustDepositAddress
      balance {
        unallocatedCollateral {
          settled {
            btcBalance
          }
        }
        checking {
          settled {
            usdBalance
          }
          pending {
            usdBalance
          }
        }
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useCustomersQuery__
 *
 * To run a query within a React component, call `useCustomersQuery` and pass it any options that fit your needs.
 * When your component renders, `useCustomersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCustomersQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useCustomersQuery(baseOptions: Apollo.QueryHookOptions<CustomersQuery, CustomersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CustomersQuery, CustomersQueryVariables>(CustomersDocument, options);
      }
export function useCustomersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CustomersQuery, CustomersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CustomersQuery, CustomersQueryVariables>(CustomersDocument, options);
        }
export type CustomersQueryHookResult = ReturnType<typeof useCustomersQuery>;
export type CustomersLazyQueryHookResult = ReturnType<typeof useCustomersLazyQuery>;
export type CustomersQueryResult = Apollo.QueryResult<CustomersQuery, CustomersQueryVariables>;