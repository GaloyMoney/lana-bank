// this file is autogenerated by codegen
/* eslint-disable */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  AnnualRatePct: { input: any; output: any; }
  CVLPct: { input: any; output: any; }
  DisbursalIdx: { input: any; output: any; }
  Satoshis: { input: any; output: any; }
  SignedSatoshis: { input: any; output: any; }
  SignedUsdCents: { input: any; output: any; }
  Timestamp: { input: any; output: any; }
  UUID: { input: string; output: string; }
  Upload: { input: any; output: any; }
  UsdCents: { input: any; output: any; }
};

export type Account = {
  __typename?: 'Account';
  amounts: AccountAmountsByCurrency;
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
};

export type AccountAmountsByCurrency = {
  __typename?: 'AccountAmountsByCurrency';
  btc: BtcAccountAmountsInPeriod;
  usd: UsdAccountAmountsInPeriod;
};

export type AccountSet = {
  __typename?: 'AccountSet';
  amounts: AccountAmountsByCurrency;
  hasSubAccounts: Scalars['Boolean']['output'];
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
};

export type AccountSetAndSubAccounts = {
  __typename?: 'AccountSetAndSubAccounts';
  amounts: AccountAmountsByCurrency;
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
  subAccounts: AccountSetSubAccountConnection;
};


export type AccountSetAndSubAccountsSubAccountsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};

export type AccountSetSubAccount = Account | AccountSet;

export type AccountSetSubAccountConnection = {
  __typename?: 'AccountSetSubAccountConnection';
  /** A list of edges. */
  edges: Array<AccountSetSubAccountEdge>;
  /** A list of nodes. */
  nodes: Array<AccountSetSubAccount>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type AccountSetSubAccountEdge = {
  __typename?: 'AccountSetSubAccountEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: AccountSetSubAccount;
};

export enum AccountStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE'
}

export type ApprovalProcess = {
  __typename?: 'ApprovalProcess';
  approvalProcessId: Scalars['UUID']['output'];
  approvalProcessType: ApprovalProcessType;
  createdAt: Scalars['Timestamp']['output'];
  id: Scalars['ID']['output'];
  policy: Policy;
  rules: ApprovalRules;
  status: ApprovalProcessStatus;
  subjectCanSubmitDecision: Scalars['Boolean']['output'];
  target: ApprovalProcessTarget;
  voters: Array<ApprovalProcessVoter>;
};

export type ApprovalProcessApproveInput = {
  processId: Scalars['UUID']['input'];
};

export type ApprovalProcessApprovePayload = {
  __typename?: 'ApprovalProcessApprovePayload';
  approvalProcess: ApprovalProcess;
};

export type ApprovalProcessConnection = {
  __typename?: 'ApprovalProcessConnection';
  /** A list of edges. */
  edges: Array<ApprovalProcessEdge>;
  /** A list of nodes. */
  nodes: Array<ApprovalProcess>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ApprovalProcessDenyInput = {
  processId: Scalars['UUID']['input'];
};

export type ApprovalProcessDenyPayload = {
  __typename?: 'ApprovalProcessDenyPayload';
  approvalProcess: ApprovalProcess;
};

/** An edge in a connection. */
export type ApprovalProcessEdge = {
  __typename?: 'ApprovalProcessEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: ApprovalProcess;
};

export enum ApprovalProcessStatus {
  Approved = 'APPROVED',
  Denied = 'DENIED',
  InProgress = 'IN_PROGRESS'
}

export type ApprovalProcessTarget = CreditFacility | CreditFacilityDisbursal | Withdrawal;

export enum ApprovalProcessType {
  CreditFacilityApproval = 'CREDIT_FACILITY_APPROVAL',
  DisbursalApproval = 'DISBURSAL_APPROVAL',
  WithdrawalApproval = 'WITHDRAWAL_APPROVAL'
}

export type ApprovalProcessVoter = {
  __typename?: 'ApprovalProcessVoter';
  didApprove: Scalars['Boolean']['output'];
  didDeny: Scalars['Boolean']['output'];
  didVote: Scalars['Boolean']['output'];
  stillEligible: Scalars['Boolean']['output'];
  user: User;
  votedAt?: Maybe<Scalars['Timestamp']['output']>;
};

export type ApprovalRules = CommitteeThreshold | SystemApproval;

export type AuditEntry = {
  __typename?: 'AuditEntry';
  action: Scalars['String']['output'];
  authorized: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  object: Scalars['String']['output'];
  recordedAt: Scalars['Timestamp']['output'];
  subject: AuditSubject;
};

export type AuditEntryConnection = {
  __typename?: 'AuditEntryConnection';
  /** A list of edges. */
  edges: Array<AuditEntryEdge>;
  /** A list of nodes. */
  nodes: Array<AuditEntry>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type AuditEntryEdge = {
  __typename?: 'AuditEntryEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: AuditEntry;
};

export type AuditSubject = System | User;

export type BalanceSheet = {
  __typename?: 'BalanceSheet';
  balance: AccountAmountsByCurrency;
  categories: Array<StatementCategory>;
  name: Scalars['String']['output'];
};

export type BtcAccountAmounts = {
  __typename?: 'BtcAccountAmounts';
  credit: Scalars['Satoshis']['output'];
  debit: Scalars['Satoshis']['output'];
  netCredit: Scalars['SignedSatoshis']['output'];
  netDebit: Scalars['SignedSatoshis']['output'];
};

export type BtcAccountAmountsInPeriod = {
  __typename?: 'BtcAccountAmountsInPeriod';
  amount: LayeredBtcAccountAmounts;
  closingBalance: LayeredBtcAccountAmounts;
  openingBalance: LayeredBtcAccountAmounts;
};

export type CashFlowStatement = {
  __typename?: 'CashFlowStatement';
  categories: Array<StatementCategory>;
  name: Scalars['String']['output'];
  total: AccountAmountsByCurrency;
};

export type ChartOfAccounts = {
  __typename?: 'ChartOfAccounts';
  categories: Array<StatementCategory>;
  name: Scalars['String']['output'];
};

export type Checking = {
  __typename?: 'Checking';
  pending: Scalars['UsdCents']['output'];
  settled: Scalars['UsdCents']['output'];
};

export type Collateral = {
  __typename?: 'Collateral';
  btcBalance: Scalars['Satoshis']['output'];
};

export enum CollateralAction {
  Add = 'ADD',
  Remove = 'REMOVE'
}

export enum CollateralizationState {
  FullyCollateralized = 'FULLY_COLLATERALIZED',
  NoCollateral = 'NO_COLLATERAL',
  UnderLiquidationThreshold = 'UNDER_LIQUIDATION_THRESHOLD',
  UnderMarginCallThreshold = 'UNDER_MARGIN_CALL_THRESHOLD'
}

export type Committee = {
  __typename?: 'Committee';
  committeeId: Scalars['UUID']['output'];
  createdAt: Scalars['Timestamp']['output'];
  currentMembers: Array<User>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type CommitteeAddUserInput = {
  committeeId: Scalars['UUID']['input'];
  userId: Scalars['UUID']['input'];
};

export type CommitteeAddUserPayload = {
  __typename?: 'CommitteeAddUserPayload';
  committee: Committee;
};

export type CommitteeConnection = {
  __typename?: 'CommitteeConnection';
  /** A list of edges. */
  edges: Array<CommitteeEdge>;
  /** A list of nodes. */
  nodes: Array<Committee>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CommitteeCreateInput = {
  name: Scalars['String']['input'];
};

export type CommitteeCreatePayload = {
  __typename?: 'CommitteeCreatePayload';
  committee: Committee;
};

/** An edge in a connection. */
export type CommitteeEdge = {
  __typename?: 'CommitteeEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Committee;
};

export type CommitteeRemoveUserInput = {
  committeeId: Scalars['UUID']['input'];
  userId: Scalars['UUID']['input'];
};

export type CommitteeRemoveUserPayload = {
  __typename?: 'CommitteeRemoveUserPayload';
  committee: Committee;
};

export type CommitteeThreshold = {
  __typename?: 'CommitteeThreshold';
  committee: Committee;
  threshold: Scalars['Int']['output'];
};

export type CreditFacility = {
  __typename?: 'CreditFacility';
  activatedAt?: Maybe<Scalars['Timestamp']['output']>;
  approvalProcess: ApprovalProcess;
  approvalProcessId: Scalars['UUID']['output'];
  balance: CreditFacilityBalance;
  canBeCompleted: Scalars['Boolean']['output'];
  collateral: Scalars['Satoshis']['output'];
  collateralizationState: CollateralizationState;
  createdAt: Scalars['Timestamp']['output'];
  creditFacilityId: Scalars['UUID']['output'];
  creditFacilityTerms: TermValues;
  currentCvl: FacilityCvl;
  customer: Customer;
  disbursals: Array<CreditFacilityDisbursal>;
  expiresAt?: Maybe<Scalars['Timestamp']['output']>;
  facilityAmount: Scalars['UsdCents']['output'];
  id: Scalars['ID']['output'];
  status: CreditFacilityStatus;
  subjectCanComplete: Scalars['Boolean']['output'];
  subjectCanInitiateDisbursal: Scalars['Boolean']['output'];
  subjectCanRecordPayment: Scalars['Boolean']['output'];
  subjectCanUpdateCollateral: Scalars['Boolean']['output'];
  transactions: Array<CreditFacilityHistoryEntry>;
};

export type CreditFacilityBalance = {
  __typename?: 'CreditFacilityBalance';
  collateral: Collateral;
  disbursed: Disbursed;
  facilityRemaining: FacilityRemaining;
  interest: Interest;
  outstanding: Outstanding;
};

export type CreditFacilityCollateralUpdateInput = {
  collateral: Scalars['Satoshis']['input'];
  creditFacilityId: Scalars['UUID']['input'];
};

export type CreditFacilityCollateralUpdatePayload = {
  __typename?: 'CreditFacilityCollateralUpdatePayload';
  creditFacility: CreditFacility;
};

export type CreditFacilityCollateralUpdated = {
  __typename?: 'CreditFacilityCollateralUpdated';
  action: CollateralAction;
  recordedAt: Scalars['Timestamp']['output'];
  satoshis: Scalars['Satoshis']['output'];
  txId: Scalars['UUID']['output'];
};

export type CreditFacilityCollateralizationUpdated = {
  __typename?: 'CreditFacilityCollateralizationUpdated';
  collateral: Scalars['Satoshis']['output'];
  outstandingDisbursal: Scalars['UsdCents']['output'];
  outstandingInterest: Scalars['UsdCents']['output'];
  price: Scalars['UsdCents']['output'];
  recordedAt: Scalars['Timestamp']['output'];
  state: CollateralizationState;
};

export type CreditFacilityCompleteInput = {
  creditFacilityId: Scalars['UUID']['input'];
};

export type CreditFacilityCompletePayload = {
  __typename?: 'CreditFacilityCompletePayload';
  creditFacility: CreditFacility;
};

export type CreditFacilityConnection = {
  __typename?: 'CreditFacilityConnection';
  /** A list of edges. */
  edges: Array<CreditFacilityEdge>;
  /** A list of nodes. */
  nodes: Array<CreditFacility>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CreditFacilityCreateInput = {
  customerId: Scalars['UUID']['input'];
  facility: Scalars['UsdCents']['input'];
  terms: TermsInput;
};

export type CreditFacilityCreatePayload = {
  __typename?: 'CreditFacilityCreatePayload';
  creditFacility: CreditFacility;
};

export type CreditFacilityDisbursal = {
  __typename?: 'CreditFacilityDisbursal';
  amount: Scalars['UsdCents']['output'];
  approvalProcess: ApprovalProcess;
  createdAt: Scalars['Timestamp']['output'];
  id: Scalars['ID']['output'];
  index: Scalars['DisbursalIdx']['output'];
  status: DisbursalStatus;
};

export type CreditFacilityDisbursalConfirmInput = {
  creditFacilityId: Scalars['UUID']['input'];
  disbursalIdx: Scalars['DisbursalIdx']['input'];
};

export type CreditFacilityDisbursalConfirmPayload = {
  __typename?: 'CreditFacilityDisbursalConfirmPayload';
  disbursal: CreditFacilityDisbursal;
};

export type CreditFacilityDisbursalExecuted = {
  __typename?: 'CreditFacilityDisbursalExecuted';
  cents: Scalars['UsdCents']['output'];
  recordedAt: Scalars['Timestamp']['output'];
  txId: Scalars['UUID']['output'];
};

export type CreditFacilityDisbursalInitiateInput = {
  amount: Scalars['UsdCents']['input'];
  creditFacilityId: Scalars['UUID']['input'];
};

export type CreditFacilityDisbursalInitiatePayload = {
  __typename?: 'CreditFacilityDisbursalInitiatePayload';
  disbursal: CreditFacilityDisbursal;
};

/** An edge in a connection. */
export type CreditFacilityEdge = {
  __typename?: 'CreditFacilityEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: CreditFacility;
};

export type CreditFacilityHistoryEntry = CreditFacilityCollateralUpdated | CreditFacilityCollateralizationUpdated | CreditFacilityDisbursalExecuted | CreditFacilityIncrementalPayment | CreditFacilityOrigination;

export type CreditFacilityIncrementalPayment = {
  __typename?: 'CreditFacilityIncrementalPayment';
  cents: Scalars['UsdCents']['output'];
  recordedAt: Scalars['Timestamp']['output'];
  txId: Scalars['UUID']['output'];
};

export type CreditFacilityOrigination = {
  __typename?: 'CreditFacilityOrigination';
  cents: Scalars['UsdCents']['output'];
  recordedAt: Scalars['Timestamp']['output'];
  txId: Scalars['UUID']['output'];
};

export type CreditFacilityPartialPaymentInput = {
  amount: Scalars['UsdCents']['input'];
  creditFacilityId: Scalars['UUID']['input'];
};

export type CreditFacilityPartialPaymentPayload = {
  __typename?: 'CreditFacilityPartialPaymentPayload';
  creditFacility: CreditFacility;
};

export enum CreditFacilityStatus {
  Active = 'ACTIVE',
  Closed = 'CLOSED',
  Expired = 'EXPIRED',
  PendingApproval = 'PENDING_APPROVAL',
  PendingCollateralization = 'PENDING_COLLATERALIZATION'
}

export type Customer = {
  __typename?: 'Customer';
  applicantId?: Maybe<Scalars['String']['output']>;
  balance: CustomerBalance;
  creditFacilities: Array<CreditFacility>;
  customerId: Scalars['UUID']['output'];
  deposits: Array<Deposit>;
  documents: Array<Document>;
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  level: KycLevel;
  status: AccountStatus;
  subjectCanCreateCreditFacility: Scalars['Boolean']['output'];
  subjectCanInitiateWithdrawal: Scalars['Boolean']['output'];
  subjectCanRecordDeposit: Scalars['Boolean']['output'];
  telegramId: Scalars['String']['output'];
  withdrawals: Array<Withdrawal>;
};

export type CustomerBalance = {
  __typename?: 'CustomerBalance';
  checking: Checking;
};

export type CustomerConnection = {
  __typename?: 'CustomerConnection';
  /** A list of edges. */
  edges: Array<CustomerEdge>;
  /** A list of nodes. */
  nodes: Array<Customer>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CustomerCreateInput = {
  email: Scalars['String']['input'];
  telegramId: Scalars['String']['input'];
};

export type CustomerCreatePayload = {
  __typename?: 'CustomerCreatePayload';
  customer: Customer;
};

/** An edge in a connection. */
export type CustomerEdge = {
  __typename?: 'CustomerEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Customer;
};

export type CustomerUpdateInput = {
  customerId: Scalars['UUID']['input'];
  telegramId: Scalars['String']['input'];
};

export type CustomerUpdatePayload = {
  __typename?: 'CustomerUpdatePayload';
  customer: Customer;
};

export type Deposit = {
  __typename?: 'Deposit';
  amount: Scalars['UsdCents']['output'];
  createdAt: Scalars['Timestamp']['output'];
  customer: Customer;
  customerId: Scalars['UUID']['output'];
  depositId: Scalars['UUID']['output'];
  id: Scalars['ID']['output'];
  reference: Scalars['String']['output'];
};

export type DepositConnection = {
  __typename?: 'DepositConnection';
  /** A list of edges. */
  edges: Array<DepositEdge>;
  /** A list of nodes. */
  nodes: Array<Deposit>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type DepositEdge = {
  __typename?: 'DepositEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Deposit;
};

export type DepositRecordInput = {
  amount: Scalars['UsdCents']['input'];
  customerId: Scalars['UUID']['input'];
  reference?: InputMaybe<Scalars['String']['input']>;
};

export type DepositRecordPayload = {
  __typename?: 'DepositRecordPayload';
  deposit: Deposit;
};

export enum DisbursalStatus {
  Approved = 'APPROVED',
  Confirmed = 'CONFIRMED',
  Denied = 'DENIED',
  New = 'NEW'
}

export type Disbursed = {
  __typename?: 'Disbursed';
  outstanding: Outstanding;
  total: Total;
};

export type Document = {
  __typename?: 'Document';
  customerId: Scalars['UUID']['output'];
  documentId: Scalars['UUID']['output'];
  filename: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  status: DocumentStatus;
};

export type DocumentArchiveInput = {
  documentId: Scalars['UUID']['input'];
};

export type DocumentArchivePayload = {
  __typename?: 'DocumentArchivePayload';
  document: Document;
};

export type DocumentCreateInput = {
  customerId: Scalars['UUID']['input'];
  file: Scalars['Upload']['input'];
};

export type DocumentCreatePayload = {
  __typename?: 'DocumentCreatePayload';
  document: Document;
};

export type DocumentDeleteInput = {
  documentId: Scalars['UUID']['input'];
};

export type DocumentDeletePayload = {
  __typename?: 'DocumentDeletePayload';
  deletedDocumentId: Scalars['UUID']['output'];
};

export type DocumentDownloadLinksGenerateInput = {
  documentId: Scalars['UUID']['input'];
};

export type DocumentDownloadLinksGeneratePayload = {
  __typename?: 'DocumentDownloadLinksGeneratePayload';
  documentId: Scalars['UUID']['output'];
  link: Scalars['String']['output'];
};

export enum DocumentStatus {
  Active = 'ACTIVE',
  Archived = 'ARCHIVED'
}

export type Duration = {
  __typename?: 'Duration';
  period: Period;
  units: Scalars['Int']['output'];
};

export type DurationInput = {
  period: Period;
  units: Scalars['Int']['input'];
};

export type FacilityCvl = {
  __typename?: 'FacilityCVL';
  disbursed: Scalars['CVLPct']['output'];
  total: Scalars['CVLPct']['output'];
};

export type FacilityRemaining = {
  __typename?: 'FacilityRemaining';
  usdBalance: Scalars['UsdCents']['output'];
};

export type GovernanceNavigationItems = {
  __typename?: 'GovernanceNavigationItems';
  approvalProcess: Scalars['Boolean']['output'];
  committee: Scalars['Boolean']['output'];
  policy: Scalars['Boolean']['output'];
};

export type Interest = {
  __typename?: 'Interest';
  outstanding: Outstanding;
  total: Total;
};

export enum InterestInterval {
  EndOfDay = 'END_OF_DAY',
  EndOfMonth = 'END_OF_MONTH'
}

export enum KycLevel {
  Advanced = 'ADVANCED',
  Basic = 'BASIC',
  NotKyced = 'NOT_KYCED'
}

export type LayeredBtcAccountAmounts = {
  __typename?: 'LayeredBtcAccountAmounts';
  all: BtcAccountAmounts;
  encumbrance: BtcAccountAmounts;
  pending: BtcAccountAmounts;
  settled: BtcAccountAmounts;
};

export type LayeredUsdAccountAmounts = {
  __typename?: 'LayeredUsdAccountAmounts';
  all: UsdAccountAmounts;
  encumbrance: UsdAccountAmounts;
  pending: UsdAccountAmounts;
  settled: UsdAccountAmounts;
};

export type Mutation = {
  __typename?: 'Mutation';
  approvalProcessApprove: ApprovalProcessApprovePayload;
  approvalProcessDeny: ApprovalProcessDenyPayload;
  committeeAddUser: CommitteeAddUserPayload;
  committeeCreate: CommitteeCreatePayload;
  committeeRemoveUser: CommitteeRemoveUserPayload;
  creditFacilityCollateralUpdate: CreditFacilityCollateralUpdatePayload;
  creditFacilityComplete: CreditFacilityCompletePayload;
  creditFacilityCreate: CreditFacilityCreatePayload;
  creditFacilityDisbursalConfirm: CreditFacilityDisbursalConfirmPayload;
  creditFacilityDisbursalInitiate: CreditFacilityDisbursalInitiatePayload;
  creditFacilityPartialPayment: CreditFacilityPartialPaymentPayload;
  customerCreate: CustomerCreatePayload;
  customerDocumentAttach: DocumentCreatePayload;
  customerUpdate: CustomerUpdatePayload;
  depositRecord: DepositRecordPayload;
  documentArchive: DocumentArchivePayload;
  documentDelete: DocumentDeletePayload;
  documentDownloadLinkGenerate: DocumentDownloadLinksGeneratePayload;
  policyAssignCommittee: PolicyAssignCommitteePayload;
  reportCreate: ReportCreatePayload;
  reportDownloadLinksGenerate: ReportDownloadLinksGeneratePayload;
  shareholderEquityAdd: SuccessPayload;
  sumsubPermalinkCreate: SumsubPermalinkCreatePayload;
  termsTemplateCreate: TermsTemplateCreatePayload;
  termsTemplateUpdate: TermsTemplateUpdatePayload;
  userAssignRole: UserAssignRolePayload;
  userCreate: UserCreatePayload;
  userRevokeRole: UserRevokeRolePayload;
  withdrawalCancel: WithdrawalCancelPayload;
  withdrawalConfirm: WithdrawalConfirmPayload;
  withdrawalInitiate: WithdrawalInitiatePayload;
};


export type MutationApprovalProcessApproveArgs = {
  input: ApprovalProcessApproveInput;
};


export type MutationApprovalProcessDenyArgs = {
  input: ApprovalProcessDenyInput;
};


export type MutationCommitteeAddUserArgs = {
  input: CommitteeAddUserInput;
};


export type MutationCommitteeCreateArgs = {
  input: CommitteeCreateInput;
};


export type MutationCommitteeRemoveUserArgs = {
  input: CommitteeRemoveUserInput;
};


export type MutationCreditFacilityCollateralUpdateArgs = {
  input: CreditFacilityCollateralUpdateInput;
};


export type MutationCreditFacilityCompleteArgs = {
  input: CreditFacilityCompleteInput;
};


export type MutationCreditFacilityCreateArgs = {
  input: CreditFacilityCreateInput;
};


export type MutationCreditFacilityDisbursalConfirmArgs = {
  input: CreditFacilityDisbursalConfirmInput;
};


export type MutationCreditFacilityDisbursalInitiateArgs = {
  input: CreditFacilityDisbursalInitiateInput;
};


export type MutationCreditFacilityPartialPaymentArgs = {
  input: CreditFacilityPartialPaymentInput;
};


export type MutationCustomerCreateArgs = {
  input: CustomerCreateInput;
};


export type MutationCustomerDocumentAttachArgs = {
  input: DocumentCreateInput;
};


export type MutationCustomerUpdateArgs = {
  input: CustomerUpdateInput;
};


export type MutationDepositRecordArgs = {
  input: DepositRecordInput;
};


export type MutationDocumentArchiveArgs = {
  input: DocumentArchiveInput;
};


export type MutationDocumentDeleteArgs = {
  input: DocumentDeleteInput;
};


export type MutationDocumentDownloadLinkGenerateArgs = {
  input: DocumentDownloadLinksGenerateInput;
};


export type MutationPolicyAssignCommitteeArgs = {
  input: PolicyAssignCommitteeInput;
};


export type MutationReportDownloadLinksGenerateArgs = {
  input: ReportDownloadLinksGenerateInput;
};


export type MutationShareholderEquityAddArgs = {
  input: ShareholderEquityAddInput;
};


export type MutationSumsubPermalinkCreateArgs = {
  input: SumsubPermalinkCreateInput;
};


export type MutationTermsTemplateCreateArgs = {
  input: TermsTemplateCreateInput;
};


export type MutationTermsTemplateUpdateArgs = {
  input: TermsTemplateUpdateInput;
};


export type MutationUserAssignRoleArgs = {
  input: UserAssignRoleInput;
};


export type MutationUserCreateArgs = {
  input: UserCreateInput;
};


export type MutationUserRevokeRoleArgs = {
  input: UserRevokeRoleInput;
};


export type MutationWithdrawalCancelArgs = {
  input: WithdrawalCancelInput;
};


export type MutationWithdrawalConfirmArgs = {
  input: WithdrawalConfirmInput;
};


export type MutationWithdrawalInitiateArgs = {
  input: WithdrawalInitiateInput;
};

export type Outstanding = {
  __typename?: 'Outstanding';
  usdBalance: Scalars['UsdCents']['output'];
};

/** Information about pagination in a connection */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export enum Period {
  Months = 'MONTHS'
}

export type Policy = {
  __typename?: 'Policy';
  approvalProcessType: ApprovalProcessType;
  id: Scalars['ID']['output'];
  policyId: Scalars['UUID']['output'];
  rules: ApprovalRules;
};

export type PolicyAssignCommitteeInput = {
  committeeId: Scalars['UUID']['input'];
  policyId: Scalars['UUID']['input'];
  threshold: Scalars['Int']['input'];
};

export type PolicyAssignCommitteePayload = {
  __typename?: 'PolicyAssignCommitteePayload';
  policy: Policy;
};

export type PolicyConnection = {
  __typename?: 'PolicyConnection';
  /** A list of edges. */
  edges: Array<PolicyEdge>;
  /** A list of nodes. */
  nodes: Array<Policy>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type PolicyEdge = {
  __typename?: 'PolicyEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Policy;
};

export type ProfitAndLossStatement = {
  __typename?: 'ProfitAndLossStatement';
  categories: Array<StatementCategory>;
  name: Scalars['String']['output'];
  net: AccountAmountsByCurrency;
};

export type Query = {
  __typename?: 'Query';
  accountSet?: Maybe<AccountSetAndSubAccounts>;
  approvalProcess?: Maybe<ApprovalProcess>;
  approvalProcesses: ApprovalProcessConnection;
  audit: AuditEntryConnection;
  balanceSheet?: Maybe<BalanceSheet>;
  cashFlowStatement?: Maybe<CashFlowStatement>;
  chartOfAccounts?: Maybe<ChartOfAccounts>;
  committee?: Maybe<Committee>;
  committees: CommitteeConnection;
  creditFacilities: CreditFacilityConnection;
  creditFacility?: Maybe<CreditFacility>;
  customer?: Maybe<Customer>;
  customerByEmail?: Maybe<Customer>;
  customers: CustomerConnection;
  deposit?: Maybe<Deposit>;
  deposits: DepositConnection;
  document?: Maybe<Document>;
  me: Subject;
  offBalanceSheetChartOfAccounts?: Maybe<ChartOfAccounts>;
  offBalanceSheetTrialBalance?: Maybe<TrialBalance>;
  policies: PolicyConnection;
  policy?: Maybe<Policy>;
  profitAndLossStatement?: Maybe<ProfitAndLossStatement>;
  realtimePrice: RealtimePrice;
  report?: Maybe<Report>;
  reports: Array<Report>;
  termsTemplate?: Maybe<TermsTemplate>;
  termsTemplates: Array<TermsTemplate>;
  trialBalance?: Maybe<TrialBalance>;
  user?: Maybe<User>;
  users: Array<User>;
  withdrawal?: Maybe<Withdrawal>;
  withdrawals: WithdrawalConnection;
};


export type QueryAccountSetArgs = {
  accountSetId: Scalars['UUID']['input'];
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
};


export type QueryApprovalProcessArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryApprovalProcessesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryAuditArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryBalanceSheetArgs = {
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
};


export type QueryCashFlowStatementArgs = {
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
};


export type QueryCommitteeArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryCommitteesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryCreditFacilitiesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryCreditFacilityArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryCustomerArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryCustomerByEmailArgs = {
  email: Scalars['String']['input'];
};


export type QueryCustomersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryDepositArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryDepositsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryDocumentArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryOffBalanceSheetTrialBalanceArgs = {
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
};


export type QueryPoliciesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryPolicyArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryProfitAndLossStatementArgs = {
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
};


export type QueryReportArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryTermsTemplateArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryTrialBalanceArgs = {
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
};


export type QueryUserArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryWithdrawalArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryWithdrawalsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};

export type RealtimePrice = {
  __typename?: 'RealtimePrice';
  usdCentsPerBtc: Scalars['UsdCents']['output'];
};

export type Report = {
  __typename?: 'Report';
  createdAt: Scalars['Timestamp']['output'];
  lastError?: Maybe<Scalars['String']['output']>;
  progress: ReportProgress;
  reportId: Scalars['UUID']['output'];
};

export type ReportCreatePayload = {
  __typename?: 'ReportCreatePayload';
  report: Report;
};

export type ReportDownloadLink = {
  __typename?: 'ReportDownloadLink';
  reportName: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type ReportDownloadLinksGenerateInput = {
  reportId: Scalars['UUID']['input'];
};

export type ReportDownloadLinksGeneratePayload = {
  __typename?: 'ReportDownloadLinksGeneratePayload';
  links: Array<ReportDownloadLink>;
  reportId: Scalars['UUID']['output'];
};

export enum ReportProgress {
  Complete = 'COMPLETE',
  Running = 'RUNNING'
}

export enum Role {
  Accountant = 'ACCOUNTANT',
  Admin = 'ADMIN',
  BankManager = 'BANK_MANAGER',
  Superuser = 'SUPERUSER'
}

export type ShareholderEquityAddInput = {
  amount: Scalars['UsdCents']['input'];
  reference: Scalars['String']['input'];
};

export type StatementCategory = {
  __typename?: 'StatementCategory';
  accounts: Array<AccountSetSubAccount>;
  amounts: AccountAmountsByCurrency;
  name: Scalars['String']['output'];
};

export type Subject = {
  __typename?: 'Subject';
  subjectCanCreateCustomer: Scalars['Boolean']['output'];
  subjectCanCreateTermsTemplate: Scalars['Boolean']['output'];
  subjectCanCreateUser: Scalars['Boolean']['output'];
  user: User;
  visibleNavigationItems: VisibleNavigationItems;
};

export type SuccessPayload = {
  __typename?: 'SuccessPayload';
  success: Scalars['Boolean']['output'];
};

export type SumsubPermalinkCreateInput = {
  customerId: Scalars['UUID']['input'];
};

export type SumsubPermalinkCreatePayload = {
  __typename?: 'SumsubPermalinkCreatePayload';
  url: Scalars['String']['output'];
};

export type System = {
  __typename?: 'System';
  name: Scalars['String']['output'];
};

export type SystemApproval = {
  __typename?: 'SystemApproval';
  autoApprove: Scalars['Boolean']['output'];
};

export type TermValues = {
  __typename?: 'TermValues';
  accrualInterval: InterestInterval;
  annualRate: Scalars['AnnualRatePct']['output'];
  duration: Duration;
  incurrenceInterval: InterestInterval;
  initialCvl: Scalars['CVLPct']['output'];
  liquidationCvl: Scalars['CVLPct']['output'];
  marginCallCvl: Scalars['CVLPct']['output'];
};

export type TermsInput = {
  accrualInterval: InterestInterval;
  annualRate: Scalars['AnnualRatePct']['input'];
  duration: DurationInput;
  incurrenceInterval: InterestInterval;
  initialCvl: Scalars['CVLPct']['input'];
  liquidationCvl: Scalars['CVLPct']['input'];
  marginCallCvl: Scalars['CVLPct']['input'];
};

export type TermsTemplate = {
  __typename?: 'TermsTemplate';
  createdAt: Scalars['Timestamp']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  subjectCanUpdateTermsTemplate: Scalars['Boolean']['output'];
  termsId: Scalars['UUID']['output'];
  values: TermValues;
};

export type TermsTemplateCreateInput = {
  accrualInterval: InterestInterval;
  annualRate: Scalars['AnnualRatePct']['input'];
  duration: DurationInput;
  incurrenceInterval: InterestInterval;
  initialCvl: Scalars['CVLPct']['input'];
  liquidationCvl: Scalars['CVLPct']['input'];
  marginCallCvl: Scalars['CVLPct']['input'];
  name: Scalars['String']['input'];
};

export type TermsTemplateCreatePayload = {
  __typename?: 'TermsTemplateCreatePayload';
  termsTemplate: TermsTemplate;
};

export type TermsTemplateUpdateInput = {
  accrualInterval: InterestInterval;
  annualRate: Scalars['AnnualRatePct']['input'];
  duration: DurationInput;
  id: Scalars['UUID']['input'];
  incurrenceInterval: InterestInterval;
  initialCvl: Scalars['CVLPct']['input'];
  liquidationCvl: Scalars['CVLPct']['input'];
  marginCallCvl: Scalars['CVLPct']['input'];
};

export type TermsTemplateUpdatePayload = {
  __typename?: 'TermsTemplateUpdatePayload';
  termsTemplate: TermsTemplate;
};

export type Total = {
  __typename?: 'Total';
  usdBalance: Scalars['UsdCents']['output'];
};

export type TrialBalance = {
  __typename?: 'TrialBalance';
  name: Scalars['String']['output'];
  subAccounts: Array<AccountSetSubAccount>;
  total: AccountAmountsByCurrency;
};

export type UsdAccountAmounts = {
  __typename?: 'UsdAccountAmounts';
  credit: Scalars['UsdCents']['output'];
  debit: Scalars['UsdCents']['output'];
  netCredit: Scalars['SignedUsdCents']['output'];
  netDebit: Scalars['SignedUsdCents']['output'];
};

export type UsdAccountAmountsInPeriod = {
  __typename?: 'UsdAccountAmountsInPeriod';
  amount: LayeredUsdAccountAmounts;
  closingBalance: LayeredUsdAccountAmounts;
  openingBalance: LayeredUsdAccountAmounts;
};

export type User = {
  __typename?: 'User';
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  roles: Array<Role>;
  subjectCanAssignRoleToUser: Scalars['Boolean']['output'];
  subjectCanRevokeRoleFromUser: Scalars['Boolean']['output'];
  userId: Scalars['UUID']['output'];
};

export type UserAssignRoleInput = {
  id: Scalars['UUID']['input'];
  role: Role;
};

export type UserAssignRolePayload = {
  __typename?: 'UserAssignRolePayload';
  user: User;
};

export type UserCreateInput = {
  email: Scalars['String']['input'];
};

export type UserCreatePayload = {
  __typename?: 'UserCreatePayload';
  user: User;
};

export type UserRevokeRoleInput = {
  id: Scalars['UUID']['input'];
  role: Role;
};

export type UserRevokeRolePayload = {
  __typename?: 'UserRevokeRolePayload';
  user: User;
};

export type VisibleNavigationItems = {
  __typename?: 'VisibleNavigationItems';
  audit: Scalars['Boolean']['output'];
  creditFacilities: Scalars['Boolean']['output'];
  customer: Scalars['Boolean']['output'];
  deposit: Scalars['Boolean']['output'];
  financials: Scalars['Boolean']['output'];
  governance: GovernanceNavigationItems;
  term: Scalars['Boolean']['output'];
  user: Scalars['Boolean']['output'];
  withdraw: Scalars['Boolean']['output'];
};

export type Withdrawal = {
  __typename?: 'Withdrawal';
  amount: Scalars['UsdCents']['output'];
  approvalProcess: ApprovalProcess;
  approvalProcessId: Scalars['UUID']['output'];
  createdAt: Scalars['Timestamp']['output'];
  customer: Customer;
  customerId: Scalars['UUID']['output'];
  id: Scalars['ID']['output'];
  reference: Scalars['String']['output'];
  status: WithdrawalStatus;
  subjectCanCancel: Scalars['Boolean']['output'];
  subjectCanConfirm: Scalars['Boolean']['output'];
  withdrawalId: Scalars['UUID']['output'];
};

export type WithdrawalCancelInput = {
  withdrawalId: Scalars['UUID']['input'];
};

export type WithdrawalCancelPayload = {
  __typename?: 'WithdrawalCancelPayload';
  withdrawal: Withdrawal;
};

export type WithdrawalConfirmInput = {
  withdrawalId: Scalars['UUID']['input'];
};

export type WithdrawalConfirmPayload = {
  __typename?: 'WithdrawalConfirmPayload';
  withdrawal: Withdrawal;
};

export type WithdrawalConnection = {
  __typename?: 'WithdrawalConnection';
  /** A list of edges. */
  edges: Array<WithdrawalEdge>;
  /** A list of nodes. */
  nodes: Array<Withdrawal>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type WithdrawalEdge = {
  __typename?: 'WithdrawalEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Withdrawal;
};

export type WithdrawalInitiateInput = {
  amount: Scalars['UsdCents']['input'];
  customerId: Scalars['UUID']['input'];
  reference?: InputMaybe<Scalars['String']['input']>;
};

export type WithdrawalInitiatePayload = {
  __typename?: 'WithdrawalInitiatePayload';
  withdrawal: Withdrawal;
};

export enum WithdrawalStatus {
  Cancelled = 'CANCELLED',
  Confirmed = 'CONFIRMED',
  Denied = 'DENIED',
  PendingApproval = 'PENDING_APPROVAL',
  PendingConfirmation = 'PENDING_CONFIRMATION'
}

export type AvatarQueryVariables = Exact<{ [key: string]: never; }>;


export type AvatarQuery = { __typename?: 'Query', me: { __typename?: 'Subject', user: { __typename?: 'User', userId: string, email: string, roles: Array<Role> } } };

export type CreateCustomerMutationVariables = Exact<{
  input: CustomerCreateInput;
}>;


export type CreateCustomerMutation = { __typename?: 'Mutation', customerCreate: { __typename?: 'CustomerCreatePayload', customer: { __typename?: 'Customer', customerId: string, email: string, status: AccountStatus, level: KycLevel, applicantId?: string | null } } };

export type CustomersQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type CustomersQuery = { __typename?: 'Query', customers: { __typename?: 'CustomerConnection', edges: Array<{ __typename?: 'CustomerEdge', cursor: string, node: { __typename?: 'Customer', id: string, customerId: string, status: AccountStatus, level: KycLevel, email: string, telegramId: string, applicantId?: string | null, balance: { __typename?: 'CustomerBalance', checking: { __typename?: 'Checking', settled: any, pending: any } } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };


export const AvatarDocument = gql`
    query Avatar {
  me {
    user {
      userId
      email
      roles
    }
  }
}
    `;

/**
 * __useAvatarQuery__
 *
 * To run a query within a React component, call `useAvatarQuery` and pass it any options that fit your needs.
 * When your component renders, `useAvatarQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAvatarQuery({
 *   variables: {
 *   },
 * });
 */
export function useAvatarQuery(baseOptions?: Apollo.QueryHookOptions<AvatarQuery, AvatarQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AvatarQuery, AvatarQueryVariables>(AvatarDocument, options);
      }
export function useAvatarLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AvatarQuery, AvatarQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AvatarQuery, AvatarQueryVariables>(AvatarDocument, options);
        }
export type AvatarQueryHookResult = ReturnType<typeof useAvatarQuery>;
export type AvatarLazyQueryHookResult = ReturnType<typeof useAvatarLazyQuery>;
export type AvatarQueryResult = Apollo.QueryResult<AvatarQuery, AvatarQueryVariables>;
export const CreateCustomerDocument = gql`
    mutation CreateCustomer($input: CustomerCreateInput!) {
  customerCreate(input: $input) {
    customer {
      customerId
      email
      status
      level
      applicantId
    }
  }
}
    `;
export type CreateCustomerMutationFn = Apollo.MutationFunction<CreateCustomerMutation, CreateCustomerMutationVariables>;

/**
 * __useCreateCustomerMutation__
 *
 * To run a mutation, you first call `useCreateCustomerMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCustomerMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCustomerMutation, { data, loading, error }] = useCreateCustomerMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCustomerMutation(baseOptions?: Apollo.MutationHookOptions<CreateCustomerMutation, CreateCustomerMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCustomerMutation, CreateCustomerMutationVariables>(CreateCustomerDocument, options);
      }
export type CreateCustomerMutationHookResult = ReturnType<typeof useCreateCustomerMutation>;
export type CreateCustomerMutationResult = Apollo.MutationResult<CreateCustomerMutation>;
export type CreateCustomerMutationOptions = Apollo.BaseMutationOptions<CreateCustomerMutation, CreateCustomerMutationVariables>;
export const CustomersDocument = gql`
    query Customers($first: Int!, $after: String) {
  customers(first: $first, after: $after) {
    edges {
      node {
        id
        customerId
        status
        level
        email
        telegramId
        applicantId
        balance {
          checking {
            settled
            pending
          }
        }
      }
      cursor
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useCustomersQuery__
 *
 * To run a query within a React component, call `useCustomersQuery` and pass it any options that fit your needs.
 * When your component renders, `useCustomersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCustomersQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useCustomersQuery(baseOptions: Apollo.QueryHookOptions<CustomersQuery, CustomersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CustomersQuery, CustomersQueryVariables>(CustomersDocument, options);
      }
export function useCustomersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CustomersQuery, CustomersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CustomersQuery, CustomersQueryVariables>(CustomersDocument, options);
        }
export type CustomersQueryHookResult = ReturnType<typeof useCustomersQuery>;
export type CustomersLazyQueryHookResult = ReturnType<typeof useCustomersLazyQuery>;
export type CustomersQueryResult = Apollo.QueryResult<CustomersQuery, CustomersQueryVariables>;