// this file is autogenerated by codegen
/* eslint-disable */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  AnnualRatePct: { input: any; output: any; }
  CVLPct: { input: any; output: any; }
  Satoshis: { input: any; output: any; }
  SignedSatoshis: { input: any; output: any; }
  SignedUsdCents: { input: any; output: any; }
  Timestamp: { input: any; output: any; }
  UUID: { input: string; output: string; }
  UsdCents: { input: any; output: any; }
};

export type AccountBalancesByCurrency = {
  __typename?: 'AccountBalancesByCurrency';
  btc: RangedBtcAccountBalances;
  usd: RangedUsdAccountBalances;
};

export type AccountSetAndSubAccountsWithBalance = {
  __typename?: 'AccountSetAndSubAccountsWithBalance';
  balance: AccountBalancesByCurrency;
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
  subAccounts: AccountSetSubAccountWithBalanceConnection;
};


export type AccountSetAndSubAccountsWithBalanceSubAccountsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};

export type AccountSetSubAccountWithBalance = AccountSetWithBalance | AccountWithBalance;

export type AccountSetSubAccountWithBalanceConnection = {
  __typename?: 'AccountSetSubAccountWithBalanceConnection';
  /** A list of edges. */
  edges: Array<AccountSetSubAccountWithBalanceEdge>;
  /** A list of nodes. */
  nodes: Array<AccountSetSubAccountWithBalance>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type AccountSetSubAccountWithBalanceEdge = {
  __typename?: 'AccountSetSubAccountWithBalanceEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: AccountSetSubAccountWithBalance;
};

export type AccountSetWithBalance = {
  __typename?: 'AccountSetWithBalance';
  balance: AccountBalancesByCurrency;
  hasSubAccounts: Scalars['Boolean']['output'];
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
};

export enum AccountStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE'
}

export type AccountWithBalance = {
  __typename?: 'AccountWithBalance';
  balance: AccountBalancesByCurrency;
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
};

export type AuditEntry = {
  __typename?: 'AuditEntry';
  action: Scalars['String']['output'];
  authorized: Scalars['Boolean']['output'];
  createdAt: Scalars['Timestamp']['output'];
  id: Scalars['ID']['output'];
  object: Scalars['String']['output'];
  subject: Subject;
};

export type AuditEntryConnection = {
  __typename?: 'AuditEntryConnection';
  /** A list of edges. */
  edges: Array<AuditEntryEdge>;
  /** A list of nodes. */
  nodes: Array<AuditEntry>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type AuditEntryEdge = {
  __typename?: 'AuditEntryEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: AuditEntry;
};

export type BalanceSheet = {
  __typename?: 'BalanceSheet';
  balance: AccountBalancesByCurrency;
  categories: Array<StatementCategoryWithBalance>;
  name: Scalars['String']['output'];
};

export type BtcAccountBalance = {
  __typename?: 'BtcAccountBalance';
  credit: Scalars['Satoshis']['output'];
  debit: Scalars['Satoshis']['output'];
  netCredit: Scalars['SignedSatoshis']['output'];
  netDebit: Scalars['SignedSatoshis']['output'];
};

export type CashFlowStatement = {
  __typename?: 'CashFlowStatement';
  balance: AccountBalancesByCurrency;
  categories: Array<StatementCategoryWithBalance>;
  name: Scalars['String']['output'];
};

export type ChartOfAccounts = {
  __typename?: 'ChartOfAccounts';
  categories: Array<StatementCategoryWithBalance>;
  name: Scalars['String']['output'];
};

export type Checking = {
  __typename?: 'Checking';
  pending: UsdBalance;
  settled: UsdBalance;
};

export type Collateral = {
  __typename?: 'Collateral';
  btcBalance: Scalars['Satoshis']['output'];
};

export type Customer = {
  __typename?: 'Customer';
  applicantId?: Maybe<Scalars['String']['output']>;
  balance: CustomerBalance;
  customerId: Scalars['UUID']['output'];
  deposits: Array<Deposit>;
  email: Scalars['String']['output'];
  level: KycLevel;
  loans: Array<Loan>;
  status: AccountStatus;
  withdrawals: Array<Withdrawal>;
};

export type CustomerBalance = {
  __typename?: 'CustomerBalance';
  checking: Checking;
};

export type CustomerConnection = {
  __typename?: 'CustomerConnection';
  /** A list of edges. */
  edges: Array<CustomerEdge>;
  /** A list of nodes. */
  nodes: Array<Customer>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type CustomerCreateInput = {
  email: Scalars['String']['input'];
};

export type CustomerCreatePayload = {
  __typename?: 'CustomerCreatePayload';
  customer: Customer;
};

/** An edge in a connection. */
export type CustomerEdge = {
  __typename?: 'CustomerEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Customer;
};

export type DefaultTermsUpdateInput = {
  annualRate: Scalars['AnnualRatePct']['input'];
  duration: DurationInput;
  initialCvl: Scalars['CVLPct']['input'];
  interval: InterestInterval;
  liquidationCvl: Scalars['CVLPct']['input'];
  marginCallCvl: Scalars['CVLPct']['input'];
};

export type DefaultTermsUpdatePayload = {
  __typename?: 'DefaultTermsUpdatePayload';
  terms: Terms;
};

export type Deposit = {
  __typename?: 'Deposit';
  amount: Scalars['UsdCents']['output'];
  customer?: Maybe<Customer>;
  customerId: Scalars['UUID']['output'];
  depositId: Scalars['UUID']['output'];
};

export type DepositConnection = {
  __typename?: 'DepositConnection';
  /** A list of edges. */
  edges: Array<DepositEdge>;
  /** A list of nodes. */
  nodes: Array<Deposit>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type DepositEdge = {
  __typename?: 'DepositEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Deposit;
};

export type DepositRecordInput = {
  amount: Scalars['UsdCents']['input'];
  customerId: Scalars['UUID']['input'];
  reference?: InputMaybe<Scalars['String']['input']>;
};

export type DepositRecordPayload = {
  __typename?: 'DepositRecordPayload';
  deposit: Deposit;
};

export type Duration = {
  __typename?: 'Duration';
  period: Period;
  units: Scalars['Int']['output'];
};

export type DurationInput = {
  period: Period;
  units: Scalars['Int']['input'];
};

export type InterestIncome = {
  __typename?: 'InterestIncome';
  usdBalance: Scalars['UsdCents']['output'];
};

export enum InterestInterval {
  EndOfMonth = 'END_OF_MONTH'
}

export enum KycLevel {
  One = 'ONE',
  Two = 'TWO',
  Zero = 'ZERO'
}

export type LayeredBtcAccountBalances = {
  __typename?: 'LayeredBtcAccountBalances';
  all: BtcAccountBalance;
  encumbrance: BtcAccountBalance;
  pending: BtcAccountBalance;
  settled: BtcAccountBalance;
};

export type LayeredUsdAccountBalances = {
  __typename?: 'LayeredUsdAccountBalances';
  all: UsdAccountBalance;
  encumbrance: UsdAccountBalance;
  pending: UsdAccountBalance;
  settled: UsdAccountBalance;
};

export type Loan = {
  __typename?: 'Loan';
  balance: LoanBalance;
  createdAt: Scalars['Timestamp']['output'];
  customer: Customer;
  id: Scalars['ID']['output'];
  loanId: Scalars['UUID']['output'];
  loanTerms: TermValues;
  status: LoanStatus;
};

export type LoanApproveInput = {
  collateral: Scalars['Satoshis']['input'];
  loanId: Scalars['UUID']['input'];
};

export type LoanApprovePayload = {
  __typename?: 'LoanApprovePayload';
  loan: Loan;
};

export type LoanBalance = {
  __typename?: 'LoanBalance';
  collateral: Collateral;
  interestIncurred: InterestIncome;
  outstanding: LoanOutstanding;
};

export type LoanConnection = {
  __typename?: 'LoanConnection';
  /** A list of edges. */
  edges: Array<LoanEdge>;
  /** A list of nodes. */
  nodes: Array<Loan>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type LoanCreateInput = {
  customerId: Scalars['UUID']['input'];
  desiredPrincipal: Scalars['UsdCents']['input'];
  loanTerms: TermsInput;
};

export type LoanCreatePayload = {
  __typename?: 'LoanCreatePayload';
  loan: Loan;
};

/** An edge in a connection. */
export type LoanEdge = {
  __typename?: 'LoanEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Loan;
};

export type LoanOutstanding = {
  __typename?: 'LoanOutstanding';
  usdBalance: Scalars['UsdCents']['output'];
};

export type LoanPartialPaymentInput = {
  amount: Scalars['UsdCents']['input'];
  loanId: Scalars['UUID']['input'];
};

export type LoanPartialPaymentPayload = {
  __typename?: 'LoanPartialPaymentPayload';
  loan: Loan;
};

export enum LoanStatus {
  Active = 'ACTIVE',
  Closed = 'CLOSED',
  New = 'NEW'
}

export type Mutation = {
  __typename?: 'Mutation';
  customerCreate: CustomerCreatePayload;
  defaultTermsUpdate: DefaultTermsUpdatePayload;
  depositRecord: DepositRecordPayload;
  loanApprove: LoanApprovePayload;
  loanCreate: LoanCreatePayload;
  loanPartialPayment: LoanPartialPaymentPayload;
  shareholderEquityAdd: SuccessPayload;
  sumsubPermalinkCreate: SumsubPermalinkCreatePayload;
  userAssignRole: UserAssignRolePayload;
  userCreate: UserCreatePayload;
  userRevokeRole: UserRevokeRolePayload;
  withdrawalCancel: WithdrawalCancelPayload;
  withdrawalConfirm: WithdrawalConfirmPayload;
  withdrawalInitiate: WithdrawalInitiatePayload;
};


export type MutationCustomerCreateArgs = {
  input: CustomerCreateInput;
};


export type MutationDefaultTermsUpdateArgs = {
  input: DefaultTermsUpdateInput;
};


export type MutationDepositRecordArgs = {
  input: DepositRecordInput;
};


export type MutationLoanApproveArgs = {
  input: LoanApproveInput;
};


export type MutationLoanCreateArgs = {
  input: LoanCreateInput;
};


export type MutationLoanPartialPaymentArgs = {
  input: LoanPartialPaymentInput;
};


export type MutationShareholderEquityAddArgs = {
  input: ShareholderEquityAddInput;
};


export type MutationSumsubPermalinkCreateArgs = {
  input: SumsubPermalinkCreateInput;
};


export type MutationUserAssignRoleArgs = {
  input: UserAssignRoleInput;
};


export type MutationUserCreateArgs = {
  input: UserCreateInput;
};


export type MutationUserRevokeRoleArgs = {
  input: UserRevokeRoleInput;
};


export type MutationWithdrawalCancelArgs = {
  input: WithdrawalCancelInput;
};


export type MutationWithdrawalConfirmArgs = {
  input: WithdrawalConfirmInput;
};


export type MutationWithdrawalInitiateArgs = {
  input: WithdrawalInitiateInput;
};

/** Information about pagination in a connection */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export enum Period {
  Months = 'MONTHS'
}

export type ProfitAndLossStatement = {
  __typename?: 'ProfitAndLossStatement';
  balance: AccountBalancesByCurrency;
  categories: Array<StatementCategoryWithBalance>;
  name: Scalars['String']['output'];
};

export type Query = {
  __typename?: 'Query';
  accountSetWithBalance?: Maybe<AccountSetAndSubAccountsWithBalance>;
  audit: AuditEntryConnection;
  balanceSheet?: Maybe<BalanceSheet>;
  cashFlowStatement?: Maybe<CashFlowStatement>;
  chartOfAccounts?: Maybe<ChartOfAccounts>;
  customer?: Maybe<Customer>;
  customerByEmail?: Maybe<Customer>;
  customers: CustomerConnection;
  defaultTerms?: Maybe<Terms>;
  deposit?: Maybe<Deposit>;
  deposits: DepositConnection;
  loan?: Maybe<Loan>;
  loans: LoanConnection;
  me: User;
  offBalanceSheetChartOfAccounts?: Maybe<ChartOfAccounts>;
  offBalanceSheetTrialBalance?: Maybe<TrialBalance>;
  profitAndLossStatement?: Maybe<ProfitAndLossStatement>;
  trialBalance?: Maybe<TrialBalance>;
  user?: Maybe<User>;
  users: Array<User>;
  withdrawal?: Maybe<Withdrawal>;
  withdrawals: WithdrawalConnection;
};


export type QueryAccountSetWithBalanceArgs = {
  accountSetId: Scalars['UUID']['input'];
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
};


export type QueryAuditArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryBalanceSheetArgs = {
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
};


export type QueryCashFlowStatementArgs = {
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
};


export type QueryCustomerArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryCustomerByEmailArgs = {
  email: Scalars['String']['input'];
};


export type QueryCustomersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryDepositArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryDepositsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryLoanArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryLoansArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};


export type QueryOffBalanceSheetTrialBalanceArgs = {
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
};


export type QueryProfitAndLossStatementArgs = {
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
};


export type QueryTrialBalanceArgs = {
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
};


export type QueryUserArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryWithdrawalArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryWithdrawalsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  first: Scalars['Int']['input'];
};

export type RangedBtcAccountBalances = {
  __typename?: 'RangedBtcAccountBalances';
  diff: LayeredBtcAccountBalances;
  end: LayeredBtcAccountBalances;
  start: LayeredBtcAccountBalances;
};

export type RangedUsdAccountBalances = {
  __typename?: 'RangedUsdAccountBalances';
  diff: LayeredUsdAccountBalances;
  end: LayeredUsdAccountBalances;
  start: LayeredUsdAccountBalances;
};

export enum Role {
  Admin = 'ADMIN',
  BankManager = 'BANK_MANAGER',
  Superuser = 'SUPERUSER'
}

export type ShareholderEquityAddInput = {
  amount: Scalars['UsdCents']['input'];
  reference: Scalars['String']['input'];
};

export type StatementCategoryWithBalance = {
  __typename?: 'StatementCategoryWithBalance';
  accounts: Array<AccountSetSubAccountWithBalance>;
  balance: AccountBalancesByCurrency;
  name: Scalars['String']['output'];
};

export type Subject = Customer | System | User;

export type SuccessPayload = {
  __typename?: 'SuccessPayload';
  success: Scalars['Boolean']['output'];
};

export type SumsubPermalinkCreateInput = {
  customerId: Scalars['String']['input'];
};

export type SumsubPermalinkCreatePayload = {
  __typename?: 'SumsubPermalinkCreatePayload';
  url: Scalars['String']['output'];
};

export type System = {
  __typename?: 'System';
  name: Scalars['String']['output'];
};

export type TermValues = {
  __typename?: 'TermValues';
  annualRate: Scalars['AnnualRatePct']['output'];
  duration: Duration;
  initialCvl: Scalars['CVLPct']['output'];
  interval: InterestInterval;
  liquidationCvl: Scalars['CVLPct']['output'];
  marginCallCvl: Scalars['CVLPct']['output'];
};

export type Terms = {
  __typename?: 'Terms';
  id: Scalars['ID']['output'];
  termsId: Scalars['UUID']['output'];
  values: TermValues;
};

export type TermsInput = {
  annualRate: Scalars['AnnualRatePct']['input'];
  duration: DurationInput;
  initialCvl: Scalars['CVLPct']['input'];
  interval: InterestInterval;
  liquidationCvl: Scalars['CVLPct']['input'];
  marginCallCvl: Scalars['CVLPct']['input'];
};

export type TrialBalance = {
  __typename?: 'TrialBalance';
  balance: AccountBalancesByCurrency;
  name: Scalars['String']['output'];
  subAccounts: Array<AccountSetSubAccountWithBalance>;
};

export type UsdAccountBalance = {
  __typename?: 'UsdAccountBalance';
  credit: Scalars['UsdCents']['output'];
  debit: Scalars['UsdCents']['output'];
  netCredit: Scalars['SignedUsdCents']['output'];
  netDebit: Scalars['SignedUsdCents']['output'];
};

export type UsdBalance = {
  __typename?: 'UsdBalance';
  usdBalance: Scalars['UsdCents']['output'];
};

export type User = {
  __typename?: 'User';
  email: Scalars['String']['output'];
  roles: Array<Role>;
  userId: Scalars['UUID']['output'];
};

export type UserAssignRoleInput = {
  id: Scalars['UUID']['input'];
  role: Role;
};

export type UserAssignRolePayload = {
  __typename?: 'UserAssignRolePayload';
  user: User;
};

export type UserCreateInput = {
  email: Scalars['String']['input'];
};

export type UserCreatePayload = {
  __typename?: 'UserCreatePayload';
  user: User;
};

export type UserRevokeRoleInput = {
  id: Scalars['UUID']['input'];
  role: Role;
};

export type UserRevokeRolePayload = {
  __typename?: 'UserRevokeRolePayload';
  user: User;
};

export type Withdrawal = {
  __typename?: 'Withdrawal';
  amount: Scalars['UsdCents']['output'];
  customer?: Maybe<Customer>;
  customerId: Scalars['UUID']['output'];
  status: WithdrawalStatus;
  withdrawalId: Scalars['UUID']['output'];
};

export type WithdrawalCancelInput = {
  withdrawalId: Scalars['UUID']['input'];
};

export type WithdrawalCancelPayload = {
  __typename?: 'WithdrawalCancelPayload';
  withdrawal: Withdrawal;
};

export type WithdrawalConfirmInput = {
  withdrawalId: Scalars['UUID']['input'];
};

export type WithdrawalConfirmPayload = {
  __typename?: 'WithdrawalConfirmPayload';
  withdrawal: Withdrawal;
};

export type WithdrawalConnection = {
  __typename?: 'WithdrawalConnection';
  /** A list of edges. */
  edges: Array<WithdrawalEdge>;
  /** A list of nodes. */
  nodes: Array<Withdrawal>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type WithdrawalEdge = {
  __typename?: 'WithdrawalEdge';
  /** A cursor for use in pagination */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge */
  node: Withdrawal;
};

export type WithdrawalInitiateInput = {
  amount: Scalars['UsdCents']['input'];
  customerId: Scalars['UUID']['input'];
  reference?: InputMaybe<Scalars['String']['input']>;
};

export type WithdrawalInitiatePayload = {
  __typename?: 'WithdrawalInitiatePayload';
  withdrawal: Withdrawal;
};

export enum WithdrawalStatus {
  Cancelled = 'CANCELLED',
  Confirmed = 'CONFIRMED',
  Initiated = 'INITIATED'
}

export type AuditLogsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type AuditLogsQuery = { __typename?: 'Query', audit: { __typename?: 'AuditEntryConnection', edges: Array<{ __typename?: 'AuditEntryEdge', cursor: string, node: { __typename?: 'AuditEntry', id: string, object: string, action: string, authorized: boolean, createdAt: any, subject: { __typename?: 'Customer', customerId: string, email: string, status: AccountStatus, level: KycLevel, applicantId?: string | null } | { __typename?: 'System', name: string } | { __typename?: 'User', userId: string, email: string, roles: Array<Role> } } }>, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean, endCursor?: string | null } } };

export type BalanceSheetQueryVariables = Exact<{
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
}>;


export type BalanceSheetQuery = { __typename?: 'Query', balanceSheet?: { __typename?: 'BalanceSheet', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } }, categories: Array<{ __typename?: 'StatementCategoryWithBalance', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } }, accounts: Array<{ __typename: 'AccountSetWithBalance', id: string, name: string, hasSubAccounts: boolean, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } } } | { __typename: 'AccountWithBalance', id: string, name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } } }> }> } | null };

export type ChartOfAccountsAccountSetQueryVariables = Exact<{
  accountSetId: Scalars['UUID']['input'];
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
}>;


export type ChartOfAccountsAccountSetQuery = { __typename?: 'Query', accountSetWithBalance?: { __typename?: 'AccountSetAndSubAccountsWithBalance', id: string, name: string, subAccounts: { __typename?: 'AccountSetSubAccountWithBalanceConnection', edges: Array<{ __typename?: 'AccountSetSubAccountWithBalanceEdge', cursor: string, node: { __typename: 'AccountSetWithBalance', id: string, name: string, hasSubAccounts: boolean } | { __typename: 'AccountWithBalance', id: string, name: string } }>, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean } } } | null };

export type GetOnBalanceSheetChartOfAccountsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetOnBalanceSheetChartOfAccountsQuery = { __typename?: 'Query', chartOfAccounts?: { __typename?: 'ChartOfAccounts', name: string, categories: Array<{ __typename?: 'StatementCategoryWithBalance', name: string, accounts: Array<{ __typename: 'AccountSetWithBalance', id: string, name: string, hasSubAccounts: boolean } | { __typename: 'AccountWithBalance', id: string, name: string }> }> } | null };

export type GetOffBalanceSheetChartOfAccountsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetOffBalanceSheetChartOfAccountsQuery = { __typename?: 'Query', offBalanceSheetChartOfAccounts?: { __typename?: 'ChartOfAccounts', name: string, categories: Array<{ __typename?: 'StatementCategoryWithBalance', name: string, accounts: Array<{ __typename: 'AccountSetWithBalance', id: string, name: string, hasSubAccounts: boolean } | { __typename: 'AccountWithBalance', id: string, name: string }> }> } | null };

export type GetDepositsForCustomerQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetDepositsForCustomerQuery = { __typename?: 'Query', customer?: { __typename?: 'Customer', customerId: string, deposits: Array<{ __typename?: 'Deposit', customerId: string, depositId: string, amount: any }> } | null };

export type SumsubPermalinkCreateMutationVariables = Exact<{
  input: SumsubPermalinkCreateInput;
}>;


export type SumsubPermalinkCreateMutation = { __typename?: 'Mutation', sumsubPermalinkCreate: { __typename?: 'SumsubPermalinkCreatePayload', url: string } };

export type GetWithdrawalsForCustomerQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetWithdrawalsForCustomerQuery = { __typename?: 'Query', customer?: { __typename?: 'Customer', customerId: string, withdrawals: Array<{ __typename?: 'Withdrawal', status: WithdrawalStatus, customerId: string, withdrawalId: string, amount: any, customer?: { __typename?: 'Customer', customerId: string, email: string } | null }> } | null };

export type GetCustomerByCustomerEmailQueryVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type GetCustomerByCustomerEmailQuery = { __typename?: 'Query', customerByEmail?: { __typename?: 'Customer', customerId: string, email: string, status: AccountStatus, level: KycLevel, applicantId?: string | null, balance: { __typename?: 'CustomerBalance', checking: { __typename?: 'Checking', settled: { __typename?: 'UsdBalance', usdBalance: any }, pending: { __typename?: 'UsdBalance', usdBalance: any } } } } | null };

export type DepositsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type DepositsQuery = { __typename?: 'Query', deposits: { __typename?: 'DepositConnection', pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, nodes: Array<{ __typename?: 'Deposit', customerId: string, depositId: string, amount: any, customer?: { __typename?: 'Customer', customerId: string, email: string } | null }> } };

export type DepositQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type DepositQuery = { __typename?: 'Query', deposit?: { __typename?: 'Deposit', customerId: string, depositId: string, amount: any, customer?: { __typename?: 'Customer', customerId: string, email: string, applicantId?: string | null } | null } | null };

export type LoansQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type LoansQuery = { __typename?: 'Query', loans: { __typename?: 'LoanConnection', edges: Array<{ __typename?: 'LoanEdge', cursor: string, node: { __typename?: 'Loan', loanId: string, status: LoanStatus, createdAt: any, customer: { __typename?: 'Customer', customerId: string, email: string }, balance: { __typename?: 'LoanBalance', outstanding: { __typename?: 'LoanOutstanding', usdBalance: any }, interestIncurred: { __typename?: 'InterestIncome', usdBalance: any } } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, hasNextPage: boolean } } };

export type PnlAccountSetWithBalanceQueryVariables = Exact<{
  accountSetId: Scalars['UUID']['input'];
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
}>;


export type PnlAccountSetWithBalanceQuery = { __typename?: 'Query', accountSetWithBalance?: { __typename?: 'AccountSetAndSubAccountsWithBalance', id: string, name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } }, subAccounts: { __typename?: 'AccountSetSubAccountWithBalanceConnection', edges: Array<{ __typename?: 'AccountSetSubAccountWithBalanceEdge', cursor: string, node: { __typename: 'AccountSetWithBalance', id: string, name: string, hasSubAccounts: boolean, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } } } | { __typename: 'AccountWithBalance', id: string, name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } } } }>, pageInfo: { __typename?: 'PageInfo', hasNextPage: boolean } } } | null };

export type ProfitAndLossStatementQueryVariables = Exact<{
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
}>;


export type ProfitAndLossStatementQuery = { __typename?: 'Query', profitAndLossStatement?: { __typename?: 'ProfitAndLossStatement', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } }, categories: Array<{ __typename?: 'StatementCategoryWithBalance', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } }, accounts: Array<{ __typename: 'AccountSetWithBalance', id: string, name: string, hasSubAccounts: boolean, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } } } | { __typename: 'AccountWithBalance', id: string, name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } } }> }> } | null };

export type DefaultTermsQueryVariables = Exact<{ [key: string]: never; }>;


export type DefaultTermsQuery = { __typename?: 'Query', defaultTerms?: { __typename?: 'Terms', id: string, termsId: string, values: { __typename?: 'TermValues', annualRate: any, interval: InterestInterval, liquidationCvl: any, marginCallCvl: any, initialCvl: any, duration: { __typename?: 'Duration', period: Period, units: number } } } | null };

export type GetOnBalanceSheetTrialBalanceQueryVariables = Exact<{
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
}>;


export type GetOnBalanceSheetTrialBalanceQuery = { __typename?: 'Query', trialBalance?: { __typename?: 'TrialBalance', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } }, subAccounts: Array<{ __typename?: 'AccountSetWithBalance', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } } } | { __typename?: 'AccountWithBalance', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } } }> } | null };

export type GetOffBalanceSheetTrialBalanceQueryVariables = Exact<{
  from: Scalars['Timestamp']['input'];
  until?: InputMaybe<Scalars['Timestamp']['input']>;
}>;


export type GetOffBalanceSheetTrialBalanceQuery = { __typename?: 'Query', offBalanceSheetTrialBalance?: { __typename?: 'TrialBalance', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } }, subAccounts: Array<{ __typename?: 'AccountSetWithBalance', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } } } | { __typename?: 'AccountWithBalance', name: string, balance: { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } } }> } | null };

export type BalancesByCurrencyFragment = { __typename?: 'AccountBalancesByCurrency', btc: { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } }, usd: { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } } };

export type RangedBtcBalancesFragment = { __typename?: 'RangedBtcAccountBalances', start: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } };

export type RangedUsdBalancesFragment = { __typename?: 'RangedUsdAccountBalances', start: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, end: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } }, diff: { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } } };

export type BtcBalancesFragment = { __typename?: 'LayeredBtcAccountBalances', all: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'BtcAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } };

export type UsdBalancesFragment = { __typename?: 'LayeredUsdAccountBalances', all: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, settled: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, pending: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any }, encumbrance: { __typename?: 'UsdAccountBalance', debit: any, credit: any, netDebit: any, netCredit: any } };

export type UsersQueryVariables = Exact<{ [key: string]: never; }>;


export type UsersQuery = { __typename?: 'Query', users: Array<{ __typename?: 'User', userId: string, email: string, roles: Array<Role> }> };

export type UserAssignRoleMutationVariables = Exact<{
  input: UserAssignRoleInput;
}>;


export type UserAssignRoleMutation = { __typename?: 'Mutation', userAssignRole: { __typename?: 'UserAssignRolePayload', user: { __typename?: 'User', userId: string, email: string, roles: Array<Role> } } };

export type UserRevokeRoleMutationVariables = Exact<{
  input: UserRevokeRoleInput;
}>;


export type UserRevokeRoleMutation = { __typename?: 'Mutation', userRevokeRole: { __typename?: 'UserRevokeRolePayload', user: { __typename?: 'User', userId: string, email: string, roles: Array<Role> } } };

export type WithdrawalsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type WithdrawalsQuery = { __typename?: 'Query', withdrawals: { __typename?: 'WithdrawalConnection', pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, nodes: Array<{ __typename?: 'Withdrawal', customerId: string, withdrawalId: string, amount: any, status: WithdrawalStatus, customer?: { __typename?: 'Customer', customerId: string, email: string } | null }> } };

export type WithdrawalQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type WithdrawalQuery = { __typename?: 'Query', withdrawal?: { __typename?: 'Withdrawal', customerId: string, withdrawalId: string, amount: any, status: WithdrawalStatus, customer?: { __typename?: 'Customer', customerId: string, email: string, applicantId?: string | null } | null } | null };

export type CustomerCreateMutationVariables = Exact<{
  input: CustomerCreateInput;
}>;


export type CustomerCreateMutation = { __typename?: 'Mutation', customerCreate: { __typename?: 'CustomerCreatePayload', customer: { __typename?: 'Customer', customerId: string, email: string, status: AccountStatus, level: KycLevel, applicantId?: string | null } } };

export type RecordDepositMutationVariables = Exact<{
  input: DepositRecordInput;
}>;


export type RecordDepositMutation = { __typename?: 'Mutation', depositRecord: { __typename?: 'DepositRecordPayload', deposit: { __typename?: 'Deposit', depositId: string, amount: any, customer?: { __typename?: 'Customer', customerId: string, balance: { __typename?: 'CustomerBalance', checking: { __typename?: 'Checking', settled: { __typename?: 'UsdBalance', usdBalance: any } } } } | null } } };

export type WithdrawalConfirmMutationVariables = Exact<{
  input: WithdrawalConfirmInput;
}>;


export type WithdrawalConfirmMutation = { __typename?: 'Mutation', withdrawalConfirm: { __typename?: 'WithdrawalConfirmPayload', withdrawal: { __typename?: 'Withdrawal', withdrawalId: string, amount: any, customer?: { __typename?: 'Customer', customerId: string, balance: { __typename?: 'CustomerBalance', checking: { __typename?: 'Checking', settled: { __typename?: 'UsdBalance', usdBalance: any }, pending: { __typename?: 'UsdBalance', usdBalance: any } } } } | null } } };

export type WithdrawalInitiateMutationVariables = Exact<{
  input: WithdrawalInitiateInput;
}>;


export type WithdrawalInitiateMutation = { __typename?: 'Mutation', withdrawalInitiate: { __typename?: 'WithdrawalInitiatePayload', withdrawal: { __typename?: 'Withdrawal', withdrawalId: string, amount: any, customer?: { __typename?: 'Customer', customerId: string, balance: { __typename?: 'CustomerBalance', checking: { __typename?: 'Checking', settled: { __typename?: 'UsdBalance', usdBalance: any }, pending: { __typename?: 'UsdBalance', usdBalance: any } } } } | null } } };

export type LoanApproveMutationVariables = Exact<{
  input: LoanApproveInput;
}>;


export type LoanApproveMutation = { __typename?: 'Mutation', loanApprove: { __typename?: 'LoanApprovePayload', loan: { __typename?: 'Loan', id: string, loanId: string, createdAt: any, balance: { __typename?: 'LoanBalance', collateral: { __typename?: 'Collateral', btcBalance: any }, outstanding: { __typename?: 'LoanOutstanding', usdBalance: any }, interestIncurred: { __typename?: 'InterestIncome', usdBalance: any } } } } };

export type LoanCreateMutationVariables = Exact<{
  input: LoanCreateInput;
}>;


export type LoanCreateMutation = { __typename?: 'Mutation', loanCreate: { __typename?: 'LoanCreatePayload', loan: { __typename?: 'Loan', id: string, loanId: string, createdAt: any, balance: { __typename?: 'LoanBalance', collateral: { __typename?: 'Collateral', btcBalance: any }, outstanding: { __typename?: 'LoanOutstanding', usdBalance: any }, interestIncurred: { __typename?: 'InterestIncome', usdBalance: any } }, loanTerms: { __typename?: 'TermValues', annualRate: any, interval: InterestInterval, liquidationCvl: any, marginCallCvl: any, initialCvl: any, duration: { __typename?: 'Duration', period: Period, units: number } } } } };

export type LoanPartialPaymentMutationVariables = Exact<{
  input: LoanPartialPaymentInput;
}>;


export type LoanPartialPaymentMutation = { __typename?: 'Mutation', loanPartialPayment: { __typename?: 'LoanPartialPaymentPayload', loan: { __typename?: 'Loan', id: string, loanId: string, createdAt: any, balance: { __typename?: 'LoanBalance', collateral: { __typename?: 'Collateral', btcBalance: any }, outstanding: { __typename?: 'LoanOutstanding', usdBalance: any }, interestIncurred: { __typename?: 'InterestIncome', usdBalance: any } } } } };

export type DefaultTermsUpdateMutationVariables = Exact<{
  input: DefaultTermsUpdateInput;
}>;


export type DefaultTermsUpdateMutation = { __typename?: 'Mutation', defaultTermsUpdate: { __typename?: 'DefaultTermsUpdatePayload', terms: { __typename?: 'Terms', id: string, termsId: string, values: { __typename?: 'TermValues', annualRate: any, interval: InterestInterval, liquidationCvl: any, marginCallCvl: any, initialCvl: any, duration: { __typename?: 'Duration', period: Period, units: number } } } } };

export type UserCreateMutationVariables = Exact<{
  input: UserCreateInput;
}>;


export type UserCreateMutation = { __typename?: 'Mutation', userCreate: { __typename?: 'UserCreatePayload', user: { __typename?: 'User', userId: string, email: string, roles: Array<Role> } } };

export type WithdrawalCancelMutationVariables = Exact<{
  input: WithdrawalCancelInput;
}>;


export type WithdrawalCancelMutation = { __typename?: 'Mutation', withdrawalCancel: { __typename?: 'WithdrawalCancelPayload', withdrawal: { __typename?: 'Withdrawal', withdrawalId: string, amount: any, customer?: { __typename?: 'Customer', customerId: string, balance: { __typename?: 'CustomerBalance', checking: { __typename?: 'Checking', settled: { __typename?: 'UsdBalance', usdBalance: any }, pending: { __typename?: 'UsdBalance', usdBalance: any } } } } | null } } };

export type GetLoanDetailsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetLoanDetailsQuery = { __typename?: 'Query', loan?: { __typename?: 'Loan', id: string, loanId: string, createdAt: any, status: LoanStatus, customer: { __typename?: 'Customer', customerId: string }, balance: { __typename?: 'LoanBalance', collateral: { __typename?: 'Collateral', btcBalance: any }, outstanding: { __typename?: 'LoanOutstanding', usdBalance: any }, interestIncurred: { __typename?: 'InterestIncome', usdBalance: any } }, loanTerms: { __typename?: 'TermValues', annualRate: any, interval: InterestInterval, liquidationCvl: any, marginCallCvl: any, initialCvl: any, duration: { __typename?: 'Duration', period: Period, units: number } } } | null };

export type GetLoansForCustomerQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetLoansForCustomerQuery = { __typename?: 'Query', customer?: { __typename?: 'Customer', customerId: string, loans: Array<{ __typename?: 'Loan', id: string, loanId: string, createdAt: any, status: LoanStatus, loanTerms: { __typename?: 'TermValues', annualRate: any, interval: InterestInterval, liquidationCvl: any, marginCallCvl: any, initialCvl: any, duration: { __typename?: 'Duration', period: Period, units: number } }, balance: { __typename?: 'LoanBalance', collateral: { __typename?: 'Collateral', btcBalance: any }, outstanding: { __typename?: 'LoanOutstanding', usdBalance: any }, interestIncurred: { __typename?: 'InterestIncome', usdBalance: any } } }> } | null };

export type GetCustomerByCustomerIdQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;


export type GetCustomerByCustomerIdQuery = { __typename?: 'Query', customer?: { __typename?: 'Customer', customerId: string, email: string, status: AccountStatus, level: KycLevel, applicantId?: string | null, balance: { __typename?: 'CustomerBalance', checking: { __typename?: 'Checking', settled: { __typename?: 'UsdBalance', usdBalance: any }, pending: { __typename?: 'UsdBalance', usdBalance: any } } } } | null };

export type CustomersQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['String']['input']>;
}>;


export type CustomersQuery = { __typename?: 'Query', customers: { __typename?: 'CustomerConnection', nodes: Array<{ __typename?: 'Customer', customerId: string, email: string, balance: { __typename?: 'CustomerBalance', checking: { __typename?: 'Checking', settled: { __typename?: 'UsdBalance', usdBalance: any }, pending: { __typename?: 'UsdBalance', usdBalance: any } } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string | null, startCursor?: string | null, hasNextPage: boolean, hasPreviousPage: boolean } } };

export const BtcBalancesFragmentDoc = gql`
    fragment btcBalances on LayeredBtcAccountBalances {
  all {
    debit
    credit
    netDebit
    netCredit
  }
  settled {
    debit
    credit
    netDebit
    netCredit
  }
  pending {
    debit
    credit
    netDebit
    netCredit
  }
  encumbrance {
    debit
    credit
    netDebit
    netCredit
  }
}
    `;
export const RangedBtcBalancesFragmentDoc = gql`
    fragment rangedBtcBalances on RangedBtcAccountBalances {
  start {
    ...btcBalances
  }
  end {
    ...btcBalances
  }
  diff {
    ...btcBalances
  }
}
    ${BtcBalancesFragmentDoc}`;
export const UsdBalancesFragmentDoc = gql`
    fragment usdBalances on LayeredUsdAccountBalances {
  all {
    debit
    credit
    netDebit
    netCredit
  }
  settled {
    debit
    credit
    netDebit
    netCredit
  }
  pending {
    debit
    credit
    netDebit
    netCredit
  }
  encumbrance {
    debit
    credit
    netDebit
    netCredit
  }
}
    `;
export const RangedUsdBalancesFragmentDoc = gql`
    fragment rangedUsdBalances on RangedUsdAccountBalances {
  start {
    ...usdBalances
  }
  end {
    ...usdBalances
  }
  diff {
    ...usdBalances
  }
}
    ${UsdBalancesFragmentDoc}`;
export const BalancesByCurrencyFragmentDoc = gql`
    fragment balancesByCurrency on AccountBalancesByCurrency {
  btc: btc {
    ...rangedBtcBalances
  }
  usd: usd {
    ...rangedUsdBalances
  }
}
    ${RangedBtcBalancesFragmentDoc}
${RangedUsdBalancesFragmentDoc}`;
export const AuditLogsDocument = gql`
    query AuditLogs($first: Int!, $after: String) {
  audit(first: $first, after: $after) {
    edges {
      cursor
      node {
        id
        subject {
          ... on User {
            userId
            email
            roles
          }
          ... on Customer {
            customerId
            email
            status
            level
            applicantId
          }
          ... on System {
            name
          }
        }
        object
        action
        authorized
        createdAt
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAuditLogsQuery__
 *
 * To run a query within a React component, call `useAuditLogsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAuditLogsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAuditLogsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAuditLogsQuery(baseOptions: Apollo.QueryHookOptions<AuditLogsQuery, AuditLogsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AuditLogsQuery, AuditLogsQueryVariables>(AuditLogsDocument, options);
      }
export function useAuditLogsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AuditLogsQuery, AuditLogsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AuditLogsQuery, AuditLogsQueryVariables>(AuditLogsDocument, options);
        }
export type AuditLogsQueryHookResult = ReturnType<typeof useAuditLogsQuery>;
export type AuditLogsLazyQueryHookResult = ReturnType<typeof useAuditLogsLazyQuery>;
export type AuditLogsQueryResult = Apollo.QueryResult<AuditLogsQuery, AuditLogsQueryVariables>;
export const BalanceSheetDocument = gql`
    query BalanceSheet($from: Timestamp!, $until: Timestamp) {
  balanceSheet(from: $from, until: $until) {
    name
    balance {
      ...balancesByCurrency
    }
    categories {
      name
      balance {
        ...balancesByCurrency
      }
      accounts {
        ... on AccountWithBalance {
          __typename
          id
          name
          balance {
            ...balancesByCurrency
          }
        }
        ... on AccountSetWithBalance {
          __typename
          id
          name
          hasSubAccounts
          balance {
            ...balancesByCurrency
          }
        }
      }
    }
  }
}
    ${BalancesByCurrencyFragmentDoc}`;

/**
 * __useBalanceSheetQuery__
 *
 * To run a query within a React component, call `useBalanceSheetQuery` and pass it any options that fit your needs.
 * When your component renders, `useBalanceSheetQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBalanceSheetQuery({
 *   variables: {
 *      from: // value for 'from'
 *      until: // value for 'until'
 *   },
 * });
 */
export function useBalanceSheetQuery(baseOptions: Apollo.QueryHookOptions<BalanceSheetQuery, BalanceSheetQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<BalanceSheetQuery, BalanceSheetQueryVariables>(BalanceSheetDocument, options);
      }
export function useBalanceSheetLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BalanceSheetQuery, BalanceSheetQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<BalanceSheetQuery, BalanceSheetQueryVariables>(BalanceSheetDocument, options);
        }
export type BalanceSheetQueryHookResult = ReturnType<typeof useBalanceSheetQuery>;
export type BalanceSheetLazyQueryHookResult = ReturnType<typeof useBalanceSheetLazyQuery>;
export type BalanceSheetQueryResult = Apollo.QueryResult<BalanceSheetQuery, BalanceSheetQueryVariables>;
export const ChartOfAccountsAccountSetDocument = gql`
    query ChartOfAccountsAccountSet($accountSetId: UUID!, $first: Int!, $after: String, $from: Timestamp!, $until: Timestamp) {
  accountSetWithBalance(accountSetId: $accountSetId, from: $from, until: $until) {
    id
    name
    subAccounts(first: $first, after: $after) {
      edges {
        cursor
        node {
          __typename
          ... on AccountWithBalance {
            __typename
            id
            name
          }
          ... on AccountSetWithBalance {
            __typename
            id
            name
            hasSubAccounts
          }
        }
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}
    `;

/**
 * __useChartOfAccountsAccountSetQuery__
 *
 * To run a query within a React component, call `useChartOfAccountsAccountSetQuery` and pass it any options that fit your needs.
 * When your component renders, `useChartOfAccountsAccountSetQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useChartOfAccountsAccountSetQuery({
 *   variables: {
 *      accountSetId: // value for 'accountSetId'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *      from: // value for 'from'
 *      until: // value for 'until'
 *   },
 * });
 */
export function useChartOfAccountsAccountSetQuery(baseOptions: Apollo.QueryHookOptions<ChartOfAccountsAccountSetQuery, ChartOfAccountsAccountSetQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ChartOfAccountsAccountSetQuery, ChartOfAccountsAccountSetQueryVariables>(ChartOfAccountsAccountSetDocument, options);
      }
export function useChartOfAccountsAccountSetLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ChartOfAccountsAccountSetQuery, ChartOfAccountsAccountSetQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ChartOfAccountsAccountSetQuery, ChartOfAccountsAccountSetQueryVariables>(ChartOfAccountsAccountSetDocument, options);
        }
export type ChartOfAccountsAccountSetQueryHookResult = ReturnType<typeof useChartOfAccountsAccountSetQuery>;
export type ChartOfAccountsAccountSetLazyQueryHookResult = ReturnType<typeof useChartOfAccountsAccountSetLazyQuery>;
export type ChartOfAccountsAccountSetQueryResult = Apollo.QueryResult<ChartOfAccountsAccountSetQuery, ChartOfAccountsAccountSetQueryVariables>;
export const GetOnBalanceSheetChartOfAccountsDocument = gql`
    query GetOnBalanceSheetChartOfAccounts {
  chartOfAccounts {
    name
    categories {
      name
      accounts {
        __typename
        ... on AccountWithBalance {
          id
          name
        }
        ... on AccountSetWithBalance {
          id
          name
          hasSubAccounts
        }
      }
    }
  }
}
    `;

/**
 * __useGetOnBalanceSheetChartOfAccountsQuery__
 *
 * To run a query within a React component, call `useGetOnBalanceSheetChartOfAccountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOnBalanceSheetChartOfAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOnBalanceSheetChartOfAccountsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetOnBalanceSheetChartOfAccountsQuery(baseOptions?: Apollo.QueryHookOptions<GetOnBalanceSheetChartOfAccountsQuery, GetOnBalanceSheetChartOfAccountsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOnBalanceSheetChartOfAccountsQuery, GetOnBalanceSheetChartOfAccountsQueryVariables>(GetOnBalanceSheetChartOfAccountsDocument, options);
      }
export function useGetOnBalanceSheetChartOfAccountsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOnBalanceSheetChartOfAccountsQuery, GetOnBalanceSheetChartOfAccountsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOnBalanceSheetChartOfAccountsQuery, GetOnBalanceSheetChartOfAccountsQueryVariables>(GetOnBalanceSheetChartOfAccountsDocument, options);
        }
export type GetOnBalanceSheetChartOfAccountsQueryHookResult = ReturnType<typeof useGetOnBalanceSheetChartOfAccountsQuery>;
export type GetOnBalanceSheetChartOfAccountsLazyQueryHookResult = ReturnType<typeof useGetOnBalanceSheetChartOfAccountsLazyQuery>;
export type GetOnBalanceSheetChartOfAccountsQueryResult = Apollo.QueryResult<GetOnBalanceSheetChartOfAccountsQuery, GetOnBalanceSheetChartOfAccountsQueryVariables>;
export const GetOffBalanceSheetChartOfAccountsDocument = gql`
    query GetOffBalanceSheetChartOfAccounts {
  offBalanceSheetChartOfAccounts {
    name
    categories {
      name
      accounts {
        __typename
        ... on AccountWithBalance {
          id
          name
        }
        ... on AccountSetWithBalance {
          id
          name
          hasSubAccounts
        }
      }
    }
  }
}
    `;

/**
 * __useGetOffBalanceSheetChartOfAccountsQuery__
 *
 * To run a query within a React component, call `useGetOffBalanceSheetChartOfAccountsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOffBalanceSheetChartOfAccountsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOffBalanceSheetChartOfAccountsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetOffBalanceSheetChartOfAccountsQuery(baseOptions?: Apollo.QueryHookOptions<GetOffBalanceSheetChartOfAccountsQuery, GetOffBalanceSheetChartOfAccountsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOffBalanceSheetChartOfAccountsQuery, GetOffBalanceSheetChartOfAccountsQueryVariables>(GetOffBalanceSheetChartOfAccountsDocument, options);
      }
export function useGetOffBalanceSheetChartOfAccountsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOffBalanceSheetChartOfAccountsQuery, GetOffBalanceSheetChartOfAccountsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOffBalanceSheetChartOfAccountsQuery, GetOffBalanceSheetChartOfAccountsQueryVariables>(GetOffBalanceSheetChartOfAccountsDocument, options);
        }
export type GetOffBalanceSheetChartOfAccountsQueryHookResult = ReturnType<typeof useGetOffBalanceSheetChartOfAccountsQuery>;
export type GetOffBalanceSheetChartOfAccountsLazyQueryHookResult = ReturnType<typeof useGetOffBalanceSheetChartOfAccountsLazyQuery>;
export type GetOffBalanceSheetChartOfAccountsQueryResult = Apollo.QueryResult<GetOffBalanceSheetChartOfAccountsQuery, GetOffBalanceSheetChartOfAccountsQueryVariables>;
export const GetDepositsForCustomerDocument = gql`
    query GetDepositsForCustomer($id: UUID!) {
  customer(id: $id) {
    customerId
    deposits {
      customerId
      depositId
      amount
    }
  }
}
    `;

/**
 * __useGetDepositsForCustomerQuery__
 *
 * To run a query within a React component, call `useGetDepositsForCustomerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDepositsForCustomerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDepositsForCustomerQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetDepositsForCustomerQuery(baseOptions: Apollo.QueryHookOptions<GetDepositsForCustomerQuery, GetDepositsForCustomerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetDepositsForCustomerQuery, GetDepositsForCustomerQueryVariables>(GetDepositsForCustomerDocument, options);
      }
export function useGetDepositsForCustomerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetDepositsForCustomerQuery, GetDepositsForCustomerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetDepositsForCustomerQuery, GetDepositsForCustomerQueryVariables>(GetDepositsForCustomerDocument, options);
        }
export type GetDepositsForCustomerQueryHookResult = ReturnType<typeof useGetDepositsForCustomerQuery>;
export type GetDepositsForCustomerLazyQueryHookResult = ReturnType<typeof useGetDepositsForCustomerLazyQuery>;
export type GetDepositsForCustomerQueryResult = Apollo.QueryResult<GetDepositsForCustomerQuery, GetDepositsForCustomerQueryVariables>;
export const SumsubPermalinkCreateDocument = gql`
    mutation sumsubPermalinkCreate($input: SumsubPermalinkCreateInput!) {
  sumsubPermalinkCreate(input: $input) {
    url
  }
}
    `;
export type SumsubPermalinkCreateMutationFn = Apollo.MutationFunction<SumsubPermalinkCreateMutation, SumsubPermalinkCreateMutationVariables>;

/**
 * __useSumsubPermalinkCreateMutation__
 *
 * To run a mutation, you first call `useSumsubPermalinkCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSumsubPermalinkCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sumsubPermalinkCreateMutation, { data, loading, error }] = useSumsubPermalinkCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSumsubPermalinkCreateMutation(baseOptions?: Apollo.MutationHookOptions<SumsubPermalinkCreateMutation, SumsubPermalinkCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SumsubPermalinkCreateMutation, SumsubPermalinkCreateMutationVariables>(SumsubPermalinkCreateDocument, options);
      }
export type SumsubPermalinkCreateMutationHookResult = ReturnType<typeof useSumsubPermalinkCreateMutation>;
export type SumsubPermalinkCreateMutationResult = Apollo.MutationResult<SumsubPermalinkCreateMutation>;
export type SumsubPermalinkCreateMutationOptions = Apollo.BaseMutationOptions<SumsubPermalinkCreateMutation, SumsubPermalinkCreateMutationVariables>;
export const GetWithdrawalsForCustomerDocument = gql`
    query GetWithdrawalsForCustomer($id: UUID!) {
  customer(id: $id) {
    customerId
    withdrawals {
      status
      customerId
      withdrawalId
      amount
      customer {
        customerId
        email
      }
    }
  }
}
    `;

/**
 * __useGetWithdrawalsForCustomerQuery__
 *
 * To run a query within a React component, call `useGetWithdrawalsForCustomerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWithdrawalsForCustomerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWithdrawalsForCustomerQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetWithdrawalsForCustomerQuery(baseOptions: Apollo.QueryHookOptions<GetWithdrawalsForCustomerQuery, GetWithdrawalsForCustomerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetWithdrawalsForCustomerQuery, GetWithdrawalsForCustomerQueryVariables>(GetWithdrawalsForCustomerDocument, options);
      }
export function useGetWithdrawalsForCustomerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetWithdrawalsForCustomerQuery, GetWithdrawalsForCustomerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetWithdrawalsForCustomerQuery, GetWithdrawalsForCustomerQueryVariables>(GetWithdrawalsForCustomerDocument, options);
        }
export type GetWithdrawalsForCustomerQueryHookResult = ReturnType<typeof useGetWithdrawalsForCustomerQuery>;
export type GetWithdrawalsForCustomerLazyQueryHookResult = ReturnType<typeof useGetWithdrawalsForCustomerLazyQuery>;
export type GetWithdrawalsForCustomerQueryResult = Apollo.QueryResult<GetWithdrawalsForCustomerQuery, GetWithdrawalsForCustomerQueryVariables>;
export const GetCustomerByCustomerEmailDocument = gql`
    query getCustomerByCustomerEmail($email: String!) {
  customerByEmail(email: $email) {
    customerId
    email
    status
    level
    applicantId
    balance {
      checking {
        settled {
          usdBalance
        }
        pending {
          usdBalance
        }
      }
    }
  }
}
    `;

/**
 * __useGetCustomerByCustomerEmailQuery__
 *
 * To run a query within a React component, call `useGetCustomerByCustomerEmailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerByCustomerEmailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerByCustomerEmailQuery({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useGetCustomerByCustomerEmailQuery(baseOptions: Apollo.QueryHookOptions<GetCustomerByCustomerEmailQuery, GetCustomerByCustomerEmailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerByCustomerEmailQuery, GetCustomerByCustomerEmailQueryVariables>(GetCustomerByCustomerEmailDocument, options);
      }
export function useGetCustomerByCustomerEmailLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerByCustomerEmailQuery, GetCustomerByCustomerEmailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerByCustomerEmailQuery, GetCustomerByCustomerEmailQueryVariables>(GetCustomerByCustomerEmailDocument, options);
        }
export type GetCustomerByCustomerEmailQueryHookResult = ReturnType<typeof useGetCustomerByCustomerEmailQuery>;
export type GetCustomerByCustomerEmailLazyQueryHookResult = ReturnType<typeof useGetCustomerByCustomerEmailLazyQuery>;
export type GetCustomerByCustomerEmailQueryResult = Apollo.QueryResult<GetCustomerByCustomerEmailQuery, GetCustomerByCustomerEmailQueryVariables>;
export const DepositsDocument = gql`
    query Deposits($first: Int!, $after: String) {
  deposits(first: $first, after: $after) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    nodes {
      customerId
      depositId
      amount
      customer {
        customerId
        email
      }
    }
  }
}
    `;

/**
 * __useDepositsQuery__
 *
 * To run a query within a React component, call `useDepositsQuery` and pass it any options that fit your needs.
 * When your component renders, `useDepositsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDepositsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useDepositsQuery(baseOptions: Apollo.QueryHookOptions<DepositsQuery, DepositsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<DepositsQuery, DepositsQueryVariables>(DepositsDocument, options);
      }
export function useDepositsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DepositsQuery, DepositsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<DepositsQuery, DepositsQueryVariables>(DepositsDocument, options);
        }
export type DepositsQueryHookResult = ReturnType<typeof useDepositsQuery>;
export type DepositsLazyQueryHookResult = ReturnType<typeof useDepositsLazyQuery>;
export type DepositsQueryResult = Apollo.QueryResult<DepositsQuery, DepositsQueryVariables>;
export const DepositDocument = gql`
    query Deposit($id: UUID!) {
  deposit(id: $id) {
    customerId
    depositId
    amount
    customer {
      customerId
      email
      applicantId
    }
  }
}
    `;

/**
 * __useDepositQuery__
 *
 * To run a query within a React component, call `useDepositQuery` and pass it any options that fit your needs.
 * When your component renders, `useDepositQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDepositQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDepositQuery(baseOptions: Apollo.QueryHookOptions<DepositQuery, DepositQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<DepositQuery, DepositQueryVariables>(DepositDocument, options);
      }
export function useDepositLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DepositQuery, DepositQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<DepositQuery, DepositQueryVariables>(DepositDocument, options);
        }
export type DepositQueryHookResult = ReturnType<typeof useDepositQuery>;
export type DepositLazyQueryHookResult = ReturnType<typeof useDepositLazyQuery>;
export type DepositQueryResult = Apollo.QueryResult<DepositQuery, DepositQueryVariables>;
export const LoansDocument = gql`
    query Loans($first: Int!, $after: String) {
  loans(first: $first, after: $after) {
    edges {
      cursor
      node {
        loanId
        status
        createdAt
        customer {
          customerId
          email
        }
        balance {
          outstanding {
            usdBalance
          }
          interestIncurred {
            usdBalance
          }
        }
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
}
    `;

/**
 * __useLoansQuery__
 *
 * To run a query within a React component, call `useLoansQuery` and pass it any options that fit your needs.
 * When your component renders, `useLoansQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLoansQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useLoansQuery(baseOptions: Apollo.QueryHookOptions<LoansQuery, LoansQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LoansQuery, LoansQueryVariables>(LoansDocument, options);
      }
export function useLoansLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LoansQuery, LoansQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LoansQuery, LoansQueryVariables>(LoansDocument, options);
        }
export type LoansQueryHookResult = ReturnType<typeof useLoansQuery>;
export type LoansLazyQueryHookResult = ReturnType<typeof useLoansLazyQuery>;
export type LoansQueryResult = Apollo.QueryResult<LoansQuery, LoansQueryVariables>;
export const PnlAccountSetWithBalanceDocument = gql`
    query PnlAccountSetWithBalance($accountSetId: UUID!, $first: Int!, $after: String, $from: Timestamp!, $until: Timestamp) {
  accountSetWithBalance(accountSetId: $accountSetId, from: $from, until: $until) {
    id
    name
    balance {
      ...balancesByCurrency
    }
    subAccounts(first: $first, after: $after) {
      edges {
        cursor
        node {
          __typename
          ... on AccountWithBalance {
            __typename
            id
            name
            balance {
              ...balancesByCurrency
            }
          }
          ... on AccountSetWithBalance {
            __typename
            id
            name
            hasSubAccounts
            balance {
              ...balancesByCurrency
            }
          }
        }
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}
    ${BalancesByCurrencyFragmentDoc}`;

/**
 * __usePnlAccountSetWithBalanceQuery__
 *
 * To run a query within a React component, call `usePnlAccountSetWithBalanceQuery` and pass it any options that fit your needs.
 * When your component renders, `usePnlAccountSetWithBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePnlAccountSetWithBalanceQuery({
 *   variables: {
 *      accountSetId: // value for 'accountSetId'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *      from: // value for 'from'
 *      until: // value for 'until'
 *   },
 * });
 */
export function usePnlAccountSetWithBalanceQuery(baseOptions: Apollo.QueryHookOptions<PnlAccountSetWithBalanceQuery, PnlAccountSetWithBalanceQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PnlAccountSetWithBalanceQuery, PnlAccountSetWithBalanceQueryVariables>(PnlAccountSetWithBalanceDocument, options);
      }
export function usePnlAccountSetWithBalanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PnlAccountSetWithBalanceQuery, PnlAccountSetWithBalanceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PnlAccountSetWithBalanceQuery, PnlAccountSetWithBalanceQueryVariables>(PnlAccountSetWithBalanceDocument, options);
        }
export type PnlAccountSetWithBalanceQueryHookResult = ReturnType<typeof usePnlAccountSetWithBalanceQuery>;
export type PnlAccountSetWithBalanceLazyQueryHookResult = ReturnType<typeof usePnlAccountSetWithBalanceLazyQuery>;
export type PnlAccountSetWithBalanceQueryResult = Apollo.QueryResult<PnlAccountSetWithBalanceQuery, PnlAccountSetWithBalanceQueryVariables>;
export const ProfitAndLossStatementDocument = gql`
    query ProfitAndLossStatement($from: Timestamp!, $until: Timestamp) {
  profitAndLossStatement(from: $from, until: $until) {
    name
    balance {
      ...balancesByCurrency
    }
    categories {
      name
      balance {
        ...balancesByCurrency
      }
      accounts {
        ... on AccountWithBalance {
          __typename
          id
          name
          balance {
            ...balancesByCurrency
          }
        }
        ... on AccountSetWithBalance {
          __typename
          id
          name
          hasSubAccounts
          balance {
            ...balancesByCurrency
          }
        }
      }
    }
  }
}
    ${BalancesByCurrencyFragmentDoc}`;

/**
 * __useProfitAndLossStatementQuery__
 *
 * To run a query within a React component, call `useProfitAndLossStatementQuery` and pass it any options that fit your needs.
 * When your component renders, `useProfitAndLossStatementQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProfitAndLossStatementQuery({
 *   variables: {
 *      from: // value for 'from'
 *      until: // value for 'until'
 *   },
 * });
 */
export function useProfitAndLossStatementQuery(baseOptions: Apollo.QueryHookOptions<ProfitAndLossStatementQuery, ProfitAndLossStatementQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ProfitAndLossStatementQuery, ProfitAndLossStatementQueryVariables>(ProfitAndLossStatementDocument, options);
      }
export function useProfitAndLossStatementLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ProfitAndLossStatementQuery, ProfitAndLossStatementQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ProfitAndLossStatementQuery, ProfitAndLossStatementQueryVariables>(ProfitAndLossStatementDocument, options);
        }
export type ProfitAndLossStatementQueryHookResult = ReturnType<typeof useProfitAndLossStatementQuery>;
export type ProfitAndLossStatementLazyQueryHookResult = ReturnType<typeof useProfitAndLossStatementLazyQuery>;
export type ProfitAndLossStatementQueryResult = Apollo.QueryResult<ProfitAndLossStatementQuery, ProfitAndLossStatementQueryVariables>;
export const DefaultTermsDocument = gql`
    query defaultTerms {
  defaultTerms {
    id
    termsId
    values {
      annualRate
      interval
      liquidationCvl
      marginCallCvl
      initialCvl
      duration {
        period
        units
      }
    }
  }
}
    `;

/**
 * __useDefaultTermsQuery__
 *
 * To run a query within a React component, call `useDefaultTermsQuery` and pass it any options that fit your needs.
 * When your component renders, `useDefaultTermsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDefaultTermsQuery({
 *   variables: {
 *   },
 * });
 */
export function useDefaultTermsQuery(baseOptions?: Apollo.QueryHookOptions<DefaultTermsQuery, DefaultTermsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<DefaultTermsQuery, DefaultTermsQueryVariables>(DefaultTermsDocument, options);
      }
export function useDefaultTermsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DefaultTermsQuery, DefaultTermsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<DefaultTermsQuery, DefaultTermsQueryVariables>(DefaultTermsDocument, options);
        }
export type DefaultTermsQueryHookResult = ReturnType<typeof useDefaultTermsQuery>;
export type DefaultTermsLazyQueryHookResult = ReturnType<typeof useDefaultTermsLazyQuery>;
export type DefaultTermsQueryResult = Apollo.QueryResult<DefaultTermsQuery, DefaultTermsQueryVariables>;
export const GetOnBalanceSheetTrialBalanceDocument = gql`
    query GetOnBalanceSheetTrialBalance($from: Timestamp!, $until: Timestamp) {
  trialBalance(from: $from, until: $until) {
    name
    balance {
      ...balancesByCurrency
    }
    subAccounts {
      ... on AccountWithBalance {
        name
        balance {
          ...balancesByCurrency
        }
      }
      ... on AccountSetWithBalance {
        name
        balance {
          ...balancesByCurrency
        }
      }
    }
  }
}
    ${BalancesByCurrencyFragmentDoc}`;

/**
 * __useGetOnBalanceSheetTrialBalanceQuery__
 *
 * To run a query within a React component, call `useGetOnBalanceSheetTrialBalanceQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOnBalanceSheetTrialBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOnBalanceSheetTrialBalanceQuery({
 *   variables: {
 *      from: // value for 'from'
 *      until: // value for 'until'
 *   },
 * });
 */
export function useGetOnBalanceSheetTrialBalanceQuery(baseOptions: Apollo.QueryHookOptions<GetOnBalanceSheetTrialBalanceQuery, GetOnBalanceSheetTrialBalanceQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOnBalanceSheetTrialBalanceQuery, GetOnBalanceSheetTrialBalanceQueryVariables>(GetOnBalanceSheetTrialBalanceDocument, options);
      }
export function useGetOnBalanceSheetTrialBalanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOnBalanceSheetTrialBalanceQuery, GetOnBalanceSheetTrialBalanceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOnBalanceSheetTrialBalanceQuery, GetOnBalanceSheetTrialBalanceQueryVariables>(GetOnBalanceSheetTrialBalanceDocument, options);
        }
export type GetOnBalanceSheetTrialBalanceQueryHookResult = ReturnType<typeof useGetOnBalanceSheetTrialBalanceQuery>;
export type GetOnBalanceSheetTrialBalanceLazyQueryHookResult = ReturnType<typeof useGetOnBalanceSheetTrialBalanceLazyQuery>;
export type GetOnBalanceSheetTrialBalanceQueryResult = Apollo.QueryResult<GetOnBalanceSheetTrialBalanceQuery, GetOnBalanceSheetTrialBalanceQueryVariables>;
export const GetOffBalanceSheetTrialBalanceDocument = gql`
    query GetOffBalanceSheetTrialBalance($from: Timestamp!, $until: Timestamp) {
  offBalanceSheetTrialBalance(from: $from, until: $until) {
    name
    balance {
      ...balancesByCurrency
    }
    subAccounts {
      ... on AccountWithBalance {
        name
        balance {
          ...balancesByCurrency
        }
      }
      ... on AccountSetWithBalance {
        name
        balance {
          ...balancesByCurrency
        }
      }
    }
  }
}
    ${BalancesByCurrencyFragmentDoc}`;

/**
 * __useGetOffBalanceSheetTrialBalanceQuery__
 *
 * To run a query within a React component, call `useGetOffBalanceSheetTrialBalanceQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOffBalanceSheetTrialBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOffBalanceSheetTrialBalanceQuery({
 *   variables: {
 *      from: // value for 'from'
 *      until: // value for 'until'
 *   },
 * });
 */
export function useGetOffBalanceSheetTrialBalanceQuery(baseOptions: Apollo.QueryHookOptions<GetOffBalanceSheetTrialBalanceQuery, GetOffBalanceSheetTrialBalanceQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOffBalanceSheetTrialBalanceQuery, GetOffBalanceSheetTrialBalanceQueryVariables>(GetOffBalanceSheetTrialBalanceDocument, options);
      }
export function useGetOffBalanceSheetTrialBalanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOffBalanceSheetTrialBalanceQuery, GetOffBalanceSheetTrialBalanceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOffBalanceSheetTrialBalanceQuery, GetOffBalanceSheetTrialBalanceQueryVariables>(GetOffBalanceSheetTrialBalanceDocument, options);
        }
export type GetOffBalanceSheetTrialBalanceQueryHookResult = ReturnType<typeof useGetOffBalanceSheetTrialBalanceQuery>;
export type GetOffBalanceSheetTrialBalanceLazyQueryHookResult = ReturnType<typeof useGetOffBalanceSheetTrialBalanceLazyQuery>;
export type GetOffBalanceSheetTrialBalanceQueryResult = Apollo.QueryResult<GetOffBalanceSheetTrialBalanceQuery, GetOffBalanceSheetTrialBalanceQueryVariables>;
export const UsersDocument = gql`
    query Users {
  users {
    userId
    email
    roles
  }
}
    `;

/**
 * __useUsersQuery__
 *
 * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUsersQuery({
 *   variables: {
 *   },
 * });
 */
export function useUsersQuery(baseOptions?: Apollo.QueryHookOptions<UsersQuery, UsersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);
      }
export function useUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UsersQuery, UsersQueryVariables>(UsersDocument, options);
        }
export type UsersQueryHookResult = ReturnType<typeof useUsersQuery>;
export type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>;
export type UsersQueryResult = Apollo.QueryResult<UsersQuery, UsersQueryVariables>;
export const UserAssignRoleDocument = gql`
    mutation UserAssignRole($input: UserAssignRoleInput!) {
  userAssignRole(input: $input) {
    user {
      userId
      email
      roles
    }
  }
}
    `;
export type UserAssignRoleMutationFn = Apollo.MutationFunction<UserAssignRoleMutation, UserAssignRoleMutationVariables>;

/**
 * __useUserAssignRoleMutation__
 *
 * To run a mutation, you first call `useUserAssignRoleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserAssignRoleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userAssignRoleMutation, { data, loading, error }] = useUserAssignRoleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserAssignRoleMutation(baseOptions?: Apollo.MutationHookOptions<UserAssignRoleMutation, UserAssignRoleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UserAssignRoleMutation, UserAssignRoleMutationVariables>(UserAssignRoleDocument, options);
      }
export type UserAssignRoleMutationHookResult = ReturnType<typeof useUserAssignRoleMutation>;
export type UserAssignRoleMutationResult = Apollo.MutationResult<UserAssignRoleMutation>;
export type UserAssignRoleMutationOptions = Apollo.BaseMutationOptions<UserAssignRoleMutation, UserAssignRoleMutationVariables>;
export const UserRevokeRoleDocument = gql`
    mutation UserRevokeRole($input: UserRevokeRoleInput!) {
  userRevokeRole(input: $input) {
    user {
      userId
      email
      roles
    }
  }
}
    `;
export type UserRevokeRoleMutationFn = Apollo.MutationFunction<UserRevokeRoleMutation, UserRevokeRoleMutationVariables>;

/**
 * __useUserRevokeRoleMutation__
 *
 * To run a mutation, you first call `useUserRevokeRoleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserRevokeRoleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userRevokeRoleMutation, { data, loading, error }] = useUserRevokeRoleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserRevokeRoleMutation(baseOptions?: Apollo.MutationHookOptions<UserRevokeRoleMutation, UserRevokeRoleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UserRevokeRoleMutation, UserRevokeRoleMutationVariables>(UserRevokeRoleDocument, options);
      }
export type UserRevokeRoleMutationHookResult = ReturnType<typeof useUserRevokeRoleMutation>;
export type UserRevokeRoleMutationResult = Apollo.MutationResult<UserRevokeRoleMutation>;
export type UserRevokeRoleMutationOptions = Apollo.BaseMutationOptions<UserRevokeRoleMutation, UserRevokeRoleMutationVariables>;
export const WithdrawalsDocument = gql`
    query Withdrawals($first: Int!, $after: String) {
  withdrawals(first: $first, after: $after) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    nodes {
      customerId
      withdrawalId
      amount
      status
      customer {
        customerId
        email
      }
    }
  }
}
    `;

/**
 * __useWithdrawalsQuery__
 *
 * To run a query within a React component, call `useWithdrawalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useWithdrawalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useWithdrawalsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useWithdrawalsQuery(baseOptions: Apollo.QueryHookOptions<WithdrawalsQuery, WithdrawalsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<WithdrawalsQuery, WithdrawalsQueryVariables>(WithdrawalsDocument, options);
      }
export function useWithdrawalsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WithdrawalsQuery, WithdrawalsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<WithdrawalsQuery, WithdrawalsQueryVariables>(WithdrawalsDocument, options);
        }
export type WithdrawalsQueryHookResult = ReturnType<typeof useWithdrawalsQuery>;
export type WithdrawalsLazyQueryHookResult = ReturnType<typeof useWithdrawalsLazyQuery>;
export type WithdrawalsQueryResult = Apollo.QueryResult<WithdrawalsQuery, WithdrawalsQueryVariables>;
export const WithdrawalDocument = gql`
    query Withdrawal($id: UUID!) {
  withdrawal(id: $id) {
    customerId
    withdrawalId
    amount
    status
    customer {
      customerId
      email
      applicantId
    }
  }
}
    `;

/**
 * __useWithdrawalQuery__
 *
 * To run a query within a React component, call `useWithdrawalQuery` and pass it any options that fit your needs.
 * When your component renders, `useWithdrawalQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useWithdrawalQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useWithdrawalQuery(baseOptions: Apollo.QueryHookOptions<WithdrawalQuery, WithdrawalQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<WithdrawalQuery, WithdrawalQueryVariables>(WithdrawalDocument, options);
      }
export function useWithdrawalLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WithdrawalQuery, WithdrawalQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<WithdrawalQuery, WithdrawalQueryVariables>(WithdrawalDocument, options);
        }
export type WithdrawalQueryHookResult = ReturnType<typeof useWithdrawalQuery>;
export type WithdrawalLazyQueryHookResult = ReturnType<typeof useWithdrawalLazyQuery>;
export type WithdrawalQueryResult = Apollo.QueryResult<WithdrawalQuery, WithdrawalQueryVariables>;
export const CustomerCreateDocument = gql`
    mutation CustomerCreate($input: CustomerCreateInput!) {
  customerCreate(input: $input) {
    customer {
      customerId
      email
      status
      level
      applicantId
    }
  }
}
    `;
export type CustomerCreateMutationFn = Apollo.MutationFunction<CustomerCreateMutation, CustomerCreateMutationVariables>;

/**
 * __useCustomerCreateMutation__
 *
 * To run a mutation, you first call `useCustomerCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCustomerCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [customerCreateMutation, { data, loading, error }] = useCustomerCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCustomerCreateMutation(baseOptions?: Apollo.MutationHookOptions<CustomerCreateMutation, CustomerCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CustomerCreateMutation, CustomerCreateMutationVariables>(CustomerCreateDocument, options);
      }
export type CustomerCreateMutationHookResult = ReturnType<typeof useCustomerCreateMutation>;
export type CustomerCreateMutationResult = Apollo.MutationResult<CustomerCreateMutation>;
export type CustomerCreateMutationOptions = Apollo.BaseMutationOptions<CustomerCreateMutation, CustomerCreateMutationVariables>;
export const RecordDepositDocument = gql`
    mutation RecordDeposit($input: DepositRecordInput!) {
  depositRecord(input: $input) {
    deposit {
      depositId
      amount
      customer {
        customerId
        balance {
          checking {
            settled {
              usdBalance
            }
          }
        }
      }
    }
  }
}
    `;
export type RecordDepositMutationFn = Apollo.MutationFunction<RecordDepositMutation, RecordDepositMutationVariables>;

/**
 * __useRecordDepositMutation__
 *
 * To run a mutation, you first call `useRecordDepositMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRecordDepositMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [recordDepositMutation, { data, loading, error }] = useRecordDepositMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useRecordDepositMutation(baseOptions?: Apollo.MutationHookOptions<RecordDepositMutation, RecordDepositMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<RecordDepositMutation, RecordDepositMutationVariables>(RecordDepositDocument, options);
      }
export type RecordDepositMutationHookResult = ReturnType<typeof useRecordDepositMutation>;
export type RecordDepositMutationResult = Apollo.MutationResult<RecordDepositMutation>;
export type RecordDepositMutationOptions = Apollo.BaseMutationOptions<RecordDepositMutation, RecordDepositMutationVariables>;
export const WithdrawalConfirmDocument = gql`
    mutation WithdrawalConfirm($input: WithdrawalConfirmInput!) {
  withdrawalConfirm(input: $input) {
    withdrawal {
      withdrawalId
      amount
      customer {
        customerId
        balance {
          checking {
            settled {
              usdBalance
            }
            pending {
              usdBalance
            }
          }
        }
      }
    }
  }
}
    `;
export type WithdrawalConfirmMutationFn = Apollo.MutationFunction<WithdrawalConfirmMutation, WithdrawalConfirmMutationVariables>;

/**
 * __useWithdrawalConfirmMutation__
 *
 * To run a mutation, you first call `useWithdrawalConfirmMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useWithdrawalConfirmMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [withdrawalConfirmMutation, { data, loading, error }] = useWithdrawalConfirmMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useWithdrawalConfirmMutation(baseOptions?: Apollo.MutationHookOptions<WithdrawalConfirmMutation, WithdrawalConfirmMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<WithdrawalConfirmMutation, WithdrawalConfirmMutationVariables>(WithdrawalConfirmDocument, options);
      }
export type WithdrawalConfirmMutationHookResult = ReturnType<typeof useWithdrawalConfirmMutation>;
export type WithdrawalConfirmMutationResult = Apollo.MutationResult<WithdrawalConfirmMutation>;
export type WithdrawalConfirmMutationOptions = Apollo.BaseMutationOptions<WithdrawalConfirmMutation, WithdrawalConfirmMutationVariables>;
export const WithdrawalInitiateDocument = gql`
    mutation WithdrawalInitiate($input: WithdrawalInitiateInput!) {
  withdrawalInitiate(input: $input) {
    withdrawal {
      withdrawalId
      amount
      customer {
        customerId
        balance {
          checking {
            settled {
              usdBalance
            }
            pending {
              usdBalance
            }
          }
        }
      }
    }
  }
}
    `;
export type WithdrawalInitiateMutationFn = Apollo.MutationFunction<WithdrawalInitiateMutation, WithdrawalInitiateMutationVariables>;

/**
 * __useWithdrawalInitiateMutation__
 *
 * To run a mutation, you first call `useWithdrawalInitiateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useWithdrawalInitiateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [withdrawalInitiateMutation, { data, loading, error }] = useWithdrawalInitiateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useWithdrawalInitiateMutation(baseOptions?: Apollo.MutationHookOptions<WithdrawalInitiateMutation, WithdrawalInitiateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<WithdrawalInitiateMutation, WithdrawalInitiateMutationVariables>(WithdrawalInitiateDocument, options);
      }
export type WithdrawalInitiateMutationHookResult = ReturnType<typeof useWithdrawalInitiateMutation>;
export type WithdrawalInitiateMutationResult = Apollo.MutationResult<WithdrawalInitiateMutation>;
export type WithdrawalInitiateMutationOptions = Apollo.BaseMutationOptions<WithdrawalInitiateMutation, WithdrawalInitiateMutationVariables>;
export const LoanApproveDocument = gql`
    mutation LoanApprove($input: LoanApproveInput!) {
  loanApprove(input: $input) {
    loan {
      id
      loanId
      createdAt
      balance {
        collateral {
          btcBalance
        }
        outstanding {
          usdBalance
        }
        interestIncurred {
          usdBalance
        }
      }
    }
  }
}
    `;
export type LoanApproveMutationFn = Apollo.MutationFunction<LoanApproveMutation, LoanApproveMutationVariables>;

/**
 * __useLoanApproveMutation__
 *
 * To run a mutation, you first call `useLoanApproveMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoanApproveMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loanApproveMutation, { data, loading, error }] = useLoanApproveMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoanApproveMutation(baseOptions?: Apollo.MutationHookOptions<LoanApproveMutation, LoanApproveMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoanApproveMutation, LoanApproveMutationVariables>(LoanApproveDocument, options);
      }
export type LoanApproveMutationHookResult = ReturnType<typeof useLoanApproveMutation>;
export type LoanApproveMutationResult = Apollo.MutationResult<LoanApproveMutation>;
export type LoanApproveMutationOptions = Apollo.BaseMutationOptions<LoanApproveMutation, LoanApproveMutationVariables>;
export const LoanCreateDocument = gql`
    mutation LoanCreate($input: LoanCreateInput!) {
  loanCreate(input: $input) {
    loan {
      id
      loanId
      createdAt
      balance {
        collateral {
          btcBalance
        }
        outstanding {
          usdBalance
        }
        interestIncurred {
          usdBalance
        }
      }
      loanTerms {
        annualRate
        interval
        liquidationCvl
        marginCallCvl
        initialCvl
        duration {
          period
          units
        }
      }
    }
  }
}
    `;
export type LoanCreateMutationFn = Apollo.MutationFunction<LoanCreateMutation, LoanCreateMutationVariables>;

/**
 * __useLoanCreateMutation__
 *
 * To run a mutation, you first call `useLoanCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoanCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loanCreateMutation, { data, loading, error }] = useLoanCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoanCreateMutation(baseOptions?: Apollo.MutationHookOptions<LoanCreateMutation, LoanCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoanCreateMutation, LoanCreateMutationVariables>(LoanCreateDocument, options);
      }
export type LoanCreateMutationHookResult = ReturnType<typeof useLoanCreateMutation>;
export type LoanCreateMutationResult = Apollo.MutationResult<LoanCreateMutation>;
export type LoanCreateMutationOptions = Apollo.BaseMutationOptions<LoanCreateMutation, LoanCreateMutationVariables>;
export const LoanPartialPaymentDocument = gql`
    mutation loanPartialPayment($input: LoanPartialPaymentInput!) {
  loanPartialPayment(input: $input) {
    loan {
      id
      loanId
      createdAt
      balance {
        collateral {
          btcBalance
        }
        outstanding {
          usdBalance
        }
        interestIncurred {
          usdBalance
        }
      }
    }
  }
}
    `;
export type LoanPartialPaymentMutationFn = Apollo.MutationFunction<LoanPartialPaymentMutation, LoanPartialPaymentMutationVariables>;

/**
 * __useLoanPartialPaymentMutation__
 *
 * To run a mutation, you first call `useLoanPartialPaymentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoanPartialPaymentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loanPartialPaymentMutation, { data, loading, error }] = useLoanPartialPaymentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoanPartialPaymentMutation(baseOptions?: Apollo.MutationHookOptions<LoanPartialPaymentMutation, LoanPartialPaymentMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<LoanPartialPaymentMutation, LoanPartialPaymentMutationVariables>(LoanPartialPaymentDocument, options);
      }
export type LoanPartialPaymentMutationHookResult = ReturnType<typeof useLoanPartialPaymentMutation>;
export type LoanPartialPaymentMutationResult = Apollo.MutationResult<LoanPartialPaymentMutation>;
export type LoanPartialPaymentMutationOptions = Apollo.BaseMutationOptions<LoanPartialPaymentMutation, LoanPartialPaymentMutationVariables>;
export const DefaultTermsUpdateDocument = gql`
    mutation DefaultTermsUpdate($input: DefaultTermsUpdateInput!) {
  defaultTermsUpdate(input: $input) {
    terms {
      id
      termsId
      values {
        annualRate
        interval
        liquidationCvl
        marginCallCvl
        initialCvl
        duration {
          period
          units
        }
      }
    }
  }
}
    `;
export type DefaultTermsUpdateMutationFn = Apollo.MutationFunction<DefaultTermsUpdateMutation, DefaultTermsUpdateMutationVariables>;

/**
 * __useDefaultTermsUpdateMutation__
 *
 * To run a mutation, you first call `useDefaultTermsUpdateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDefaultTermsUpdateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [defaultTermsUpdateMutation, { data, loading, error }] = useDefaultTermsUpdateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDefaultTermsUpdateMutation(baseOptions?: Apollo.MutationHookOptions<DefaultTermsUpdateMutation, DefaultTermsUpdateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<DefaultTermsUpdateMutation, DefaultTermsUpdateMutationVariables>(DefaultTermsUpdateDocument, options);
      }
export type DefaultTermsUpdateMutationHookResult = ReturnType<typeof useDefaultTermsUpdateMutation>;
export type DefaultTermsUpdateMutationResult = Apollo.MutationResult<DefaultTermsUpdateMutation>;
export type DefaultTermsUpdateMutationOptions = Apollo.BaseMutationOptions<DefaultTermsUpdateMutation, DefaultTermsUpdateMutationVariables>;
export const UserCreateDocument = gql`
    mutation UserCreate($input: UserCreateInput!) {
  userCreate(input: $input) {
    user {
      userId
      email
      roles
    }
  }
}
    `;
export type UserCreateMutationFn = Apollo.MutationFunction<UserCreateMutation, UserCreateMutationVariables>;

/**
 * __useUserCreateMutation__
 *
 * To run a mutation, you first call `useUserCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userCreateMutation, { data, loading, error }] = useUserCreateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUserCreateMutation(baseOptions?: Apollo.MutationHookOptions<UserCreateMutation, UserCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UserCreateMutation, UserCreateMutationVariables>(UserCreateDocument, options);
      }
export type UserCreateMutationHookResult = ReturnType<typeof useUserCreateMutation>;
export type UserCreateMutationResult = Apollo.MutationResult<UserCreateMutation>;
export type UserCreateMutationOptions = Apollo.BaseMutationOptions<UserCreateMutation, UserCreateMutationVariables>;
export const WithdrawalCancelDocument = gql`
    mutation WithdrawalCancel($input: WithdrawalCancelInput!) {
  withdrawalCancel(input: $input) {
    withdrawal {
      withdrawalId
      amount
      customer {
        customerId
        balance {
          checking {
            settled {
              usdBalance
            }
            pending {
              usdBalance
            }
          }
        }
      }
    }
  }
}
    `;
export type WithdrawalCancelMutationFn = Apollo.MutationFunction<WithdrawalCancelMutation, WithdrawalCancelMutationVariables>;

/**
 * __useWithdrawalCancelMutation__
 *
 * To run a mutation, you first call `useWithdrawalCancelMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useWithdrawalCancelMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [withdrawalCancelMutation, { data, loading, error }] = useWithdrawalCancelMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useWithdrawalCancelMutation(baseOptions?: Apollo.MutationHookOptions<WithdrawalCancelMutation, WithdrawalCancelMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<WithdrawalCancelMutation, WithdrawalCancelMutationVariables>(WithdrawalCancelDocument, options);
      }
export type WithdrawalCancelMutationHookResult = ReturnType<typeof useWithdrawalCancelMutation>;
export type WithdrawalCancelMutationResult = Apollo.MutationResult<WithdrawalCancelMutation>;
export type WithdrawalCancelMutationOptions = Apollo.BaseMutationOptions<WithdrawalCancelMutation, WithdrawalCancelMutationVariables>;
export const GetLoanDetailsDocument = gql`
    query GetLoanDetails($id: UUID!) {
  loan(id: $id) {
    id
    loanId
    createdAt
    status
    customer {
      customerId
    }
    balance {
      collateral {
        btcBalance
      }
      outstanding {
        usdBalance
      }
      interestIncurred {
        usdBalance
      }
    }
    loanTerms {
      annualRate
      interval
      liquidationCvl
      marginCallCvl
      initialCvl
      duration {
        period
        units
      }
    }
  }
}
    `;

/**
 * __useGetLoanDetailsQuery__
 *
 * To run a query within a React component, call `useGetLoanDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLoanDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLoanDetailsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetLoanDetailsQuery(baseOptions: Apollo.QueryHookOptions<GetLoanDetailsQuery, GetLoanDetailsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetLoanDetailsQuery, GetLoanDetailsQueryVariables>(GetLoanDetailsDocument, options);
      }
export function useGetLoanDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLoanDetailsQuery, GetLoanDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetLoanDetailsQuery, GetLoanDetailsQueryVariables>(GetLoanDetailsDocument, options);
        }
export type GetLoanDetailsQueryHookResult = ReturnType<typeof useGetLoanDetailsQuery>;
export type GetLoanDetailsLazyQueryHookResult = ReturnType<typeof useGetLoanDetailsLazyQuery>;
export type GetLoanDetailsQueryResult = Apollo.QueryResult<GetLoanDetailsQuery, GetLoanDetailsQueryVariables>;
export const GetLoansForCustomerDocument = gql`
    query GetLoansForCustomer($id: UUID!) {
  customer(id: $id) {
    customerId
    loans {
      id
      loanId
      createdAt
      status
      loanTerms {
        annualRate
        interval
        liquidationCvl
        marginCallCvl
        initialCvl
        duration {
          period
          units
        }
      }
      balance {
        collateral {
          btcBalance
        }
        outstanding {
          usdBalance
        }
        interestIncurred {
          usdBalance
        }
      }
    }
  }
}
    `;

/**
 * __useGetLoansForCustomerQuery__
 *
 * To run a query within a React component, call `useGetLoansForCustomerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLoansForCustomerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLoansForCustomerQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetLoansForCustomerQuery(baseOptions: Apollo.QueryHookOptions<GetLoansForCustomerQuery, GetLoansForCustomerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetLoansForCustomerQuery, GetLoansForCustomerQueryVariables>(GetLoansForCustomerDocument, options);
      }
export function useGetLoansForCustomerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLoansForCustomerQuery, GetLoansForCustomerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetLoansForCustomerQuery, GetLoansForCustomerQueryVariables>(GetLoansForCustomerDocument, options);
        }
export type GetLoansForCustomerQueryHookResult = ReturnType<typeof useGetLoansForCustomerQuery>;
export type GetLoansForCustomerLazyQueryHookResult = ReturnType<typeof useGetLoansForCustomerLazyQuery>;
export type GetLoansForCustomerQueryResult = Apollo.QueryResult<GetLoansForCustomerQuery, GetLoansForCustomerQueryVariables>;
export const GetCustomerByCustomerIdDocument = gql`
    query getCustomerByCustomerId($id: UUID!) {
  customer(id: $id) {
    customerId
    email
    status
    level
    applicantId
    balance {
      checking {
        settled {
          usdBalance
        }
        pending {
          usdBalance
        }
      }
    }
  }
}
    `;

/**
 * __useGetCustomerByCustomerIdQuery__
 *
 * To run a query within a React component, call `useGetCustomerByCustomerIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerByCustomerIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerByCustomerIdQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCustomerByCustomerIdQuery(baseOptions: Apollo.QueryHookOptions<GetCustomerByCustomerIdQuery, GetCustomerByCustomerIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerByCustomerIdQuery, GetCustomerByCustomerIdQueryVariables>(GetCustomerByCustomerIdDocument, options);
      }
export function useGetCustomerByCustomerIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerByCustomerIdQuery, GetCustomerByCustomerIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerByCustomerIdQuery, GetCustomerByCustomerIdQueryVariables>(GetCustomerByCustomerIdDocument, options);
        }
export type GetCustomerByCustomerIdQueryHookResult = ReturnType<typeof useGetCustomerByCustomerIdQuery>;
export type GetCustomerByCustomerIdLazyQueryHookResult = ReturnType<typeof useGetCustomerByCustomerIdLazyQuery>;
export type GetCustomerByCustomerIdQueryResult = Apollo.QueryResult<GetCustomerByCustomerIdQuery, GetCustomerByCustomerIdQueryVariables>;
export const CustomersDocument = gql`
    query Customers($first: Int!, $after: String) {
  customers(first: $first, after: $after) {
    nodes {
      customerId
      email
      balance {
        checking {
          settled {
            usdBalance
          }
          pending {
            usdBalance
          }
        }
      }
    }
    pageInfo {
      endCursor
      startCursor
      hasNextPage
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useCustomersQuery__
 *
 * To run a query within a React component, call `useCustomersQuery` and pass it any options that fit your needs.
 * When your component renders, `useCustomersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCustomersQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useCustomersQuery(baseOptions: Apollo.QueryHookOptions<CustomersQuery, CustomersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CustomersQuery, CustomersQueryVariables>(CustomersDocument, options);
      }
export function useCustomersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CustomersQuery, CustomersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CustomersQuery, CustomersQueryVariables>(CustomersDocument, options);
        }
export type CustomersQueryHookResult = ReturnType<typeof useCustomersQuery>;
export type CustomersLazyQueryHookResult = ReturnType<typeof useCustomersLazyQuery>;
export type CustomersQueryResult = Apollo.QueryResult<CustomersQuery, CustomersQueryVariables>;