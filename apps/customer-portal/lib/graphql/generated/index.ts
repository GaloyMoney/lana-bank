// this file is autogenerated by codegen
/* eslint-disable */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Satoshis: { input: any; output: any; }
  UUID: { input: any; output: any; }
  UsdCents: { input: any; output: any; }
};

export enum AccountStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE'
}

export type BtcBalance = {
  __typename?: 'BtcBalance';
  btcBalance: Scalars['Satoshis']['output'];
};

export type Checking = {
  __typename?: 'Checking';
  pending: UsdBalance;
  settled: UsdBalance;
};

export type Collateral = {
  __typename?: 'Collateral';
  btcBalance: Scalars['Satoshis']['output'];
};

export type FixedTermLoan = {
  __typename?: 'FixedTermLoan';
  balance: FixedTermLoanBalance;
  loanId: Scalars['UUID']['output'];
  user: User;
};

export type FixedTermLoanApproveInput = {
  collateral: Scalars['Satoshis']['input'];
  loanId: Scalars['UUID']['input'];
  principal: Scalars['UsdCents']['input'];
};

export type FixedTermLoanApprovePayload = {
  __typename?: 'FixedTermLoanApprovePayload';
  loan: FixedTermLoan;
};

export type FixedTermLoanBalance = {
  __typename?: 'FixedTermLoanBalance';
  collateral: Collateral;
  interestIncurred: InterestIncome;
  outstanding: LoanOutstanding;
};

export type FixedTermLoanCreatePayload = {
  __typename?: 'FixedTermLoanCreatePayload';
  loan: FixedTermLoan;
};

export type FixedTermLoanRecordPaymentInput = {
  amount: Scalars['UsdCents']['input'];
  loanId: Scalars['UUID']['input'];
};

export type FixedTermLoanRecordPaymentPayload = {
  __typename?: 'FixedTermLoanRecordPaymentPayload';
  loan: FixedTermLoan;
};

export type InterestIncome = {
  __typename?: 'InterestIncome';
  usdBalance: Scalars['UsdCents']['output'];
};

export enum KycLevel {
  One = 'ONE',
  Two = 'TWO',
  Zero = 'ZERO'
}

export type LoanOutstanding = {
  __typename?: 'LoanOutstanding';
  usdBalance: Scalars['UsdCents']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  fixedTermLoanApprove: FixedTermLoanApprovePayload;
  fixedTermLoanCreate: FixedTermLoanCreatePayload;
  fixedTermLoanRecordPayment: FixedTermLoanRecordPaymentPayload;
  sumsubTokenCreate: SumsubTokenCreatePayload;
  withdrawalInitiate: WithdrawalInitiatePayload;
};


export type MutationFixedTermLoanApproveArgs = {
  input: FixedTermLoanApproveInput;
};


export type MutationFixedTermLoanRecordPaymentArgs = {
  input: FixedTermLoanRecordPaymentInput;
};


export type MutationWithdrawalInitiateArgs = {
  input: WithdrawalInitiateInput;
};

export type Query = {
  __typename?: 'Query';
  loan?: Maybe<FixedTermLoan>;
  me?: Maybe<User>;
  user?: Maybe<User>;
};


export type QueryLoanArgs = {
  id: Scalars['UUID']['input'];
};


export type QueryUserArgs = {
  id: Scalars['UUID']['input'];
};

export type SumsubTokenCreatePayload = {
  __typename?: 'SumsubTokenCreatePayload';
  token: Scalars['String']['output'];
};

export type UnallocatedCollateral = {
  __typename?: 'UnallocatedCollateral';
  settled: BtcBalance;
};

export type UsdBalance = {
  __typename?: 'UsdBalance';
  usdBalance: Scalars['UsdCents']['output'];
};

export type User = {
  __typename?: 'User';
  applicantId?: Maybe<Scalars['String']['output']>;
  balance: UserBalance;
  btcDepositAddress: Scalars['String']['output'];
  email: Scalars['String']['output'];
  level: KycLevel;
  loans: Array<FixedTermLoan>;
  status: AccountStatus;
  userId: Scalars['UUID']['output'];
  ustDepositAddress: Scalars['String']['output'];
};

export type UserBalance = {
  __typename?: 'UserBalance';
  checking: Checking;
  unallocatedCollateral: UnallocatedCollateral;
};

export type Withdrawal = {
  __typename?: 'Withdrawal';
  amount: Scalars['UsdCents']['output'];
  userId: Scalars['UUID']['output'];
  withdrawalId: Scalars['UUID']['output'];
};

export type WithdrawalInitiateInput = {
  amount: Scalars['UsdCents']['input'];
  destination: Scalars['String']['input'];
  reference?: InputMaybe<Scalars['String']['input']>;
};

export type WithdrawalInitiatePayload = {
  __typename?: 'WithdrawalInitiatePayload';
  withdrawal: Withdrawal;
};

export type SumsubTokenCreateMutationVariables = Exact<{ [key: string]: never; }>;


export type SumsubTokenCreateMutation = { __typename?: 'Mutation', sumsubTokenCreate: { __typename?: 'SumsubTokenCreatePayload', token: string } };

export type MeQueryVariables = Exact<{ [key: string]: never; }>;


export type MeQuery = { __typename?: 'Query', me?: { __typename?: 'User', userId: any, email: string, btcDepositAddress: string, ustDepositAddress: string, applicantId?: string | null, status: AccountStatus, level: KycLevel, balance: { __typename?: 'UserBalance', unallocatedCollateral: { __typename?: 'UnallocatedCollateral', settled: { __typename?: 'BtcBalance', btcBalance: any } }, checking: { __typename?: 'Checking', settled: { __typename?: 'UsdBalance', usdBalance: any }, pending: { __typename?: 'UsdBalance', usdBalance: any } } } } | null };


export const SumsubTokenCreateDocument = gql`
    mutation SumsubTokenCreate {
  sumsubTokenCreate {
    token
  }
}
    `;
export type SumsubTokenCreateMutationFn = Apollo.MutationFunction<SumsubTokenCreateMutation, SumsubTokenCreateMutationVariables>;

/**
 * __useSumsubTokenCreateMutation__
 *
 * To run a mutation, you first call `useSumsubTokenCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSumsubTokenCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sumsubTokenCreateMutation, { data, loading, error }] = useSumsubTokenCreateMutation({
 *   variables: {
 *   },
 * });
 */
export function useSumsubTokenCreateMutation(baseOptions?: Apollo.MutationHookOptions<SumsubTokenCreateMutation, SumsubTokenCreateMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SumsubTokenCreateMutation, SumsubTokenCreateMutationVariables>(SumsubTokenCreateDocument, options);
      }
export type SumsubTokenCreateMutationHookResult = ReturnType<typeof useSumsubTokenCreateMutation>;
export type SumsubTokenCreateMutationResult = Apollo.MutationResult<SumsubTokenCreateMutation>;
export type SumsubTokenCreateMutationOptions = Apollo.BaseMutationOptions<SumsubTokenCreateMutation, SumsubTokenCreateMutationVariables>;
export const MeDocument = gql`
    query Me {
  me {
    userId
    email
    btcDepositAddress
    ustDepositAddress
    applicantId
    status
    level
    balance {
      unallocatedCollateral {
        settled {
          btcBalance
        }
      }
      checking {
        settled {
          usdBalance
        }
        pending {
          usdBalance
        }
      }
    }
  }
}
    `;

/**
 * __useMeQuery__
 *
 * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.
 * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMeQuery({
 *   variables: {
 *   },
 * });
 */
export function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);
      }
export function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);
        }
export type MeQueryHookResult = ReturnType<typeof useMeQuery>;
export type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;
export type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;